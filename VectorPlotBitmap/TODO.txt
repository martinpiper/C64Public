TODO

* Some frames of the spinning cube/spaceship show weirdly inserted spans. Investigate, find the angles to get a repeatable test case



* When using the cart based speed code, other code and data can be underneath. For example TransformMem.a, SegmentsMemory.a



* Transform.a is the start of the model->work->screen transformation pipeline
	Obviously needs tests etc


* Transform_renderFaces
	Obviously will need to sort from front to back before "jsr Poly2D_scanQuad" and "jsr Segments_processLines"



* Need some more robust Poly2D_scanTriangle features
	Specifically testing the edge generation and quad edge detection



* SpanCalc_expireCleared/SpanCalc_dirtyClear logic needs to take into account for segments and the number of screen banks



* For the number of screen buffers, if the scan is changed reset a counter.
	Or increment if unchanged.
	After the number of screen buffers passes, then change it it to empty, zero segments by setting the high byte if the segment link list to 0.
	Optimisation to skip the cmp is to use the -ve to +ve switch check. Set a newly plotted scan to 127 - frames. Then when -ve skip entirely.

	* Start with zero segments, meaning don't draw that scan.

		When adding into zero then init with the clear line colour.
		This is a dirty line optimisation, like dirty rectangle.

	* After rendering the "clear screen" pass will just set any used scanlines just rendered to a full clear line colour that is then retired after the number of screen buffer passes, or further rendering passes



* Colour 0 can be a special case for the plot, the ends can effectively be clears instead
	Have an option to mask or just round the end to the nearest 4 pixels



* If EnableInterlace is enabled can we use half of kSpanPlot_maxHeight?
	The "; Setup the current scan from the scans table" would need to use half of x into the SpanCalc_ tables



* There is an optmisation for the cart bank packing where the code, because it's position independant, can be put anywhere.
	The MakeCart option can be optimised to use the same space packing technique as the streaming cartridge link list output, but without the link list header.
	If each raw chunk of code saved to a 00 or x00 aligned filename and MakCart also saved to _f_index.a file it would be easier to create the lookup table from the CartFile1_Bank_X and CartFile1_Start_X labels




* Consider updating the accuracy of the maths, especially useful for the vector hardware demo.
	Perhaps get Elite working with filled 3D vectors?
	https://www.bbcelite.com/elite-a/
	https://www.bbcelite.com/deep_dives/
	https://www.bbcelite.com/elite-a/articles/map_of_the_source_code.html
	https://www.bbcelite.com/elite-a/indexes/a-z.html
	https://www.bbcelite.com/elite-a/docked/subroutine/ll28.html
	https://www.bbcelite.com/elite-a/docked/subroutine/mvs4.html
	https://www.bbcelite.com/deep_dives/pitching_and_rolling.html
	https://www.bbcelite.com/deep_dives/rotating_the_universe.html
	https://www.bbcelite.com/deep_dives/orientation_vectors.html
	https://github.com/markmoxon/elite-a-beebasm
	https://www.bbcelite.com/deep_dives/line-clipping.html
	https://www.bbcelite.com/deep_dives/extended_screen_coordinates.html
	https://www.bbcelite.com/deep_dives/shift-and-subtract_division.html
	https://www.bbcelite.com/deep_dives/multiplication_and_division_using_logarithms.html
	