;Single direction scrolling routines

scrollMapHPos			!by $00		; Block pos in map
scrollMapHPos2			!by $00		; Block pos in map
scrollMapLPos			!by $00		; Char pos in block (0-4)
frameScrollPos			!by 0	; Pixels
;scrollerRealMovementYPixels !by 0
frameTotalScrScroll		!by 0
frameScrollMoveColours	!by 0

; The pixel position plus the actual character line in the map. Used for testing attack wave data.
TotalScrollPosition !by 0,0

!zn {
ScrollerInitTables
	; Sort out the map table based on map width
	ldx #0
	lda #<MapData
	sta tempWork0
	lda #>MapData
	sta tempWork1
.fma1
	lda tempWork0
	sta MapTabL,x
	lda tempWork1
	sta MapTabH,x
	lda tempWork0
	clc
	; Fixed width of eight blocks per line
	adc #8
	sta tempWork0
	bcc .over2
	inc tempWork1
.over2
	inx
	bne .fma1
	rts
}

!ifdef Parallax_Enable {
!zn {
.paralaxPos1 !by 0
.paralaxPos2 !by 0
.paralaxPos2s !by 0	; Shifted
paralaxMoveThisFrame !by 0
	; This routine can be called in several different places during the game.
	; Either before the colour scroll, before off screen character screen updates or just normally without char/colour updates.
	; Entry: Nothing
	; Return: Nothing preserved or returned
ParalaxUpdate
	lda paralaxMoveThisFrame
	bne .do
	rts
.do
; Make sure A is 0 or the required move this frame
ParalaxUpdateForce
	sta .sm1+1
	sta .sm2+1

	; Mark it as done
	lda #0
	sta paralaxMoveThisFrame

!ifdef Scroller_DebugParalaxScrollTimings {
	lda #VIC2Colour_Orange
	sta VIC2BorderColour
}

	lda .paralaxPos1
	clc
.sm1	adc #0
	cmp #(Parallax_Height*8)
	bcc .o1
	sbc #(Parallax_Height*8)
.o1
	sta .paralaxPos1

	; Half speed, double the precision
	lda .paralaxPos2
	clc
.sm2	adc #0
	cmp #(Parallax_Height*8*2)
	bcc .o2
	sbc #(Parallax_Height*8*2)
.o2
	sta .paralaxPos2
	lsr
	sta .paralaxPos2s

	; Now the fun begins
	ldx .paralaxPos1
	ldy .paralaxPos2s
	!for .ypos,Parallax_Height {
	!for .line,8 {
	!for .xpos,Parallax_Width {
!ifdef SimpleParallax_Enable {
	lda Parallax_Level1CharData + ((((.xpos-1)*Parallax_Height*2) + (.ypos-1))*8) + .line-1 , y
	sta CharData + ((Parallax_CharStart+((.xpos-1)*Parallax_Height) + (.ypos-1))*8) + .line-1
} else {
	; Static level
	lda Parallax_Level2CharData + ((((.xpos-1)*Parallax_Height*2) + (.ypos-1))*8) + .line-1 , x
	; Middle level
!ifdef Parallax_MaskEnable {
	and Parallax_Level1CharDataMask + ((((.xpos-1)*Parallax_Height*2) + (.ypos-1))*8) + .line-1 , y
}
	ora Parallax_Level1CharData + ((((.xpos-1)*Parallax_Height*2) + (.ypos-1))*8) + .line-1 , y
	sta CharData + ((Parallax_CharStart+((.xpos-1)*Parallax_Height) + (.ypos-1))*8) + .line-1
}
	}
	}
	}


!ifdef Scroller_DebugParalaxScrollTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts
}
}

!zn {
; To be called as one of the first functions in the frame. Can be called even if the screen is being displayed.
ScrollerCalculate
	; Use whatever values were calculated the previous frame
	lda frameTargetVelY
	bpl .notNeg
	lda #0
.notNeg
	cmp #3
	bcc .notMoreThan2
	lda #2
.notMoreThan2
	sta scrollerRealMovementYPixels
!ifdef Parallax_Enable {
	sta paralaxMoveThisFrame
}
	cmp #0
	beq .noCharsWanted

	; Apply the scroll
	lda frameScrollPos
	clc
	adc scrollerRealMovementYPixels
	cmp #8
	and #7
	sta frameScrollPos
	bcc .noColourWanted
	inc frameScrollMoveColours
	rts
.noColourWanted
	lda frameTotalScrScroll
	bne .noCharsWanted
	; Might as well kick off the scroll for the next position
	inc frameTotalScrScroll
.noCharsWanted
	rts

}

!zn {
; To be called after ScrollerCalculate. Can be called even if the screen is being displayed.
ScrollerScreen
	; Test to see if we might do a colour scroll this frame and if so then update the displaying screen bank for the IRQ since our colour update is likely to be running by the time the IRQ happens.
	lda frameScrollMoveColours
	beq .scrollScreen

JNotWantingScroll
	jmp NotWantingScroll

.scrollScreen
!ifdef Parallax_Enable {
	jsr ParalaxUpdate
}

	lda frameTotalScrScroll
	beq JNotWantingScroll

	cmp #4
	beq JNotWantingScroll

	; Stop this being called again this frame
	inc frameTotalScrScroll

	cmp #1
	beq .do0

	cmp #2
	beq .do1

	; This splits the screen data to be scrolled over several frames, reducing the time spent
	; shifting data each frame.
	ldy topScreenBank
	bne .want2Scr1To0_1
	jmp ScrollSingle2Bank0To1_40
.want2Scr1To0_1
	jmp ScrollSingle2Bank1To0_40

.do0
	ldy topScreenBank
	bne .want0Scr1To0_1
	jmp ScrollSingle0Bank0To1_40
.want0Scr1To0_1
	jmp ScrollSingle0Bank1To0_40

.do1
	ldy topScreenBank
	bne .want1Scr1To0_1
	jmp ScrollSingle1Bank0To1_40
.want1Scr1To0_1
	jmp ScrollSingle1Bank1To0_40


	; If the screen y pixel wraps for the end of the movement then inc frameScrollMoveColours

NotWantingScroll

!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts
}

!zn {
; Must be called after ScrollerScreen. Must not be called while the scrolling screen is being displayed.
ScrollerOffScreen
	; Now update the colour memory if required by the scroll
	lda frameScrollMoveColours
	beq NotWantingColourScroll

	; Reset this so we don't do it again
	lda #0
	sta frameScrollMoveColours
	sta frameTotalScrScroll

	jsr ScrollerFlipBank

!ifdef Parallax_Enable {
	jsr ParalaxUpdate
}

	inc ScrollerScreenCharMovedY
	jmp ScrollSingleColour_40

NotWantingColourScroll
!ifdef Scroller_DebugColourScrollTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts
}


ScrollerTimesFiveTab !by 0,5,10,15,20,25,30,35

!zn
DrawBlock
	sta mainAStore
	stx mainXStore
	sty mainYStore
	lda ScrollerTimesFiveTab,y
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	lda ScrollerTimesFiveTab,x
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #$c8
	sta tempWork1

	ldx mainAStore
	lda BlockTabL,x
	sta tempWork2
	lda BlockTabH,x
	sta tempWork3
	ldy #0

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #35
	sta tempWork0
	bcc .over3
	inc tempWork1
.over3

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #35
	sta tempWork0
	bcc .over4
	inc tempWork1
.over4

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #35
	sta tempWork0
	bcc .over5
	inc tempWork1
.over5

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #35
	sta tempWork0
	bcc .over6
	inc tempWork1
.over6

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts

!zn
DrawBlockColour
	sta mainAStore
	stx mainXStore
	sty mainYStore
	lda ScrollerTimesFiveTab,y
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	lda ScrollerTimesFiveTab,x
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #>COLOURRAM
	sta tempWork1

	ldx mainAStore
	lda BlockColours,x
	tax
	ldy #0

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #36
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #36
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #36
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #36
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts

UpdateMapBlockPointers
	ldx scrollMapHPos
	lda MapTabL,x
	sta .sm1+1
	lda MapTabH,x
	sta .sm1+2
	lda scrollMapHPos2
	asl
	asl
	asl
	clc
	adc .sm1+2
	sta .sm1+2
	rts

; Draws the initial map from the coords setup, don't forget it is upside down in memory
DrawMap
	jsr UpdateMapBlockPointers
	; MPi: Known bug, if it isn't Scroller_FullScreen then the score panel colour information is lost. This is because we really need the lower half of the game screen
	; for SEUCK games. The score panel split in SEUCK mode is just there to demo the split, nothing else.
	ldy #4
.l1
	ldx #0
.l2
.sm1	lda $ffff,x
	jsr DrawBlock
	jsr DrawBlockColour
	inx
	cpx #8
	bne .l2

	; Then progress down to the next map block line
	inc scrollMapHPos
	bne .notHigh2
	inc scrollMapHPos2
.notHigh2
	jsr UpdateMapBlockPointers

	ldx #0
	dey
	bpl .l1

!ifdef IRQOpenBorders {
	jsr ScrollerOpenBorderCopyBank0
}

	; Now initialise our variables preparing for a fine scroll from this displayed screen
	lda #4
	sta scrollMapLPos
	lda #0
	sta frameTotalScrScroll
	sta frameScrollMoveColours
	; MPi: TODO: Maybe draw the map to the back buffer then swap it rather than assuming one
	; static screen bank?
	sta topScreenBank
	rts




; Char screen scrollers
!zn
ScrollSingle0Bank0To1_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #13
.l1
	lda $c800+00+(0*40),x
	sta $cc00+40+(0*40),x
	lda $c800+00+(1*40),x
	sta $cc00+40+(1*40),x
	lda $c800+00+(2*40),x
	sta $cc00+40+(2*40),x
	lda $c800+00+(3*40),x
	sta $cc00+40+(3*40),x
	lda $c800+00+(4*40),x
	sta $cc00+40+(4*40),x
	lda $c800+00+(5*40),x
	sta $cc00+40+(5*40),x
	lda $c800+00+(6*40),x
	sta $cc00+40+(6*40),x
	lda $c800+00+(7*40),x
	sta $cc00+40+(7*40),x
	lda $c800+00+(8*40),x
	sta $cc00+40+(8*40),x
	lda $c800+00+(9*40),x
	sta $cc00+40+(9*40),x
	lda $c800+00+(10*40),x
	sta $cc00+40+(10*40),x
	lda $c800+00+(11*40),x
	sta $cc00+40+(11*40),x
	lda $c800+00+(12*40),x
	sta $cc00+40+(12*40),x
	lda $c800+00+(13*40),x
	sta $cc00+40+(13*40),x
	lda $c800+00+(14*40),x
	sta $cc00+40+(14*40),x
	lda $c800+00+(15*40),x
	sta $cc00+40+(15*40),x
	lda $c800+00+(16*40),x
	sta $cc00+40+(16*40),x
	lda $c800+00+(17*40),x
	sta $cc00+40+(17*40),x
	lda $c800+00+(18*40),x
	sta $cc00+40+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #13
.l2
	lda $c800+00+(19*40),x
	sta $cc00+40+(19*40),x
	lda $c800+00+(20*40),x
	sta $cc00+40+(20*40),x
	lda $c800+00+(21*40),x
	sta $cc00+40+(21*40),x
	lda $c800+00+(22*40),x
	sta $cc00+40+(22*40),x
	lda $c800+00+(23*40),x
	sta $cc00+40+(23*40),x
	dex
	bpl .l2
}
	jmp NotWantingScroll

!zn
ScrollSingle1Bank0To1_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #13
.l1
	lda $c800+00+14+(0*40),x
	sta $cc00+40+14+(0*40),x
	lda $c800+00+14+(1*40),x
	sta $cc00+40+14+(1*40),x
	lda $c800+00+14+(2*40),x
	sta $cc00+40+14+(2*40),x
	lda $c800+00+14+(3*40),x
	sta $cc00+40+14+(3*40),x
	lda $c800+00+14+(4*40),x
	sta $cc00+40+14+(4*40),x
	lda $c800+00+14+(5*40),x
	sta $cc00+40+14+(5*40),x
	lda $c800+00+14+(6*40),x
	sta $cc00+40+14+(6*40),x
	lda $c800+00+14+(7*40),x
	sta $cc00+40+14+(7*40),x
	lda $c800+00+14+(8*40),x
	sta $cc00+40+14+(8*40),x
	lda $c800+00+14+(9*40),x
	sta $cc00+40+14+(9*40),x
	lda $c800+00+14+(10*40),x
	sta $cc00+40+14+(10*40),x
	lda $c800+00+14+(11*40),x
	sta $cc00+40+14+(11*40),x
	lda $c800+00+14+(12*40),x
	sta $cc00+40+14+(12*40),x
	lda $c800+00+14+(13*40),x
	sta $cc00+40+14+(13*40),x
	lda $c800+00+14+(14*40),x
	sta $cc00+40+14+(14*40),x
	lda $c800+00+14+(15*40),x
	sta $cc00+40+14+(15*40),x
	lda $c800+00+14+(16*40),x
	sta $cc00+40+14+(16*40),x
	lda $c800+00+14+(17*40),x
	sta $cc00+40+14+(17*40),x
	lda $c800+00+14+(18*40),x
	sta $cc00+40+14+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #13
.l2
	lda $c800+00+14+(19*40),x
	sta $cc00+40+14+(19*40),x
	lda $c800+00+14+(20*40),x
	sta $cc00+40+14+(20*40),x
	lda $c800+00+14+(21*40),x
	sta $cc00+40+14+(21*40),x
	lda $c800+00+14+(22*40),x
	sta $cc00+40+14+(22*40),x
	lda $c800+00+14+(23*40),x
	sta $cc00+40+14+(23*40),x
	dex
	bpl .l2
}
	jmp NotWantingScroll

!zn
ScrollSingle2Bank0To1_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #11
.l1
	lda $c800+00+14+14+(0*40),x
	sta $cc00+40+14+14+(0*40),x
	lda $c800+00+14+14+(1*40),x
	sta $cc00+40+14+14+(1*40),x
	lda $c800+00+14+14+(2*40),x
	sta $cc00+40+14+14+(2*40),x
	lda $c800+00+14+14+(3*40),x
	sta $cc00+40+14+14+(3*40),x
	lda $c800+00+14+14+(4*40),x
	sta $cc00+40+14+14+(4*40),x
	lda $c800+00+14+14+(5*40),x
	sta $cc00+40+14+14+(5*40),x
	lda $c800+00+14+14+(6*40),x
	sta $cc00+40+14+14+(6*40),x
	lda $c800+00+14+14+(7*40),x
	sta $cc00+40+14+14+(7*40),x
	lda $c800+00+14+14+(8*40),x
	sta $cc00+40+14+14+(8*40),x
	lda $c800+00+14+14+(9*40),x
	sta $cc00+40+14+14+(9*40),x
	lda $c800+00+14+14+(10*40),x
	sta $cc00+40+14+14+(10*40),x
	lda $c800+00+14+14+(11*40),x
	sta $cc00+40+14+14+(11*40),x
	lda $c800+00+14+14+(12*40),x
	sta $cc00+40+14+14+(12*40),x
	lda $c800+00+14+14+(13*40),x
	sta $cc00+40+14+14+(13*40),x
	lda $c800+00+14+14+(14*40),x
	sta $cc00+40+14+14+(14*40),x
	lda $c800+00+14+14+(15*40),x
	sta $cc00+40+14+14+(15*40),x
	lda $c800+00+14+14+(16*40),x
	sta $cc00+40+14+14+(16*40),x
	lda $c800+00+14+14+(17*40),x
	sta $cc00+40+14+14+(17*40),x
	lda $c800+00+14+14+(18*40),x
	sta $cc00+40+14+14+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #11
.l2
	lda $c800+00+14+14+(19*40),x
	sta $cc00+40+14+14+(19*40),x
	lda $c800+00+14+14+(20*40),x
	sta $cc00+40+14+14+(20*40),x
	lda $c800+00+14+14+(21*40),x
	sta $cc00+40+14+14+(21*40),x
	lda $c800+00+14+14+(22*40),x
	sta $cc00+40+14+14+(22*40),x
	lda $c800+00+14+14+(23*40),x
	sta $cc00+40+14+14+(23*40),x
	dex
	bpl .l2
}
	jsr ScrollerDrawStripTopBank1
!ifdef IRQOpenBorders {
	jsr ScrollerOpenBorderCopyBank1
}
	jmp NotWantingScroll

; Now the other bank

!zn
ScrollSingle0Bank1To0_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #13
.l1
	lda $cc00+00+(0*40),x
	sta $c800+40+(0*40),x
	lda $cc00+00+(1*40),x
	sta $c800+40+(1*40),x
	lda $cc00+00+(2*40),x
	sta $c800+40+(2*40),x
	lda $cc00+00+(3*40),x
	sta $c800+40+(3*40),x
	lda $cc00+00+(4*40),x
	sta $c800+40+(4*40),x
	lda $cc00+00+(5*40),x
	sta $c800+40+(5*40),x
	lda $cc00+00+(6*40),x
	sta $c800+40+(6*40),x
	lda $cc00+00+(7*40),x
	sta $c800+40+(7*40),x
	lda $cc00+00+(8*40),x
	sta $c800+40+(8*40),x
	lda $cc00+00+(9*40),x
	sta $c800+40+(9*40),x
	lda $cc00+00+(10*40),x
	sta $c800+40+(10*40),x
	lda $cc00+00+(11*40),x
	sta $c800+40+(11*40),x
	lda $cc00+00+(12*40),x
	sta $c800+40+(12*40),x
	lda $cc00+00+(13*40),x
	sta $c800+40+(13*40),x
	lda $cc00+00+(14*40),x
	sta $c800+40+(14*40),x
	lda $cc00+00+(15*40),x
	sta $c800+40+(15*40),x
	lda $cc00+00+(16*40),x
	sta $c800+40+(16*40),x
	lda $cc00+00+(17*40),x
	sta $c800+40+(17*40),x
	lda $cc00+00+(18*40),x
	sta $c800+40+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #13
.l2
	lda $cc00+00+(19*40),x
	sta $c800+40+(19*40),x
	lda $cc00+00+(20*40),x
	sta $c800+40+(20*40),x
	lda $cc00+00+(21*40),x
	sta $c800+40+(21*40),x
	lda $cc00+00+(22*40),x
	sta $c800+40+(22*40),x
	lda $cc00+00+(23*40),x
	sta $c800+40+(23*40),x
	dex
	bpl .l2
}
	jsr ScrollerDrawStripTopBank0
!ifdef IRQOpenBorders {
	jsr ScrollerOpenBorderCopyBank0
}
	jmp NotWantingScroll

!zn
ScrollSingle1Bank1To0_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #13
.l1
	lda $cc00+00+14+(0*40),x
	sta $c800+40+14+(0*40),x
	lda $cc00+00+14+(1*40),x
	sta $c800+40+14+(1*40),x
	lda $cc00+00+14+(2*40),x
	sta $c800+40+14+(2*40),x
	lda $cc00+00+14+(3*40),x
	sta $c800+40+14+(3*40),x
	lda $cc00+00+14+(4*40),x
	sta $c800+40+14+(4*40),x
	lda $cc00+00+14+(5*40),x
	sta $c800+40+14+(5*40),x
	lda $cc00+00+14+(6*40),x
	sta $c800+40+14+(6*40),x
	lda $cc00+00+14+(7*40),x
	sta $c800+40+14+(7*40),x
	lda $cc00+00+14+(8*40),x
	sta $c800+40+14+(8*40),x
	lda $cc00+00+14+(9*40),x
	sta $c800+40+14+(9*40),x
	lda $cc00+00+14+(10*40),x
	sta $c800+40+14+(10*40),x
	lda $cc00+00+14+(11*40),x
	sta $c800+40+14+(11*40),x
	lda $cc00+00+14+(12*40),x
	sta $c800+40+14+(12*40),x
	lda $cc00+00+14+(13*40),x
	sta $c800+40+14+(13*40),x
	lda $cc00+00+14+(14*40),x
	sta $c800+40+14+(14*40),x
	lda $cc00+00+14+(15*40),x
	sta $c800+40+14+(15*40),x
	lda $cc00+00+14+(16*40),x
	sta $c800+40+14+(16*40),x
	lda $cc00+00+14+(17*40),x
	sta $c800+40+14+(17*40),x
	lda $cc00+00+14+(18*40),x
	sta $c800+40+14+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #13
.l2
	lda $cc00+00+14+(19*40),x
	sta $c800+40+14+(19*40),x
	lda $cc00+00+14+(20*40),x
	sta $c800+40+14+(20*40),x
	lda $cc00+00+14+(21*40),x
	sta $c800+40+14+(21*40),x
	lda $cc00+00+14+(22*40),x
	sta $c800+40+14+(22*40),x
	lda $cc00+00+14+(23*40),x
	sta $c800+40+14+(23*40),x
	dex
	bpl .l2
}
	jmp NotWantingScroll


!zn
ScrollSingle2Bank1To0_40
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	ldx #11
.l1
	lda $cc00+00+14+14+(0*40),x
	sta $c800+40+14+14+(0*40),x
	lda $cc00+00+14+14+(1*40),x
	sta $c800+40+14+14+(1*40),x
	lda $cc00+00+14+14+(2*40),x
	sta $c800+40+14+14+(2*40),x
	lda $cc00+00+14+14+(3*40),x
	sta $c800+40+14+14+(3*40),x
	lda $cc00+00+14+14+(4*40),x
	sta $c800+40+14+14+(4*40),x
	lda $cc00+00+14+14+(5*40),x
	sta $c800+40+14+14+(5*40),x
	lda $cc00+00+14+14+(6*40),x
	sta $c800+40+14+14+(6*40),x
	lda $cc00+00+14+14+(7*40),x
	sta $c800+40+14+14+(7*40),x
	lda $cc00+00+14+14+(8*40),x
	sta $c800+40+14+14+(8*40),x
	lda $cc00+00+14+14+(9*40),x
	sta $c800+40+14+14+(9*40),x
	lda $cc00+00+14+14+(10*40),x
	sta $c800+40+14+14+(10*40),x
	lda $cc00+00+14+14+(11*40),x
	sta $c800+40+14+14+(11*40),x
	lda $cc00+00+14+14+(12*40),x
	sta $c800+40+14+14+(12*40),x
	lda $cc00+00+14+14+(13*40),x
	sta $c800+40+14+14+(13*40),x
	lda $cc00+00+14+14+(14*40),x
	sta $c800+40+14+14+(14*40),x
	lda $cc00+00+14+14+(15*40),x
	sta $c800+40+14+14+(15*40),x
	lda $cc00+00+14+14+(16*40),x
	sta $c800+40+14+14+(16*40),x
	lda $cc00+00+14+14+(17*40),x
	sta $c800+40+14+14+(17*40),x
	lda $cc00+00+14+14+(18*40),x
	sta $c800+40+14+14+(18*40),x
	dex
	bpl .l1
!ifdef Scroller_FullScreen {
	ldx #11
.l2
	lda $cc00+00+14+14+(19*40),x
	sta $c800+40+14+14+(19*40),x
	lda $cc00+00+14+14+(20*40),x
	sta $c800+40+14+14+(20*40),x
	lda $cc00+00+14+14+(21*40),x
	sta $c800+40+14+14+(21*40),x
	lda $cc00+00+14+14+(22*40),x
	sta $c800+40+14+14+(22*40),x
	lda $cc00+00+14+14+(23*40),x
	sta $c800+40+14+14+(23*40),x
	dex
	bpl .l2
}
	jmp NotWantingScroll




;*****************************************************************************
;*****************************************************************************
; Hotizontal strips
;*****************************************************************************
;*****************************************************************************

!macro MACROScrollerDrawHStrip .screen, .mapLY, .mapHY, .mapHY2 {
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Blue
	sta VIC2BorderColour
}
	; Initialse map
	ldy .mapHY
	lda MapTabL,y
	sta .sm1+1
	lda MapTabH,y
	sta .sm1+2
	lda .mapHY2
	asl
	asl
	asl
	clc
	adc .sm1+2
	sta .sm1+2

	ldx #0	; Screen index

	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock
	jsr .DrawWholeBlock

	rts

.GetBlockFromMap
.sm1	ldy $ffff
	inc .sm1+1
	bne .s1
	inc .sm1+2
.s1
	rts

.GetBlockChar
.sm2	lda $ffff
	inc .sm2+1
	bne .ret
	inc .sm2+2
.ret
	rts

.DrawWholeBlock
	ldy .mapLY
	lda ScrollerTimesFiveTab,y
	jsr .GetBlockFromMap
	clc
	adc BlockTabL,y
	sta .sm2+1
	lda BlockTabH,y
	adc #0
	sta .sm2+2

	jsr .GetBlockChar
	sta .screen,x
	inx

	jsr .GetBlockChar
	sta .screen,x
	inx

	jsr .GetBlockChar
	sta .screen,x
	inx

	jsr .GetBlockChar
	sta .screen,x
	inx

	jsr .GetBlockChar
	sta .screen,x
	inx

	rts

.partial !by 0
}


!macro MACROScrollerDrawHStripColour .colours, .mapLY, .mapHY, .mapHY2 {
!ifdef Scroller_DebugColourScrollTimings {
	lda #VIC2Colour_LightBlue
	sta VIC2BorderColour
}
	; Set screen lohi
	; Initialse other variables
	ldy .mapHY
	lda MapTabL,y
	sta .sm1+1
	lda MapTabH,y
	sta .sm1+2
	lda .mapHY2
	asl
	asl
	asl
	clc
	adc .sm1+2
	sta .sm1+2

	ldx #0	; Screen index

	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour
	jsr .DrawWholeBlockColour

	rts

.GetBlockFromMap
.sm1	ldy $ffff
	inc .sm1+1
	bne .s1
	inc .sm1+2
.s1
	rts

.DrawWholeBlockColour
	jsr .GetBlockFromMap
	lda BlockColours,y
	sta .colours,x
	inx
	sta .colours,x
	inx
	sta .colours,x
	inx
	sta .colours,x
	inx
	sta .colours,x
	inx

	rts

.partial !by 0
}

!zn
; With a shift so we only update the parts of the colour screen we really need
.times40Plus39Tab !by 159, 119, 79, 39, 199

ScrollSingleColour_40
!ifdef Scroller_DebugColourScrollTimings {
	lda #VIC2Colour_Green
	sta VIC2BorderColour
}
!ifdef Scroller_NeedFullColourScroll {
	ldy scrollMapLPos
	ldx .times40Plus39Tab,y
	ldy #39
	cpx #199
	bne .l1
.l2
	lda COLOURRAM+00+(15*40),x
	sta COLOURRAM+40+(15*40),x
	lda COLOURRAM+00+(10*40),x
	sta COLOURRAM+40+(10*40),x
	lda COLOURRAM+00+(5*40),x
	sta COLOURRAM+40+(5*40),x
	lda COLOURRAM+00+(0*40),x
	sta COLOURRAM+40+(0*40),x
	dex
	dey
	bpl .l2
	bmi .over

.l1
!ifdef Scroller_FullScreen {
	lda COLOURRAM+00+(20*40),x
	sta COLOURRAM+40+(20*40),x
}
	lda COLOURRAM+00+(15*40),x
	sta COLOURRAM+40+(15*40),x
	lda COLOURRAM+00+(10*40),x
	sta COLOURRAM+40+(10*40),x
	lda COLOURRAM+00+(5*40),x
	sta COLOURRAM+40+(5*40),x
	lda COLOURRAM+00+(0*40),x
	sta COLOURRAM+40+(0*40),x
	dex
	dey
	bpl .l1

.over
!ifdef Scroller_DebugColourScrollTimings {
	lda #VIC2Colour_LightGreen
	sta VIC2BorderColour
}
	lda scrollMapLPos
	cmp #4
	bne .noColourUpdate
	jsr ScrollerDrawStripTopColour
.noColourUpdate
} ;<!ifdef Scroller_NeedFullColourScroll

	dec scrollMapLPos
	bpl .noBlockWrap
	lda #4
	sta scrollMapLPos
	inc scrollMapHPos
	bne .noBlockWrap
	inc scrollMapHPos2
.noBlockWrap

	jmp NotWantingColourScroll

!zn {
ScrollerDrawStripTopBank0
	+MACROScrollerDrawHStrip $c800, scrollMapLPos , scrollMapHPos , scrollMapHPos2
}

!zn {
ScrollerDrawStripTopBank1
	+MACROScrollerDrawHStrip $cc00, scrollMapLPos , scrollMapHPos , scrollMapHPos2
}

!ifdef Scroller_NeedFullColourScroll {

!zn {
ScrollerDrawStripTopColour
	+MACROScrollerDrawHStripColour $d800, scrollMapLPos , scrollMapHPos , scrollMapHPos2
}

}
