; MPi: TODO: The main displayed area needs to mirror the first line of the score panel to improve the split.
;		Can then move the multi-colour panel split change to inside the bitmap+ECM area and not have the FLD flickering bug


; Stablised the score panel split for most cases. Sprites still cause some timing problems sometimes.


.hitSomethingTyped was sometimes getting a recently, within the same frame, removed AnimationType of $ff from an enemy bullet that hit the player with a player bullet nearby.
	This caused the recently removed enemy bullet to transform into a player dying animation.
	Now animation type is checked in the collision routine.



* Directional and directional hold animations are a lot better now.



; When Scroller_NeedFullColourScroll is not defined then look at splitting the char scroll onto two frames, use the now vacant colour scroll time.
; Can be done quite easily since they're split anyway.




* Add code to handle the slightly less memory hungry full colour per char mode in "ExternalTools\CharPad 2.0 310715\Examples (CTM5)\Examples - Rips\Turrican 2 - 4x4\Turrican 2 L2-2.ctm"
	Instead of a duplicate set of block data that contains colorus per block char cell, the colour mapping is on a per character basis, so constant for each character, not inside each block.
	194 char's data at $14
	colour mapping is at $624 at $14 + (numMapUsedChars * 8)
	172 blocks at $14 + (numMapUsedChars * 8) + numMapUsedChars stride 2
	170x48 map at $14 + (numMapUsedChars * 8) + numMapUsedChars + (numMapUsedTiles*4*4*2) stride 2
	* Added CharColoursForEveryCharacter = 1




* Avoid calling these functions during the title screen state
	ScrollerDemoWaitMultiplexHook
	ScrollerDemoWaitScorePanelHook
	ScrollerDemoWaitTopIRQHook
	* Added TitleScreen_Enable_ScrollerDemoWait_Hooks flag

	
	
	
* Consider using cartridge based speed code for unrolled screen scrolling code.
	C:\Downloads\WinVICE-2.4.6-x86-r28113\WinVICE-2.4.6-x86-r28113\x64sc.exe +warp -cartcrt Citadel2.crt
	Code and data would need to be re-arranged to account for $8000-$9fff being mapped at ROM sometimes
		Cycles per char
			Looping	4 + 4 + 2 + 3	= 13
			Speed	4 + 4			= 8
		Code size:
			Looping:	ScreenScrollerCodeEnd - ScreenScrollerCodeStart = 2484 - 1c04 = 880
			Speed:		40 * 20 * 8 * 2 * 6 = 12C00 (12C0 per bank per direction, so need 16 ROM banks for 8 way 2 banks)
	ScrollerStrips has self modifying code so it's not a candidate
	* Will need a common batch file for creating the relevant scroller binaries
		* Can import values from the map
	* and creating a crt image
	http://codebase64.org/doku.php?id=base:crt_file_format#ocean_type_1
	* bin\MakeCart.exe already supports larger carts with higher bank numbers
	Added code to ScrollersNoColour.a to use +Scroller_ScrollExecCartBank
	Adding scroller code into CartCode, this will then get added to a cart image
		cd /d c:\Work\C64\Scroller\CartCode
		..\..\acme.exe -o c:\temp\t0.bin ScrollerNoColour0To1_1.a
		..\..\acme.exe -o c:\temp\t1.bin ScrollerNoColour1To0_1.a
		..\..\bin\MakeCart.exe -n -b 9 -r c:\temp\t0.bin -c 0 0 $2000 -w -r -b 10 -r c:\temp\t1.bin -c 0 0 $2000 -w -b 11 -r c:\temp\t0.bin -c 0 0 $2000 -w -b 12 -r c:\temp\t0.bin -c 0 0 $2000 -w -o c:\temp\t.crt
	** This will need changes to the IRQ hanlders, including the multiplexor, to allow their "rti" use to be changed to a "jmp MinimalIRQServiceRoutine" or similar IRQ exit routine.
	* In Scroller\Scrollers.a ScrollBank*To*_* and ScrollColour_* routines also need +Scroller_ScrollExecCartBank additions
	* First add code to make ProcessorPortDefault or ProcessorPortKERNALWithIO selectable in addition to ProcessorPortAllRAMWithIO for Scroller\ScrollEntryCommon.a.
	* Then add code to handle the cart banking scrollers
	* Added Scroller_UseKernal
	** Screen score panel split IRQ entry timing needs adjusting by the cycles for the kernal routine at FF48
		= cycles 3 + 2 + 3 + 2 + 3 + 2 + 4 + 2 + 3 + 5
		== 29 cycles
		ScorePanel1Quick
		ScorePanel1
	* Added automatic build for left/right directions using the CartCode source files
	* Done - When Scroller_FullScreen is used with IRQOpenBorders the kernal NMI code needs to be added. Similar to Multiplex_IRQExit but use Multiplex_NMIExit
	* Don't forget to seyup ScreenBTemp in BuildIt.bat for the colour scrollers
	* Added automatic build for up/down directions using the CartCode source files
	* Need diagonals... *sigh*
	** Done 39
	** Done -39
	** Done 41
	** Done -41




* SEUCK Redux code enabled, with Scroller_UseKernal and when loading it from a cart doesn't work.
	But the multi-directional scroll build with speed code does work with cart.
	It looks like BASIC is being switched on when the title screen is displayed?
		lda #Scroller_KillCartridgeBank
		sta EASYFLASH_BANK
		lda #EASYFLASH_CONTROL_KILL
		sta EASYFLASH_CONTROL




* Use the MakeCart -f option to more efficiently pack the speed code, since it is position independant code it can execute from anywhere in the cart's bank
	Can also take into account the Scroller_MultiDirectionNoDiagonals flag to reduce the size of the data needed even further
	Scroller_ScrollExecCartBank can also use cart access macros or common code from EasyFlash_Code.a

	
	
* Narrow the split, to increase score panel space or increase screen draw space.
	* Debug by adding the ability to force Y position offsets and frameScrollY updates for range testing
	Added Multiplex_DefaultPatternYPosTweak and Scroller_DebugSplit




* Added Scroller_DiscardMinSpriteYPos : Set this to allow the AnimationUpdateMultiplexor to skip sprites above this limit




*	@47/205
	> d011 17
	@ 34/256
	> d011 13
	Screen height is not changed, causing the score panel to be displayed one char line earlier



; For map types where each character is mapped to a specific colour (block colour data is *not* duplicated in the block data)
; then the side colour update can be a fast unrolled section of code that does a lookup based on the screen data that will be switched to.
; This means the colour block plot doesn't need to do so much work.
	* Added Scroller_EnableBlockColourSpeedCode




* If Scroller_EnableSpeedCode and Scroller_EnableBlockColourSpeedCode is enabled then make sure the Scroller_EnableBlockColourSpeedCode enabled strips code is removed from RAM into ROM only
	Added calculated Scroller_EnableBlockColourSpeedCodeInCart



* Using the MakeCart +! option to force memory location $8000



* Update to use GMod2, 8KB banks
	* Different cart boot code, use runstop to cause it to do a normal boot
	* The speed code scrollers might need splitting, into their separate top/bottom half routines, to squeeze them into 8KB banks instead of 16KB banks



* Added ScrollerStripsCodeSize/Start/End to aid debugging




* Unroll the block plotting code for characters
	* A bit like the code for Scroller_EnableBlockColourSpeedCode
	* Also put this code in the cart banks if Scroller_EnableSpeedCode is enabled and remove from RAM
	* Tricky because the block data can be under the cart ROM that is banked in...
	Before with no debug colours: ScrollerStripsCodeSize  =$5cf
	* Done - DataCheck.a - Use this to check for all the externally referenced data
	* Done - Split into ScrollerStripsTop/Bottom/Left/Right.a to prepare for Scroller_EnableBlockStripsSpeedCodeInCart versions later
	* When Scroller_EnableBlockStripsSpeedCode then unroll bottom/top/right/left versions
		Done - MACROScrollerDrawHStripUnrolled + top + bottom
		Done - MACROScrollerDrawVStripUnrolled + left + right
	* Create Scroller_EnableBlockStripsSpeedCodeInCart like Scroller_EnableBlockColourSpeedCodeInCart
		Add extra Scroller_EnableBlockStripsSpeedCodeInCart option that is activated with Scroller_EnableSpeedCode like that used for Scroller_EnableBlockColourSpeedCodeInCart
	* When Scroller_EnableBlockStripsSpeedCodeInCart assemble the unrolled code separately
		Make sure used variables/defines are extracted by sed in BuildIt.bat




* When Scroller_LinkedPlayers
	Then for player 2 direction consider using the player 1 veloxity to direction.
		Around PlayerControl.a:.ignoreCollision
			ldx .playerInformation+PlayerGameOffset_TargetVelX
			ldy .playerInformation+PlayerGameOffset_TargetVelY
		Read the above from +MACROPlayerControl Player2Information
		Or perhaps just before:
			ldx .playerInformation+PlayerGameOffset_AnimationIndex
		Use: Player1Information+PlayerGameOffset_AnimationIndex
			lda AnimationDirectionIn,x
		instead of the jsr AnimationConvertXYToDirection
	* Added Scroller_LinkedPlayersAnimations



* Added support for sprite expansion options
	Global_SpriteExpandX = 1
	Global_SpriteExpandY = 1




* Done - Consider making EnemySpriteYPosToScreenCharPosLo/EnemySpriteYPosToScreenCharPosHi from Citadel2 a common set of data and supprting routines/macros to aid sprite to background collision detection
		* SpritePosToScreenPosMacros.a SpritePosToScreenPosMem.a SpritePosToScreenPosMem2.a
	* Add some simple player fall/run/jump control tests with the multi-directional example
		* Use Scroller_RunJumpDemo = 1
	* Add suitable camera movement which is push scroll based, but tries to align diagonal scrolling with the center of chars.
		* The scroll will favour re-centering/aligning the scroll to a middle of a char. So for example if the scroll is to the left/right and no vertical scroll then align the Y scroll to the middle.
			Keep the idle axis in the middle of the char
	* MSpritePosToCharacterLookup could do with a passed in adjustment for xpos/ypos that uses some slightly different code if the values are != 0
	* Figure out some non-magic values for the box edges for "Simple push camera calculations"
	* Added CharEffects.a for player character bullet example code



* For CharEffects.a BeforeScrollers and AfterScrollers optimise the transversal through the list by having two optimised link lists of indexes
	* One used and one free linked list
	* So when there are no bullets then there is virtually no time taken
	** Done - Create automated jotstick inputs that run to the right and then jump over the gap
		Tweak it until the frame overruns
		Identify the expensive operations
		Optimise, most probably by tweaking the camera movement to avoid the situation where every frame is doing a full screen/colour scroll
		See timings with Scroller_RunJumpDemo_RunJumpTest and Scroller_DebugColourScrollTimings and Scroller_DebugScreenScrollTimings

	Note define: Scroller_RunJumpDemo_RunJumpTest
	** Done - Will need an on-screen frame display, utilising the characters for the score. This is so that Vice breakspoints and single step frame in pause mode can be tracked
	* Frame:
		259		Start of screen diagonal movement. Note how char/col scrolls occur every frame without any free time
		283		Indicates visible screen corruption as the chars and the colour copy overruns, so the colours are one frame behind the chars
				Note how the green/lightgreen portion is within the visible area of the screen timing
	frameScrollX	frameScrollY
	frameTargetVelX	frameTargetVelY

	Testing the first jump right at frame 259-
		Note new code around: ; Double check we are not going to cause bad screen scrolls with certain alignments
		Success! This delays the diagnoal scroll, by removing the frameTargetVelX (due to frameScrollY==0 indicating the Y scroll just happened), until the next frame
		This aligns the diagonal movement for -2,2 until the chars scroll is synchronised!
	** This needs to be made more generic, perhaps a table of velocities and scroll values?
		* Investigate using a "just scrolled character or colour" flag, this then simplifies the "does the current X/Y movement cause a char scroll within 2 frames" test.
			Added frameIsBusyScrolling
	* Added more tests for "Double check we are not going to cause bad screen scrolls with certain alignments"
	* When scrolling down right or up left the alignment is different, so different checks will be needed



* Re: Scroller_DoMusicUpdateInIRQ
	* ; DO NOT USE UNTIL split timing and cart bank selection issues are sorted out
		BottomBorder3 and ScorePanel2 need extra sty/ldy irqYStore which could scren with the nicely tweaked horizontal splits




* Flag when the score panel wait did not actually wait. Then use that to delay the forced colour scroll by a frame. This will produce a stop of the scroll until the timing is conducive to a flicker free update with synchronisation to the raster.
	But ScrollerCalculate will calculate frameScrollX (or Y), especially if frameScrollMoveColours and use frameScrollPreCalcX, before the overrun problem is detected for the colour scroll
	So to be absolutely sure of the colour update happening is hard
	* Thoughts for Citadel2: Check that ScrollerCalculate will flag to the other routines, like the memory defrag, that they should not happen when busy.
		Checks the busy flags are only reset when the next ScrollerCalculate is called and after the char/colour scrolls are definitely done
		Check if the "Wait for the top interrupt to happen" is late. If this is late and a char/colour scroll has not happened, perhaps this implies a frame overrun better and then the intended scroll can be blocked by ScrollerCalculate?
	* Added ScrollerDemo_OverrunTopIRQFlag
	* Added frameMovedScreenOrColours
	* Another thought:
		In ScrollerCalculate
		Where: ; Use whatever values were calculated the previous frame
		If ScrollerDemo_OverrunPanelIRQFlag is added and detected then can we effectively delay the colour scroll there, to avoid the situation where the colour scroll doesn't have enough time?
		* Hmm, ScrollerDemo_OverrunPanelIRQFlag seems to trigger quite often even without a scroll, probably because the bottom IRQ and sort it taking quite some time
			So it's not going to be useful
	* After some experimentation with "; Debug profiling raster position for colour scroll trigger"
		Without shooting lots of player bullets, the scroll colour behaves itself even when triggered VIC2Raster <= $84
		But VIC2Raster ~> $b0 the scroll will definitely flicker
		* Added Scroller_ColourScrollRasterAbortLevel, this seems to fix the issue really well!
			Also fixes the trap spawn room stress test in Citadel 2





; Enemy aimed fire to target both players when they are active. Alternate fire, or nearest enemy to player fire mode.
Player1Information or Player2Information is used depending on the active players



* Created ScrollEntry_SEUCK.a and ScrollEntry_MultiDirection.a that are included by ScrollEntry.a
	This avoids me needing to continuously tweak all the options for each build type



* Potential bug in the static level redraw back in the map, test case using a modified Transputerman (SEUCK game 3) in C64\SEUCK\tstlvlrwedraw .i
	The later levels jump backwards through the map with a redraw, in SEUCK the same enemies should respawn, this code should do the same
	* Done see "; Test for still (static) level redraw tweak"



* If IRQOpenBorders was being used then BottomBorderLessTime was not saving the X register and restoring from some other value, oops.




* Scroller_FullScreen with Scroller_UseKernal and IRQOpenBorders needs to have its timing adjusted for BottomBorder*
	Also: ScrollerNMI1 and Scroller_NMITimerAdjust
	Top border done
	Bottom border is proving tricky
	All below timings are with debug border colour change
	* Timing without kernal (w store d011) no sprites, frameScrollY = 0
		lin 002 cyc 009 = %01110000
		lin 055 cyc 024 = %00010000
		lin 245 cyc 011 = %01111011
		lin 250 cyc 026 = %11110011
		lin 263 cyc 041 = %01110011
	* Timing without kernal (w store d011) all sprites top and bottom borders, frameScrollY = 0
		lin 002 cyc 010 = %01110000
		lin 055 cyc 031 = %00010000
		lin 245 cyc 019 = %01111011
		lin 250 cyc 033 = %11110011
		lin 263 cyc 042 = %01110011
	* Without BottomBorderLessTime, all sprites and no sprites seems stable for frameScrollY = 0-7
		So remove BottomBorderLessTime
	* What cabout the score panel timings, can ScorePanel1Quick be removed?
	* Timing without kernal, frameScrollY = 0, no IRQOpenBorders, with ScorePanel1Quick
		lin 001 cyc 014 = %00010000
		lin 207 cyc 011 = %01111111
			raster 207 = %11001111 = So forces a bad line
		lin 215 cyc 012 = %00011111
			raster 215 = %11010111 : Another bad line
	* Timing without kernal, frameScrollY = 0, no IRQOpenBorders, without ScorePanel1Quick
		lin 001 cyc 013 = %00010000
		lin 207 cyc 020 = %01111111
		lin 215 cyc 059 = %0001ffff6644
		Seems stable
	* When IRQOpenBorders, add a scorePanelPos2 check to BottomBorder2
	* Timing without kernal (w store d011) all sprites and no sprites top and bottom borders, frameScrollY = 0-7
		lin 002 cyc 007 = %01110000
		lin 055 cyc 027 = %00010000
		lin 245 cyc 021 = %01111011
		lin 250 cyc 044 = %11110011
		lin 263 cyc 041 = %01110011
		Seems stable
	* Using sprite combinatons and "Uses the joystick to manipulate frameScrollPos values" with fire to cycle the Y scroll pos:
		* With and without debug border colour change
		* all non-kernal IRQOpenBorders appear stable
		* all non-kernal score panel scrolls appears stable



* Bottom open borders split and top panel split with kernal still wobbles without sprites on some Y scroll values, check timing...
	Does not need more Scroller_IRQRasterAdjust, causes flickering.
	Might need a quick routine...
	Without kernal, when frameScrollY=6 the line flickers to one row down, so use topScreenScrollYUsedIRQ



; MPi: TODO: Add configuration to shift the screen split down one or two characters giving different size bottom areas.
; Things to tweak: scorePanelPos1 , (19*40) and (20*40) will need to be optionally enabled, MACROScrollerBottomAdjust , MACROScrollerDrawVStrip, MACROScrollerDrawVStripColour, ScrollerDrawStripBottomBank,
; ScrollerDrawStripBottomColour, DrawMap
; InitBank0Data and ClearGameScreens where it copies the screen lines at 20*40
	* Added: Scroller_AdditionalCharLines
	* Added: Scroller_ColourScrollRasterAbortLevelFrame to stop constant detected overruns from endlessly pausing the colour scroll
	* Done: ScrollersNoColour.a - WinMerge helps here a lot
	* Done: Scroller_FullScreen in CartCode/Scroll_*.a
	* TODO: BlockColoursForEveryCharacter will work, but the score panel edges are affected by the colour scroll... "Optimise, we don't want to draw a while block strip, however"




* For numerous build configs, consider using something like this to generate screenshots at various cycle counts:
	C:\Downloads\WinVICE-3.1-x86-r34062\WinVICE-3.1-x86-r34062\x64sc.exe -autostartprgmode 1 +autostart-delay-random +VICIIdsize +VICIIdscan -VICIIborders 2 -VICIIfilter 0 +sound -warp -remotemonitor -exitscreenshot c:\temp\t.png -limitcycles 6000000 C:\Work\C64\Scroller\Scroller.crt
	* Something like: DebugFrames.bat
		It could do with parameters for the starting cycle number, number of frames, and input prg/crt
	* Or start in remote monitor mode with: C:\Downloads\WinVICE-3.1-x86-r34062\WinVICE-3.1-x86-r34062\x64sc.exe -autostartprgmode 1 +autostart-delay-random +VICIIdsize +VICIIdscan -VICIIborders 2 -VICIIfilter 0 +sound -warp -remotemonitor
		Then attach to 127.0.0.1 6510
		Use monitor commands:
			attach "c:\work\c64\scroller\scroller.crt" 20
			reset
			break 13e9 (.afterScrollerDemoWaitTopIRQ)
			scrsh "c:\temp\t.png" 2
		* This gives more control and avoids the need to run the emulator a lot of times to get consecutive screen shots
		* See Scroller\features\VerifyByScreenshots.feature




* For Scroller_RunJumpDemo split code out




* Trying to solve the "sprite will pop on if it's within a few pixels of the screen split issue"
	Multiplex_DiscardSpritesYPos needs to be expanded to add Multiplex_DiscardSpritesYPosForSort
	Interestingly Multiplex_DiscardSpritesYPosForSort can be used in Multiplex_Sort and the issue is fixed
	Usage of Multiplex_SetDiscardPosition will need to be updated to include proper SetupIRQs.a calculated discard values and to include Multiplex_SetDiscardSpritesYPosForSort




* Optionally unroll Scroller_ScrollSprites
	Scroller_EnableScrollSpritesSpeedCode = 1



* Added MStackConsistencyCheck_AX


* Added ScrollerDemoMainline_ExitHook



; MPi: TODO: If not IRQOpenBorders then IrqTopOfScreen does not need to be at raster pos 0, it can be moved downwards to just before the first sprites are needed
; MPi: TODO: Perhaps not the best idea since any games that wait for BeforeScrollers/AfterScrollers for their work will want to have as much time above for animation and sprite updates
	> Added optional IrqTopOfScreenPos to be defined by ScrollEntry_*.a



* Added Scroller_CountMusicUpdateInIRQ


* Moved "jsr ScrollerDrawStripTopColour" to the middle of the colour scroll
