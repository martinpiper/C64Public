; Initialise any constant values here
!ifdef mainRoutineZP_start {
mainRoutineZP = mainRoutineZP_start
} else {
mainRoutineZP = $2
}
irqAStore	= mainRoutineZP
irqXStore	= mainRoutineZP+1
irqYStore	= mainRoutineZP+2
nmiAStore	= mainRoutineZP+3
nmiXStore	= mainRoutineZP+4
nmiYStore	= mainRoutineZP+5
mainAStore	= mainRoutineZP+6
mainXStore	= mainRoutineZP+7
mainYStore	= mainRoutineZP+8
tempWork0	= mainRoutineZP+9
tempWork1	= mainRoutineZP+10
tempWork2	= mainRoutineZP+11
tempWork3	= mainRoutineZP+12
tempWork4	= mainRoutineZP+13
tempWork5	= mainRoutineZP+14
tempWork6	= mainRoutineZP+15
tempWork7	= mainRoutineZP+16
tempWork8	= mainRoutineZP+17
tempWork9	= mainRoutineZP+18
tempWork10	= mainRoutineZP+19
tempWork11	= mainRoutineZP+20

scrollerRealMovementXPixels = mainRoutineZP+21
scrollerRealMovementYPixels = mainRoutineZP+22

scrollerDemo_endVars	= mainRoutineZP+23

; Detect kernal mode
!ifdef Scroller_UseKernal {
Scroller_IRQVectorLo = IRQServiceRoutineLo
Scroller_IRQVectorHi = IRQServiceRoutineHi
Scroller_NMIVectorLo = NMIServiceRoutineLo
Scroller_NMIVectorHi = NMIServiceRoutineHi
; Used to adjust IRQs that check their raster, when kernal mode is enabled
Scroller_IRQRasterAdjust=1
Scroller_SpriteDiscardAdjust=0
Scroller_NMITimerAdjust=7
Scroller_Split2Adjust=0
Scroller_Split2Adjust2=0
!ifndef Scroller_IRQExitDefined {
!macro Scroller_IRQExit {
	jmp MinimalIRQServiceRoutine
}
}
!ifndef Scroller_ProcessorPort {
Scroller_ProcessorPort = ProcessorPortKERNALWithIO
}
}


; Detect all RAM mode (default)
!ifndef Scroller_UseKernal {
Scroller_IRQVectorLo = KERNALIRQServiceRoutineLo
Scroller_IRQVectorHi = KERNALIRQServiceRoutineHi
Scroller_NMIVectorLo = KERNALNMIServiceRoutineLo
Scroller_NMIVectorHi = KERNALNMIServiceRoutineHi
Scroller_IRQRasterAdjust=0
Scroller_SpriteDiscardAdjust=0
Scroller_NMITimerAdjust=0
Scroller_Split2Adjust=0
Scroller_Split2Adjust2=0
!ifndef Scroller_IRQExitDefined {
!macro Scroller_IRQExit {
	rti
}
}
!ifndef Scroller_ProcessorPort {
Scroller_ProcessorPort = ProcessorPortAllRAMWithIO
}
}

Multiplex_IRQServiceRoutineLo = Scroller_IRQVectorLo
Multiplex_IRQServiceRoutineHi = Scroller_IRQVectorHi
Multiplex_IRQExitDefined = 1
!macro Multiplex_IRQExit {
	+Scroller_IRQExit
}


!ifdef Scroller_UseKernal {
!ifdef Scroller_EnableSpeedCode {
Scroller_KillCartridgeBank	= 127
Scroller_BankSwitchControl	= $de00
Scroller_ScrollBankEntry	= $8000
ScrollBankSplit				= $a80 + (Scroller_AdditionalCharLinesBankAdjust*6*40)
Scroller_ScrollBankEntryColouriseTop	= $8000
Scroller_ScrollBankEntryColouriseBottom	= $8300
Scroller_ScrollBankEntryColouriseLeft	= $8600
Scroller_ScrollBankEntryColouriseRight	= $8800
}
}
