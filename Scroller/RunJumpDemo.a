; Extra code to be included when Scroller_RunJumpDemo is defined
!zn

!source "SpritePosToScreenPosMem.a"
!source "SpritePosToScreenPosMem2.a"

ZP_SpriteYPosToScreenCharPosLolo	= tempWork6
ZP_SpriteYPosToScreenCharPosLohi	= tempWork7
ZP_SpriteYPosToScreenCharPosHilo	= tempWork8
ZP_SpriteYPosToScreenCharPosHihi	= tempWork9
ZP_SpriteXPosToScreenCharPoslo		= tempWork10
ZP_SpriteXPosToScreenCharPoshi		= tempWork11



!zn
AnimationFrames_MainCharTorsoRight
	!by $a0 , $a1 , $a2 , $a3 , $a4 , $a5 , $a6 , $a7 , $a6 , $a5 , $a4 , $a3 , $a2 , $a1 , 0
AnimationFrames_MainCharLegsRight
	!by $a8 , $a9 , $aa , $ab , $ac , $ad , $ae , $af , $b0 , $b1 , $b2 , $b3 , $b4 , $b5 , 0
AnimationFrames_Bat
	!by $5b , $5c , $5d , $5e , $5f , $60 , 0
AnimationFrames_Explosion
	!by $42 , $43 , $44 , $45 , $46 , $47 , $48 , 0
AnimationFrames_Worm
	!by $49 , $4a , $4b , $4c , $4d , $4e , $4f , $50 , 0

Animation_movePixels !by 0 , -1 , -2 , 1 , 2 , 0 , 0 , -1 , -2 , 1 , 2 , 0 , 0 , -1 , -2 , 1 , 2 , 0
	!by 0 , -1 , -2 , 1 , 2 , 0 , 0 , -1 , -2 , 1 , 2 , 0 , 0 , -1 , -2 , 1 , 2 , 0

Animation_FramesLo
	!by <AnimationFrames_MainCharLegsRight
	!by <AnimationFrames_MainCharTorsoRight
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat+1
	!by <AnimationFrames_Explosion+1
	!by <AnimationFrames_Worm+1
	!by <AnimationFrames_Bat+2
	!by <AnimationFrames_Explosion+2
	!by <AnimationFrames_Worm+2
	!by <AnimationFrames_Bat+3
	!by <AnimationFrames_Explosion+3
	!by <AnimationFrames_Worm+3
	!by <AnimationFrames_Bat+4
	!by <AnimationFrames_Explosion+4
	!by <AnimationFrames_Worm+5
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm
	!by <AnimationFrames_Bat
	!by <AnimationFrames_Explosion
	!by <AnimationFrames_Worm

Animation_FramesHi
	!by >AnimationFrames_MainCharLegsRight
	!by >AnimationFrames_MainCharTorsoRight
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat+1
	!by >AnimationFrames_Explosion+1
	!by >AnimationFrames_Worm+1
	!by >AnimationFrames_Bat+2
	!by >AnimationFrames_Explosion+2
	!by >AnimationFrames_Worm+2
	!by >AnimationFrames_Bat+3
	!by >AnimationFrames_Explosion+3
	!by >AnimationFrames_Worm+3
	!by >AnimationFrames_Bat+4
	!by >AnimationFrames_Explosion+4
	!by >AnimationFrames_Worm+5
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm
	!by >AnimationFrames_Bat
	!by >AnimationFrames_Explosion
	!by >AnimationFrames_Worm

Animation_Speed
	!by 2 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4
	!by 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4

Animation_Counter
	!fill 32 , -1

Animation_Index
	!fill 32 , 0


!source "CharEffects.a"



RunJump_UpdateAnimations
	ldx Multiplex_MaxSpr
	dex
.an1
	dec Animation_Counter,x
	bpl .noFrameReset

	lda Animation_Speed,x
	sta Animation_Counter,x

	lda Animation_FramesLo,x
	sta tempWork0
	lda Animation_FramesHi,x
	sta tempWork1
	ldy Animation_Index,x
	lda (tempWork0),y
	bne .gotFrame
	ldy #0
	sta Animation_Index,x
	lda (tempWork0),y
.gotFrame
	sta AnimationSpriteFrame,x
	iny
	tya
	sta Animation_Index,x

.noFrameReset
	dex
	bpl .an1

	; Process movement for everything else
	ldx Multiplex_MaxSpr
	dex
.an2
	ldy Animation_Index,x
	lda Animation_movePixels,y
	beq .noMoveX
	bmi .negMoveX
	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x
	bcc .noMoveX
	lda #1
	sta AnimationXPosHi,x
	jmp .noMoveX
.negMoveX
	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x
	bcs .noMoveX
	lda #0
	sta AnimationXPosHi,x
.noMoveX

	lda Animation_movePixels+8,y
	clc
	adc AnimationYPos,x
	sta AnimationYPos,x

	dex
	cpx #1
	bne .an2
	rts



!zn
HandleUserInput
	jsr HandleJoystick
	rts

!zn
.toggle !by 0
.playerDeltaY !by 0
.lastPushX !by 2
.lastPushY !by 2
.standing !by 0
.upImpulse !by 0
.jumpIndex !by -1
; This allows the feel and height of the maximum jump with "sub-pixel" accuracy to be precisely defined
.jumpVelocities !by 4 , 4 , 4 , 4 , 4 , 3 , 4 , 3 , 3 , 3 , 3 , 3 , 2 , 3 , 2 , 2 , 3 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 2 , 1 , 1 , 2 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0
.jumpVelocitiesEnd
;.fallingVelocities 1 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , -1

!ifdef Scroller_RunJumpDemo_RunJumpTest {
.automatedJoystickState !by $ff
.automatedIndex !by 0
.automatedTime !by 100
.automatedStates
	!by 150	, JoystickBits_Right
	!by 75 , JoystickBits_Right | JoystickBits_Up
	!by 10 , JoystickBits_Right

	!by 25 , JoystickBits_Left
	!by 75 , JoystickBits_Left | JoystickBits_Up
	!by 25 , JoystickBits_Left

	!by 25	, JoystickBits_Right
	!by 50 , JoystickBits_Right | JoystickBits_Up
	!by 45 , JoystickBits_Right

	!by 25 , JoystickBits_Left
	!by 25 , JoystickBits_Left | JoystickBits_Up
	!by 25 , JoystickBits_Left

	!by 25	, JoystickBits_Right
	!by 50 , JoystickBits_Right | JoystickBits_Up
	!by 45 , JoystickBits_Right

	!by 25 , JoystickBits_Left
	!by 25 , JoystickBits_Left | JoystickBits_Up
	!by 25 , JoystickBits_Left

	!by 0
}

HandleJoystick

!set RunJumpDemo_Joystick = CIA1KeyboardColumnJoystickA
!ifdef Scroller_RunJumpDemo_RunJumpTest {
!set RunJumpDemo_Joystick = .automatedJoystickState

	dec .automatedTime
	bne .aj1
	; Get the new automated joystick state
	ldx .automatedIndex
	lda .automatedStates,x
	bne .aj2
	; 0 time = reset index
	ldx #0
	lda .automatedStates,x
.aj2
	sta .automatedTime
	inx
	lda .automatedStates,x
	ora #JoystickBits_Fire
	eor #$ff
	sta .automatedJoystickState

	inx
	stx .automatedIndex
.aj1
} ;< !ifdef Scroller_RunJumpDemo_RunJumpTest {


	lda #Scroller_RunJumpDemo_timerZero
	ldx #Scroller_RunJumpDemo_timerLen
.cll1
	inc Scroller_RunJumpDemo_timerPos,x
	lda Scroller_RunJumpDemo_timerPos,x
	cmp #Scroller_RunJumpDemo_timerZero+10
	bne .cll2
	lda #Scroller_RunJumpDemo_timerZero
	sta Scroller_RunJumpDemo_timerPos,x
	dex
	bpl .cll1
.cll2


	lda AnimationYPos
	sta .playerDeltaY

	+MSpritePosToCharacterLookup_Setup SpriteXPosToScreenCharPos , SpriteYPosToScreenCharPosLo , SpriteYPosToScreenCharPosHi , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosLohi , ZP_SpriteYPosToScreenCharPosHilo , ZP_SpriteYPosToScreenCharPosHihi , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteXPosToScreenCharPoshi , topScreenScrollX , topScreenScrollY

	; Assume not standing
	lda #0
	sta .standing

	; No need for fall detection when we are moving upwards due to jumping
	ldx .jumpIndex
	bpl .rejectRoutine

	; Falling or standing detection code

	; Assume standing now
	lda #1
	sta .standing

	ldx #0

	+MSpritePosToCharacterLookupPosTweak 0 , -5 , .rejectRoutine , AnimationXPosLo , AnimationXPosHi , AnimationYPos , ScrollerBankVisible , tempWork0 , tempWork1 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	tya
	clc
	adc #40
	tay
	lda (tempWork0),y
	beq .doFall
!ifdef MapSolidCharsLower {
	cmp #MapSolidCharsLower	; The character that is solid
	bcc .rejectRoutine
}
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .rejectRoutine
}
.doFall
	inc AnimationYPos
	inc AnimationYPos
	lda #0
	sta .standing
.rejectRoutine

	lda #JoystickBits_Right
	bit RunJumpDemo_Joystick
	bne .o1
	lda AnimationXPosLo
	clc
	adc #2
	sta AnimationXPosLo
	bcc .o1
	lda #1
	sta AnimationXPosHi
.o1

	lda #JoystickBits_Left
	bit RunJumpDemo_Joystick
	bne .o2
	lda AnimationXPosLo
	sec
	sbc #2
	sta AnimationXPosLo
	bcs .o2
	lda #0
	sta AnimationXPosHi
.o2

	lda #JoystickBits_Down
	bit RunJumpDemo_Joystick
	bne .o3
	inc AnimationYPos
.o3

	lda #JoystickBits_Up
	bit RunJumpDemo_Joystick
	bne .notUp

	lda .upImpulse
	bne .o4

	lda #1
	sta .upImpulse

	; Already jumping?
	lda .jumpIndex
	bpl .o4

	; Not standing?
	lda .standing
	beq .o4
	; Start jumping then
	lda #0
	sta .jumpIndex
	jmp .o4
.notUp
	lda #0
	sta .upImpulse
	; Stop jumping
	lda #-1
	sta .jumpIndex
.o4

	lda #JoystickBits_Fire
	bit RunJumpDemo_Joystick
	bne .o5

	; Fire
	jsr AllocateCharacterEffect
	bcs .o5

.smbx	lda #1
	sta CharEffectsXVel,x
.smby	lda #-1
	sta CharEffectsYVel,x
.smc1	lda #VIC2Colour_White
	sta CharEffectsCol,x
	lda #30
	sta CharEffectsTime,x
.smc2	lda #177
	sta CharEffectsChar,x

	inc .smc1+1
	lda .smc1+1
	and #7
	sta .smc1+1

	inc .smc2+1
	lda .smc2+1
	and #7
	ora #$a8
	sta .smc2+1

	lda AnimationYPos
	sec
	sbc topScreenScrollY
	sbc #20
	tay
	lda CharEffects_SpriteYPosToScreenCharPos,y
	bmi .lnoBulletSpawned
	sta CharEffectsY,x

	lda topScreenScrollX
	lsr
	sta tempWork0

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	sec
	sbc tempWork0
	tay
	lda CharEffects_SpriteXPosToScreenCharPos,y
	bmi .lnoBulletSpawned
	sta CharEffectsX,x

!ifdef Scroller_NoMusic { } else {
	lda #48
	ldx #1
	ldy #2
	jsr MusicPlayerPlaySFX
}

	jmp .o5

.lnoBulletSpawned
	; Just kill it
	lda #-1
	sta CharEffectsY,x
.o5

	inc .smby+1
	lda .smby+1
	cmp #3
	bne .osmby
	lda #-2
	sta .smby+1

	inc .smbx+1
	lda .smbx+1
	cmp #3
	bne .osmbx
	lda #-2
	sta .smbx+1
.osmbx

.osmby



	; TODO: Probably should check the head positions for solid blocks here to stop jumping happening
	ldx .jumpIndex
	bmi .noJumping
	lda AnimationYPos
	sec
	sbc .jumpVelocities,x
	sta AnimationYPos
	inx
	cpx #.jumpVelocitiesEnd-.jumpVelocities
	bne .noJumping
	ldx #-1
.noJumping
	stx .jumpIndex


	; Calculate any delta Y moved by the player
	lda AnimationYPos
	sec
	sbc .playerDeltaY
	sta .playerDeltaY

	; Simple push camera calculations
	lda #0
	sta frameTargetVelX
	sta frameTargetVelY

	lda AnimationYPos
	cmp #151	; Carefully selected to avoid any misaligned scrolling
	bcc .no1
	lda .playerDeltaY
	bmi .endY
	lda #-2
	sta frameTargetVelY
;	lda #-1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no1

	lda AnimationYPos
	cmp #119	; Carefully selected to avoid any misaligned scrolling
	bcs .no2
	lda .playerDeltaY
	beq .no2b
	bpl .no2
.no2b
	lda #2
	sta frameTargetVelY
;	lda #1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no2

.endY

	; Handle the X position now
	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	sta tempWork2

	cmp #128-8
	bcc .no3
	lda #-2
	sta frameTargetVelX
;	lda #-1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushX
	jmp .endX
.no3

	cmp #48+8
	bcs .no4
	lda #2
	sta frameTargetVelX
;	lda #1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushX
	jmp .endX
.no4

.endX

	; When there is no target X velocity, attempt to center the X scroll until it is 4 pixels again
	lda frameTargetVelX
	bne .haveTargetX

	lda topScreenScrollX
	cmp #4
	beq .haveTargetX

	ldx .lastPushX
	stx frameTargetVelX
.haveTargetX



	; When there is no target Y velocity, attempt to center the Y scroll until it is 4 pixels again
	lda frameTargetVelY
	bne .haveTargetY

	lda topScreenScrollY
	cmp #4
	beq .haveTargetY

	ldx .lastPushY
	stx frameTargetVelY
.haveTargetY

	lda AnimationYPos
	sec
	sbc #VIC2SpriteSizeY
	sta AnimationYPos+1
	lda AnimationXPosLo
	sta AnimationXPosLo+1
	lda AnimationXPosHi
	sta AnimationXPosHi+1


	jsr ScrollerCheckMapRangeAndVelocity

	!source "CheckForBadScrolls.a"

	!source "ClampScrollVelocity.a"
	rts



!zn
Scroller_RunJumpDemo_timerPos = SCREENRAM + ((22+Scroller_AdditionalCharLines) * VIC2ScreenCharsWidth) + 2
Scroller_RunJumpDemo_timerLen = 9
Scroller_RunJumpDemo_timerZero = 7
RunJump_InitTimer
	lda #Scroller_RunJumpDemo_timerZero
	ldx #Scroller_RunJumpDemo_timerLen
.cll1
	sta Scroller_RunJumpDemo_timerPos,x
	dex
	bpl .cll1
	rts
