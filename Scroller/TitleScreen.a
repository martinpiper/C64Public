; The memory map for this title screen displays graphics data in bank 0
; $0400-$07ff - Screen
; $0800-$0fff - Char data
; $1000-$bfff - Code and data
; $c000-$ffff - Unused by the title screen and contains graphics data for the game.
!zn
MessageScrollX !by 0
DisplayTitleScreen
	+ClearScreenAt_AX COLOURRAM , VIC2Colour_Black

	; Just to make sure we disable interrupts.
	; This title screen code can use the multiplexor and animation engine if it wants to
	sei
	; Stop any NMI from its timers. NMIs generated by other sources are ignored by the NMI routine.
	lda #$7f
	sta CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl
	sta CIA2TimerBControl
	; Ack any interrupts that might have happened
	lda CIA2InterruptControl

	jsr TitleScreenWaitForOffScreenFromRaster
	; Turn off the screen and sprites
	lda #0
!ifdef Scroller_DisplayTitleScreen {
	sta TitleScreen_Enable_ScrollerDemoWait_Hooks
}
	sta VIC2ScreenControlV
	sta VIC2SpriteEnable
	sta VIC2BorderColour
	sta VIC2ScreenColour
!ifdef Multiplex_LogCollisions {
!ifdef Multiplexor_UpdateCollisionDetailsSoftEnable {
	sta Multiplexor_UpdateCollisionDetailsSoftEnableFlag
}
}
	; Init music
!ifdef Scroller_NoMusic {} else {
	lda #0
	jsr MusicPlayerInit
}
	
!ifdef Scroller_LOTD {
	lda #<ScrollText
	sta smMessageReadPos+1
	lda #>ScrollText
	sta smMessageReadPos+2
}
	lda #%1000
	sta VIC2ScreenControlH
	lda #%11
	sta CIA2PortASerialBusVICBank

	; Copy the SEUCK title screen data to the relevant places in VIC bank 0
	ldx #0
.l1
	lda TitleScreenCharData,x
	eor #$ff
	sta $0800,x
	lda TitleScreenCharData+$100,x
	eor #$ff
	sta $0900,x
!ifdef TitleScreen_AnimatingSprites {
	lda TitleScreenBallSprites,x
	sta $0a00,x
	lda TitleScreenBallSprites+$100,x
	sta $0b00,x
}
	lda #$20
	sta SCREENRAM,x
	sta SCREENRAM + $100,x
	sta SCREENRAM + $200,x
	sta SCREENRAM + $2e8,x
	dex
	bne .l1

.l2
	lda TitleScreenChars,x
	jsr .convertChar
	sta SCREENRAM + (6*40),x
	lda TitleScreenChars+$100,x
	jsr .convertChar
	sta SCREENRAM + $100 + (6*40),x
	lda TitleScreenChars+$108,x
	jsr .convertChar
	sta SCREENRAM + $108 + (6*40),x
	lda #VIC2Colour_Black
	sta COLOURRAM,x
	sta COLOURRAM + $100,x
	sta COLOURRAM + $200,x
	sta COLOURRAM + $2e8,x
	dex
	bne .l2

	; Display the data just copied.
	lda #%00011011
	sta VIC2ScreenControlV

	lda #%00010010
	sta VIC2MemorySetup

	; Initialise the multiplexor, animation engine and IRQs for the title screen code to use if it wants to
	; MPi: TODO: Init sprite multicolour mode and extended colours here
	lda #7
	jsr Multiplex_SetSpritePointer
	lda #Multiplex_items
	sta Multiplex_MaxSpr
	jsr Multiplex_InitSort
	jsr AnimationInit
	jsr AnimationClearMultiplexor
	lda #$ff
	sta VIC2SpriteMulticolour
	lda #VIC2Colour_White
	sta VIC2ExtraSpriteColour1
	lda #VIC2Colour_DarkGrey
	sta VIC2ExtraSpriteColour2

	ldx #Multiplex_items-1
.fl1
	txa
;	lda #VIC2Colour_Grey
	sta Multiplex_Colour,x
	lda #0
	sta Multiplex_XPosHi,x
	lda #$28	; Some sprite frame for now
	sta Multiplex_SpriteFrame,x
	lda Multiplex_YPos,x
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,x
}
	dex
	bpl .fl1

	jsr Multiplex_Sort
!ifdef Multiplex_SplitSort {
	jsr CopyMultiplexTables
}

	jsr SetupIRQsForTitleScreen
	; Now the loop which displays the title screen
.l3
!ifdef Scroller_LOTD {
	; MPi: TODO: Turn this into an IRQ split
	jsr TitleScreenWaitForMessageRaster
!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}
}

	jsr ScrollerDemoWaitScorePanel
!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}
!ifdef Scroller_NoMusic {} else {
	jsr MusicPlayerPlay
.skipMusicThisFrame
}
!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}

!ifdef Scroller_LOTD {
	lda #8
	sta VIC2ScreenControlH
}

!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}

!ifdef Scroller_LOTD {
	jsr ScrollMessageUpdate
}

!ifdef Scroller_DebugMainlineBorder {
	lda #0
	sta VIC2BorderColour
}
!ifdef TitleScreen_AnimatingSprites {
	lda #VIC2Colour_Red
	sta VIC2ScreenColour
} else {
	; Use the raster tale colour type to calculate the index into the colour table
	lda RasterColourTableType
	sec
	sbc #$10
	asl
	asl
	asl
	clc
	adc #<RasterColourTable
	sta tempWork0

	lda #>RasterColourTable
	adc #0		; And carry any remaining from the above add
	sta tempWork1

	; Update the table scroll counter every four frames
.sm1	ldy #0
.sm2	lda #0
	bne .noUpdate
	inc .sm1+1
	lda .sm1+1
	and #7
	sta .sm1+1
	lda #3
	sta .sm2+1
.noUpdate
	dec .sm2+1
	; Wait for the top of the character data to start the raster effect
	ldx #50+(6*8)
.l5
	lda RasterColourTableType
	cmp #$10
	; If we are not doing a raster effect then just use the colour
	bcc .l6
	lda (tempWork0),y
.l6
	cpx VIC2Raster
	bne .l6
	sta VIC2ScreenColour
	inx
	inx
!ifdef Scroller_LOTD {
	dey
} else {
	iny
}
	tya
	and #7
	tay
	cpx #50+(20*8)
	bne .l5
}

.titleJoystickTest
	; Wait for fire
	lda #%10000
	bit CIA1KeyboardColumnJoystickA
	beq .joystick0start
	bit CIA1KeyboardRowsJoystickB
	beq .joystick1start

	jmp .l3

.joystick0start
!ifdef Scroller_DisplayTitleScreen {
	lda #1
	sta TitleScreen_Enable_ScrollerDemoWait_Hooks
}

	lda #0
	sta TitleScreenJoystickStarted
	rts

.joystick1start
!ifdef Scroller_DisplayTitleScreen {
	lda #1
	sta TitleScreen_Enable_ScrollerDemoWait_Hooks
}

	lda #1
	sta TitleScreenJoystickStarted
	rts

; Converts a character to display it on the screen
.convertChar
	and #$3f
	cmp #$30
	bcc .ret
	clc
	adc #6
.ret
	rts

!ifdef TitleScreen_AnimatingSprites {
TitleScreen_SpriteAnimateCount !by 0
TitleScreen_SpriteAnimateCount2 !by 8
}

!zn
.spriteOffset0 = 32+32+32
.spriteOffset1 = 128
.spriteOffset2 = 128+32

; Spread evenly
.spriteSpread = 16
;.spriteSpread = 20
;.spritePerStroke = 12
;.spritePerStroke = 10
;.spritePerStroke = 8
.spritePerStroke = Multiplex_items / 2

; Very tight packing
;.spriteSpread = 8
;.spritePerStroke = 12
.xposTweak = 24

!if Multiplex_items < (.spritePerStroke * 2) {
!error "Not enough Multiplex_items for title screen sprite animation .spritePerStroke"
}

.upDownTab !by 0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0
TitleScreenAnimationHook
!ifdef TitleScreen_AnimatingSprites {
	inc TitleScreen_SpriteAnimateCount

	ldy TitleScreen_SpriteAnimateCount
	ldx #0
.l1
	; If something is already animating in this slot then continue with the animation
	lda Multiplex_YPos,x
	cmp #$ff
	bne .alreadyOn1
	; Otherwise calculate if the sprite is really small before allowing the animaton to start
	tya
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .upDownTab,y
	cmp #7
	bne .skipIt1
	pla
	tay
.alreadyOn1
	lda TitleScreen_SinTab,y
	sta Multiplex_YPos,x
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,x
}
	tya
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .upDownTab,y
	clc
	adc #$28
	sta Multiplex_SpriteFrame,x
.skipIt1
	pla
	clc
	adc #.spriteSpread
	tay
	inx
	cpx #.spritePerStroke
	bne .l1

	lda TitleScreen_SpriteAnimateCount
	clc
	adc #.spriteOffset0
	tay
	ldx #0
.l2
	lda TitleScreen_SinTab,y
	clc
	adc #.xposTweak
	sta Multiplex_XPosLo,x
	tya
	clc
	adc #.spriteSpread
	tay
	inx
	cpx #.spritePerStroke
	bne .l2

!if 1 {
	inc TitleScreen_SpriteAnimateCount2

	lda TitleScreen_SpriteAnimateCount2
	clc
	adc #.spriteOffset1
	tay
	ldx #0
.l3
	; If something is already animating in this slot then continue with the animation
	lda Multiplex_YPos+.spritePerStroke,x
	cmp #$ff
	bne .alreadyOn2
	; Otherwise calculate if the sprite is really small before allowing the animaton to start
	tya
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .upDownTab,y
	cmp #7
	bne .skipIt2
	pla
	tay
.alreadyOn2
	lda TitleScreen_SinTab,y
	sta Multiplex_YPos+.spritePerStroke,x
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort+.spritePerStroke,x
}
	tya
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .upDownTab,y
	clc
	adc #$28
	sta Multiplex_SpriteFrame+.spritePerStroke,x
.skipIt2
	pla
	clc
	adc #.spriteSpread
	tay
	inx
	cpx #.spritePerStroke
	bne .l3

	lda TitleScreen_SpriteAnimateCount2
	clc
	adc #.spriteOffset2
	tay
	ldx #0
.l4
	lda TitleScreen_SinTab,y
	clc
	adc #.xposTweak
	sta Multiplex_XPosLo+.spritePerStroke,x
	tya
	clc
	adc #.spriteSpread
	tay
	inx
	cpx #.spritePerStroke
	bne .l4
}

} else {
	; Initialise the sprite registers to something simple
	lda #0
;	lda #50	; Display the sprite on the screen
	sta Multiplex_YPos
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort
}
	; Move it
	lda Multiplex_XPosLo
	clc
	adc #10
	sta Multiplex_XPosLo
	sta Multiplex_Colour
	lda #0
	sta Multiplex_XPosHi
}
	; After this function returns the mutiplexor will sort the sprites and display them
	rts

TitleScreenJoystickStarted !by 0

!ifdef Scroller_LOTD {
TitleScreenWaitForMessageRaster
	lda #$e8
.rl1
	cmp VIC2Raster
	bne .rl1
	; Stop the random wobbling 8 pixel mess from appearing by setting the screen to be black
	; temporarily.
	lda VIC2ScreenColour
	ldy #0
	sty VIC2ScreenColour
	ldy MessageScrollX
	sty VIC2ScreenControlH
	sta VIC2ScreenColour
	rts
}

!zn
; This should be used with the IRQs disabled to stop any IRQ from using that screen raster time.
; For example:
; Wait for the raster so that turning off the screen is done with a clean effect rather than
; producing a couple of lines of rubbish data.
TitleScreenWaitForOffScreenFromRaster
	lda #$ff
.l2
	cmp VIC2Raster
	bne .l2	
	rts

;---------------------------------------------------
;Title screen scroll text (We should change the font
;for this.
;--------------------------------------------------
!ifdef Scroller_LOTD {
ScrollMessageUpdate
	lda MessageScrollX
	sec 
	sbc #$01
	and #$07
	sta MessageScrollX
	bcs .retScroll
	ldx #$00
.copytext
	lda SCREENRAM+(23*40)+1,x
	sta SCREENRAM+(23*40),x
	inx
	cpx #40
	bne .copytext
smMessageReadPos lda ScrollText
	cmp #$00
	bne .storeChar
	lda #<ScrollText
	sta smMessageReadPos+1
	lda #>ScrollText
	sta smMessageReadPos+2
	jmp smMessageReadPos
.storeChar
	sta SCREENRAM+(23*40)+39
	inc smMessageReadPos+1
	bne .retScroll
	inc smMessageReadPos+2
.retScroll
	rts
}


;Add a scrolling message to the titlescreen

!ifdef Scroller_LOTD {

ScrollText	

!scr "=== welcome to legion of the damned brought to you by"
!scr " anthony burns= with enhancements by martin piper "
!scr "and richard bayliss === music by richard ba"
!scr "yliss === "
!scr "the formerly peaceful village of hameria has been"
!scr " taken over by a horde of evil vampiresses= demons= and"
!scr " their undead minions= led by queen stryxia === in a"
!scr " last ditch attempt to free themselves= the opress"
!scr "ed people hire mercenary fighters === either the s"
!scr "word wielding amazon with her whirlwind spells or"
!scr " the axe throwing barbarian with his meteor spell"
!scr "s or both fighters === they can replenish their he"
!scr "alth and magic powers with blue potions === the "
!scr "more potions they hold at once= which could be up "
!scr "to three the more powerful their magic will be ===  "
!scr "joystick port 7 controls the barbarian also to "
!scr "use the meteor spells press the k key === joystick"
!scr " port z controls the amazon also to use the whi"
!scr "rlwind spells press the s key  === all spells work l"
!scr "ike a smart bomb which will kill all enemies on s"
!scr "creen === press fire to play and enjoy this epic sideways seuck adventure ===                 "
!scr "                                          @"
}


!ifdef TitleScreen_AnimatingSprites {
TitleScreen_SinTab
 !by $8d,$8f,$92,$94,$96,$98,$9a,$9c,$9f,$a1,$a3,$a5,$a7,$a9,$ab,$ad
 !by $af,$b1,$b3,$b5,$b7,$b9,$bb,$bc,$be,$c0,$c2,$c3,$c5,$c7,$c8,$ca
 !by $cb,$cd,$ce,$d0,$d1,$d2,$d4,$d5,$d6,$d7,$d8,$d9,$da,$db,$dc,$dd
 !by $de,$df,$e0,$e0,$e1,$e1,$e2,$e2,$e3,$e3,$e3,$e4,$e4,$e4,$e4,$e4
 !by $e4,$e4,$e4,$e4,$e3,$e3,$e3,$e2,$e2,$e1,$e1,$e0,$e0,$df,$de,$dd
 !by $dc,$db,$da,$d9,$d8,$d7,$d6,$d5,$d4,$d2,$d1,$d0,$ce,$cd,$cb,$ca
 !by $c8,$c7,$c5,$c3,$c2,$c0,$be,$bc,$bb,$b9,$b7,$b5,$b3,$b1,$af,$ad
 !by $ab,$a9,$a7,$a5,$a3,$a1,$9f,$9c,$9a,$98,$96,$94,$92,$8f,$8d,$8b
 !by $89,$87,$84,$82,$80,$7e,$7c,$7a,$77,$75,$73,$71,$6f,$6d,$6b,$69
 !by $67,$65,$63,$61,$5f,$5d,$5b,$5a,$58,$56,$54,$53,$51,$4f,$4e,$4c
 !by $4b,$49,$48,$46,$45,$44,$42,$41,$40,$3f,$3e,$3d,$3c,$3b,$3a,$39
 !by $38,$37,$36,$36,$35,$35,$34,$34,$33,$33,$33,$32,$32,$32,$32,$32
 !by $32,$32,$32,$32,$33,$33,$33,$34,$34,$35,$35,$36,$36,$37,$38,$39
 !by $3a,$3b,$3c,$3d,$3e,$3f,$40,$41,$42,$44,$45,$46,$48,$49,$4b,$4c
 !by $4e,$4f,$51,$53,$54,$56,$58,$5a,$5b,$5d,$5f,$61,$63,$65,$67,$69
 !by $6b,$6d,$6f,$71,$73,$75,$77,$7a,$7c,$7e,$80,$82,$84,$87,$89,$8b
}
