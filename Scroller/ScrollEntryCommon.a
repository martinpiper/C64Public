!source "ScrollEntryCommonVars.a"
!source "ScrollerMacros.a"
!source "stdlib/LongBranches.a"

!ifdef Scroller_EnableSamples {
NMISampleCodeStart = Multiplex_endVars
}

!ifndef Scroller_DisableScreenDataUsage {
; This defines the screen data as being used, so that the assembler won't allow other blocks to use it without warning
*=$c800
ScreenData
; Also include the fingerprint in the first screen
!source "FingerPrint.a"
	!fill (ScreenData + $800) - * , 0
}

; This code is post-build linked with a decompression stage so we don't use any BASIC sys start code here.
; Instead the start for the code is $400 which is quickly overwritten by other data once the
; real game code starts.
*=$400
ScrollerInitSpecificCode_Start = *
!ifdef Scroller_EarlyStartHook_Enable {
	jsr Scroller_EarlyStartHook
}
	; Setup a nice stable blank screen and known machine state
!ifdef Scroller_NoInitialiseMachine {} else {
	lda #Scroller_ProcessorPort
	jsr InitialiseMachine
}
	; Setup NMI because the initialise points to code that gets overwritten
	lda #<ScrollerNMI1
	sta Scroller_NMIVectorLo
	lda #>ScrollerNMI1
	sta Scroller_NMIVectorHi
	lda #0
	sta VIC2SpritePriority
	sta VIC2SpriteMulticolour

!ifdef Global_SpriteExpandX {
	lda #$ff
}
	sta VIC2SpriteDoubleWidth
!ifdef Global_SpriteExpandY {
	lda #$ff
} else {
	lda #0
}
	sta VIC2SpriteDoubleHeight

	; One time initialisation like moving memory around to the correct places and pre-calculation.
	jsr ScrollerDemoInitOneTimeData
	jmp ScrollEntry
	; This initialise code is here because we only use it once. Later the code is written
	; by the title screen display code.
!source "../stdlib/Initialise.a"
!source "OneTime.a"
!source "FingerPrint.a"
ScrollerInitSpecificCode_End = *
ScrollerInitSpecificCode_Size = * - ScrollerInitSpecificCode_Start
	; The start of the real code. Memory from $400 to $fff is written by the title screen display code

Bank0PanelBlankSpriteData = $680
Bank0ScorePanelChars = $800
!ifdef Scroller_UseDemoScorePanelStaticMemory {
*=Bank0PanelBlankSpriteData
!fill VIC2MemorySetup_SpriteSize , 0
*=Bank0ScorePanelChars
!ifdef Scroller_UseDemoScorePanel {
!bin "ScorePanel.ctm" , VIC2MemorySetup_CharsSize , $14	; Include the maximum data if possible. Some characters are not usable due to being used for the other two screen sprite pointers however.
} else {
!fill VIC2MemorySetup_CharsSize , 0
}
}

*=$1000
ScrollerSpecificCode_Start = *
!zn
ScrollEntry
	; The following can be called more than once if needed for a proper game type cycle
.l1
	+MStackConsistencyCheck_AX
!ifdef Scroller_DecompressTitleScreenCodeHook {
	jsr DecompressTitleScreenCode
}
!ifdef Scroller_DisplayTitleScreen {
	jsr DisplayTitleScreen
}

!ifdef Scroller_DecompressGameCodeHook {
	jsr DecompressGameCode
}
	jsr InitialiseGame

	jsr SetupIRQs
!ifdef Scroller_EnableSamples {
	jsr NMISamples_Init
	lda #CartFile1_Bank_smp_raw_fragment0
	jsr CartSelectBank_8K_NoSEI
	; Time the sample code to avoid bad lines
	; Wait for this one first
	+MACROWaitForRaster 230-32
	; Then finally this one
	+MACROWaitForRaster 238-32
	+DelayFor 7	; Enough delay to cause the sample NMI to start on the start of the scan line
;	jsr NMISamples_StartTimerWithoutBufferFill
	+MWordValueTo_AX CartFile1_Start_smp_raw_fragment0
	ldy #CartFile1_Bank_smp_raw_fragment0
	jsr NMISamples_StartSample
.t
;	inc $d020
	jsr NMISampleBufferProcess
;	jmp .t

	jsr CartKillBank
}
	jsr ScrollerDemoWaitTopIRQWithReSync
	jsr ScrollerDemoMainline
!ifdef ScrollerDemoMainline_ExitHook {
	jsr ScrollerDemoMainline_Exit
}
	jmp .l1

!ifdef Scroller_DisplayTitleScreen {
TitleScreen_Enable_ScrollerDemoWait_Hooks !by 1
}

!source "SetupIRQs.a"
!source "ScrollMain.a"
; The multiplexor uses the MultiplexExt_LastIRQ label defined in "SetupIRQs.a"
!source "../SpriteMultiplexor/SpriteMultiplexor.a"

!ifdef Scroller_EnableSamples {
!source "Footy/asm/NMISamplesCompressedStreamedBuffered.a"
!source "Footy/asm/NMISamplesStreamedCommon.a"
}

!ifdef Scroller_EnableSpeedCode {
!ifndef Scroller_MultiDirection {
!error "Scroller_EnableSpeedCode without Scroller_MultiDirection is not implemented"
}
CartSelectBank_ProcessorPort	= ProcessorPortDefault
CartKillBank_ProcessorPort		= Scroller_ProcessorPort
!source "../MakeCart/asm/EasyFlash_Code.a"
;!source "../MakeCart/asm/GMod2_Code.a"
!source "CatchUndefCartFiles.a"
}

ScrollerSpecificCode_End = *
ScrollerSpecificCode_Size = * - ScrollerSpecificCode_Start
