!ifdef TestingExtraCompression {
Decompress_RNZip = 1
RNXPCompressionDecompress_LowZP = 1
}

!macro RNXPCompressionDecompressDelta_WriteByte {
	sta (RNXPCompressionDecompressDelta_WriteByteAddr),y
	iny
	bne .ni1
	inc+1 RNXPCompressionDecompressDelta_WriteByteAddr+1
.ni1
}

!macro RNXPCompressionDecompressDelta_IncGetByte {
	inc+1 RNXPCompressionDecompressDelta_GetByteAddr
	bne .ni1
	inc+1 RNXPCompressionDecompressDelta_GetByteAddr+1
.ni1
}

!macro RNXPCompressionDecompressDelta_GetByte {
	+RNXPCompressionDecompressDelta_IncGetByte
	lda (RNXPCompressionDecompressDelta_GetByteAddr,x)
}


RNXPCompressionDecompressDeltaRLE_InitStore
	stx+1 RNXPCompressionDecompressDelta_WriteByteAddr
	sty+1 RNXPCompressionDecompressDelta_WriteByteAddr+1
	rts

RNXPCompressionDecompressDeltaRLECodeStart
!pseudopc $80 {
RNXPCompressionDecompressDeltaRLECodeStartReal
RNXPCompressionDecompressDeltaRLE
	stx+1 RNXPCompressionDecompressDelta_GetByteAddr
	sty+1 RNXPCompressionDecompressDelta_GetByteAddr+1

	lda+1 RNXPCompressionDecompressDelta_GetByteAddr
	bne .nzp1
	dec+1 RNXPCompressionDecompressDelta_GetByteAddr+1
.nzp1
	dec+1 RNXPCompressionDecompressDelta_GetByteAddr

	ldy #0
	ldx #0
	+RNXPCompressionDecompressDelta_GetByte
	sta+1 .smopcode1+1
	+RNXPCompressionDecompressDelta_GetByte
	sta+1 .smopcode2+1
	bne .notSpecialEscape
	lda+1 .smopcode1+1
	bne .notSpecialEscape
	; Optimisation for a completely empty delta frame by using two 0 bytes instead of something like: 8F B1 B6 8F 00
	rts
.notSpecialEscape
	+RNXPCompressionDecompressDelta_GetByte
	sta+1 .smopcode3+1

.rle1
	+RNXPCompressionDecompressDelta_IncGetByte
RNXPCompressionDecompressDelta_GetByteAddr  = *+1
	lda $1234
	bpl .notOpcode
	; MPi: TODO: Instead of doing a cmp/beq test the delta data could use the same trick as the music player and use a negative opcode as the direct jump address for the code to run.
	; This could either be calculated by a preprocess stage of 6502 code or the save routines can save out data that will get linked with the right values.
.smopcode1	cmp #0
	beq .opcode1
.smopcode2	cmp #0
	beq .opcode2
.smopcode3	cmp #0
	beq .opcode3
.notOpcode
RNXPCompressionDecompressDelta_WriteByteAddr = *+1
	sta $4321,y
	iny
	bne .rle1
	inc+1 RNXPCompressionDecompressDelta_WriteByteAddr+1
	jmp .rle1

.RLERet
	rts

.opcode1
	+RNXPCompressionDecompressDelta_GetByte
;	cmp #0
	beq .RLERet
	sta+1 .smc1+1
	+RNXPCompressionDecompressDelta_GetByte
.smc1	ldx #00
.rle2
	+RNXPCompressionDecompressDelta_WriteByte
	dex
	bne .rle2
	jmp .rle1

.opcode2
	+RNXPCompressionDecompressDelta_GetByte
;	cmp #0
	beq .rle3
	clc	; MPi: TODO: Potential for reversing the above comparison to get a free CLC
	adc+1 RNXPCompressionDecompressDelta_WriteByteAddr
	sta+1 RNXPCompressionDecompressDelta_WriteByteAddr
	bcc .rle1
	inc+1 RNXPCompressionDecompressDelta_WriteByteAddr+1
	jmp .rle1
.rle3
	lda+1 .smopcode2+1
	+RNXPCompressionDecompressDelta_WriteByte
	jmp .rle1

.opcode3
	+RNXPCompressionDecompressDelta_GetByte
	; MPi: TODO: Instead of doing a cmp #$ff there is scope for the delta compression to add the hi address directly to the data, then if the hi address is zero that is a better flag check to output the single opcode byte.
	; It would also remove the need to ora #$e0
	cmp #$ff
	beq .rle4
	+DeltaDecompression_AddressTweak
	sta .smRLECopy+2
	+RNXPCompressionDecompressDelta_GetByte
	sta .smRLECopy+1
	+RNXPCompressionDecompressDelta_GetByte
	sta .smRLEC1+1
	ldx #0
.rle5
.smRLECopy	lda $1234,x
	+RNXPCompressionDecompressDelta_WriteByte
	inx
.smRLEC1	cpx #0
	bne .rle5
	ldx #0
	jmp .rle1
.rle4
	lda+1 .smopcode3+1
	+RNXPCompressionDecompressDelta_WriteByte
	jmp .rle1
}
RNXPCompressionDecompressDeltaRLECodeEnd

!ifndef DeltaDecompression_JustDecompressionCode {

DeltaDecompression_Displaying !by 0 , 0	; lo/hi
DeltaDecompression_End	!by 0

!ifdef UseCartBanks {
DeltaDecompression_ResetFrame
	lda #0
	sta DeltaDecompression_ZP_DeltaFrameLoHi
!ifdef TestingExtraCompression {
	sta DeltaDecompression_ZP_DeltaFrameCompressed
}
	lda #>C64Cartridge_Lo_8K
	sta DeltaDecompression_ZP_DeltaFrameLoHi+1
	lda #StartCartBank
	sta .sm3+1
	rts

!ifdef WantDeltaDecompression_ResetFrameEx {
DeltaDecompression_ResetFrameEx
	sta DeltaDecompression_ZP_DeltaFrameLoHi
!ifdef TestingExtraCompression {
	lda #0
	sta DeltaDecompression_ZP_DeltaFrameCompressed
}
	stx DeltaDecompression_ZP_DeltaFrameLoHi+1
	sty .sm3+1
	rts
}


DeltaDecompression_GetBank
.sm3	lda #0
	rts
}

DeltaDecompression_ResetFrameCount
	lda #0
	sta DeltaDecompression_Displaying
	sta DeltaDecompression_Displaying+1
	rts

DeltaDecompression_AdvanceFrameCount
	inc DeltaDecompression_Displaying
	bne .ofc1
	inc DeltaDecompression_Displaying+1
.ofc1
	rts

DeltaDecompression_UnpackFrame

!ifdef UseCartBanks {
	lda .sm3+1
	bne .notSequenceEnd
!ifdef NoLoopAnimation {
	rts
}
	jsr DeltaDecompression_ResetFrame
	lda .sm3+1

.notSequenceEnd
	sta CART_SELECT_BANK

	jsr DeltaDecompression_AdvanceFrameAddr
!ifdef TestingExtraCompression {
;	inc $d020
;	+WaitForFire_A

	; Ensures the hi byte is in cartridge RAM regardless of any compression flag
	; "first delta must not be compressed" references in MakeCart
	lda DeltaDecompression_ZP_DeltaFrameCompressed
	bpl .notCompressed

;	inc $d020
;	+WaitForFire_A

	txa
	pha
	tya
	pha
	ldx #<CompressedDataTemp
	ldy #>CompressedDataTemp
	jsr RNXPCompressionDecompress_InitStore
	pla
	tay
	pla
	tax
	jsr RNXPCompressionDecompress

;	inc $d020
;	+WaitForFire_A

	ldx #<CompressedDataTemp
	ldy #>CompressedDataTemp
.notCompressed
}
	jmp RNXPCompressionDecompressDeltaRLE



DeltaDecompression_AdvanceFrameAddr
	ldy #0
	lda (DeltaDecompression_ZP_DeltaFrameLoHi),y
	sta .sm3+1
	bne .notSequenceEnd2
!ifdef NoLoopAnimation {
	inc DeltaDecompression_End
}
.notSequenceEnd2
	iny
	lda (DeltaDecompression_ZP_DeltaFrameLoHi),y
	pha
	iny
	lda (DeltaDecompression_ZP_DeltaFrameLoHi),y
!ifdef TestingExtraCompression {
	; Current frame compression flag
	sta DeltaDecompression_ZP_DeltaFrameCompressed
}
	pha
	
	lda DeltaDecompression_ZP_DeltaFrameLoHi
	clc
	adc #3
	tax
	lda DeltaDecompression_ZP_DeltaFrameLoHi+1
	adc #0
	tay

	pla
	; Adjust the compressed data address to take into account any compressed flag
	ora #>C64Cartridge_Lo_8K
	sta DeltaDecompression_ZP_DeltaFrameLoHi+1
	pla
	sta DeltaDecompression_ZP_DeltaFrameLoHi

	rts

} else {
	ldx DeltaDecompression_Displaying
	lda .framesLo,x
	ldy .framesHi,x
	tax
	jmp RNXPCompressionDecompressDeltaRLE
}


} ;< !ifndef DeltaDecompression_JustDecompressionCode {


!ifdef TestingExtraCompression {
CompressedDataTemp = $7800
!macro RNXPCompressionIncBorder_A {
}
!macro RNXPCompressionDecompress_WriteByteAddrHi {
}

RNXPCompressionDecompress_WriteByteAddr = $400
RNXPCompressionDecompress_GetByteAddr = $401


DecompressionVars_CodeStart
!pseudopc $60 {
DecompressionVars_CodeStartReal
!source "../Decompression/DecompressionVars.a"
!if * > $80 {
	!error "code too big"
}
}
DecompressionVars_CodeEnd

!source "../Decompression/Decompression.a"
!source "../Decompression/DecompressionP2.a"
}

!zn {
DeltaDecompression_InitZP
!ifdef TestingExtraCompression {
	; Update zeropage with our zeropage RLE and RNZip address code
	ldx #DecompressionVars_CodeEnd - DecompressionVars_CodeStart
.cz2
	lda DecompressionVars_CodeStart-1,x
	sta DecompressionVars_CodeStartReal-1,x
	dex
	bne .cz2
}

	ldx #RNXPCompressionDecompressDeltaRLECodeEnd-RNXPCompressionDecompressDeltaRLECodeStart
.cz1
	lda RNXPCompressionDecompressDeltaRLECodeStart-1,x
	sta+2 RNXPCompressionDecompressDeltaRLECodeStartReal-1,x
	dex
	bne .cz1


	rts
}
