Gather information regarding TAP file format. Then look for kernal pulses and data structures.
*I already know the structure of my turbo tape data.


Do some quick tests to read kernal and then turbo format data from TAP files.


Do some more quick tests to write kernal data first, with the tape header data and single data block.


Quickly test writing my format tape turbo data.


Separate C64Tape class into a separate file.


Refator the class member names to use standard naming.


Change the command line arguments so that the end address/offset is exclusive, not inclusive.


Add an ACME label parser so that the IsNum and ParamToNum functions can reference a label.
For example anything starting with a '.' can be a label.


Add an option to save with a tiny header to 'otft'.


Instead of magic numbers being passed to TapeWriteByte use the values read from a map file for:
	TapePilotCode1
	TapePilotCode2
	TapeSyncCode
	TapeHeaderByteEx
	TapeHeaderByteEx2
	TapeHeaderByteEx3
*Of course the entries will need to be set before any map file load attempt so if they don't exist sensible values can be used.


Create some higher level command line arguments for the common operations
*Especially the operation to write a kernal file using data in the tape buffer and a single kernal data block.


*********************
** 1.0.0.1
** Released to Richard Bayliss for testing.


Fixed TapeLoaderCIA.a when not using the tiny header so that it works with non-checksum block files by ignoring the expected number of blocks and the header checksum byte.


Add explicit warnings/errors if there are any areas that need explicit padding in the boot loaders.
Enforce padding by NOP codes.


Split TapeLoaderCIAMartyLoad.a from TapeLoaderCIA.a, added comments.
Tidied and commented the tape header codes and speed defines check in Loaders.a


Improved the kernal format reading code to cope with more TAP files.


*********************
** 1.0.0.2
** Released to http://noname.c64.org/csdb/release/?id=111494

Fixed some of the command line handling.

Added MACROSetTurboTimer and removed duplicate code.

Added more code documentation.


Add the option of including something like my code from:
http://www.lemon64.com/forum/viewtopic.php?p=469197#469197
The aim being to be able to start a BASIC program normally.
The code at .restoreStateStart will start any generic BASIC program.
Included HelloWorldBasic.prg which demonstratesa BASIC program starting from the turbo loader.



*ZPStartBasicLo/ZPStartBasicHi and ZPStartVariableLo/ZPStartVariableHi are initialised properly when loading blocks in any order.
In .restoreStateStart the stores to ZPStartBasicLo/Hi are not needed. They can be set by the following logic:
When starting to load a new file set the ZPStartBasicHi to 255.
For every loaded block start that is <= ZPStartBasicHi then set both locations. Otherwise don't store them.
This will get the lowest start address for the file.
Similar logic needs to be done for the end address in case the last loaded block is not the highest loaded block.


*Added JMPQuickStartAddress and JMPStartAddress for the _config.a file
Add a configurable JMP execution address when the load finishes. Use the _config.a file.
A simple label will suffice and it can just JMP to it. This calls some but not all of the tidy-up code before JMPing to it.
Add another label option that won't call any tidy-up code before JMPing to it.


*Interleaving data on the tape using the 's' parameter. Added a new ReadMe.txt section for this feature.
Add option to interleave data files on the TAP file. This is possible in block mode because a file block has its own filename so blocks from different files can be interleaved.
This can be accomplished by building internal streams of tape data and giving each stream a priority, so the higher priority streams are written first.
Each stream would be a kernal file, or a whole (non blocked) turbo file or blocks from a turbo file, or any other section of tape data output.

*********************
** 1.0.0.3
** Released to http://noname.c64.org/csdb/



Decompress while loading.
Only in TapeTool otfb mode
Each block of compressed data will have to be fully read before decompression is allowed to happen.
This is because each block will need to pass the checksum test before being used for decompression.
TapeTool can be updated to save compressed 256 byte blocks, using the RLE compression found in Compression\main.cpp TestRLEPack()
The header byte can be used to signify if it's compressed or not. If it's not compressed then just write plain data. If it's compressed then store to a temporary buffer.
If the block does not compress well then store the uncompressed version as before.
After the checksum for the block passes it can flag to the mainline that a block is ready, or optionally just do the decompression in the IRQ.
If the mainline does the decompression then it must rapidly and regularly check for the data and process it quickly.
The Decompression:RNXPCompressionDecompressRLE code could be reused, but it is not very optimal and could be vastly improved with abs,x/y addressing assuming no more than 256 bytes are decompressed
ScrollerMusicLoader.a can be used to test, as the music code is not initially compressed it will benefit from quicker compressed block loading.
	Make sure IgnoreSecondLoader is not set in _config.a
The place where TapeHeaderByteEx2 is checked for in TapeLoaderCIAIRQ.a and mTapeHeaderByteEx2 written in TapeTool\C64Tape.cpp for "if ( checksumBlocks )" will need tweaks
	Perhaps the filename bit 7 would be a better test?
	Or perhaps that would be too limiting, just have another header byte for compressed would better from a future expansion point of view?
	Make .doingHeaderCheckEx2 optional code with a compressed blocks option defined in _config.a
* Done:EnableBlockCompression* Add conditional code define to enable all the extra support for TapeHeaderByteEx2RLE into _config.a (Like EnableBlockChecksum)
cd /d C:\Work\C64\IRQTape\TapeTool
..\..\acme.exe --lib  ../ --lib ../../  -v4 --msvc _config.a  Loaders.a && Debug\TapeTool.exe m "Loaders.map" wn "test.tap" ocb1 Loaders.bin otl$c0 otft "Loaders.bin" .RealCodeStart .RealCodeEnd otl$c0 otfbr "Loaders.bin" 0 .SpriteDataStart .SpriteDataEnd $200 otl$c0 otfbr "..\R.MUS8000.PRG" 1 otl$c0 otfbr "..\TestMultiplexor.prg" 2 otl$c0 c && copy /y Loaders.lbl test.lbl && C:\VICE\x64.exe test.tap
..\..\acme.exe --lib  ../ --lib ../../  -v4 --msvc _config.a  Loaders.a && Debug\TapeTool.exe m "Loaders.map" wn "test.tap" ocb1 Loaders.bin otl$c0 otft "Loaders.bin" .RealCodeStart .RealCodeEnd otl$c0 otfbr "Loaders.bin" 0 .SpriteDataStart .SpriteDataEnd $200 otl$c0 otfbr "..\R.MUS8000.PRG" 1 otl$c0 otfbr "..\TestMultiplexor.prg" 2 otl$c0 c && copy /y Loaders.lbl test.lbl && C:\Downloads\WinVICE-3.1-x86-r34062\WinVICE-3.1-x86-r34062\x64sc.exe -remotemonitor test.tap
* First pass with the above command line, using otfbr, and BlockCompressionCheck_AfterBlock works
* However the RLE decompress start at the first "jsr RNXPCompressionDecompress_GetByte" could do with being executed in the mainline finish loading detection loop instead.
* This is because the raster split and open border routine do flicker due to the decompress being in the IRQ, which is to be expected.
* Without RLE = 32 tape blocks
* With RLE = 24 tape blocks
* Done: savedBytes -= 8: Could do with a slightly wider threshold check for "savedBytes", adjust the savedBytes down by a few to take into account the WriteTurboLeader(8) when compressed blocks are being used
	This slightly longer leader (lead out actually) is to allow time for the decompression to complete between blocks, since there is only one block for the temporary buffer
* TapeLoaderCompressedBufferFull_Handle seems to be taking more than a frame sometimes



*********************
** 1.0.0.6
** Released to http://noname.c64.org/csdb/



* Split the decompression over two frames to avoid jerky scrolling message problems.

* Compressed block status indicator to the left of the tape counter enabled with TapeLoaderCompressed_screenIndicator



*********************
** 1.0.0.7

* Some error message improvements when files cannot be found
* Added loading bitmap display example code




* If there is a load error whilst the loading screen is displayed then the text cannot be seen. To fix this, perhaps rapidly changing the border colour would be a visual aid.
	The loading will already continue if the tape is rewond and the block is tried again.



Add the option to write files backwards or with random block placement or with some other ordering. Might be nice for loading screens. :)
* After writing colour screen data. 
	Write bitmap chunks randomly.


*********************
** 1.0.0.8

* Instead of: !source "_config.a"	; Generated by TapeTool to define various values
	Add "_config.a" as a parameter in the bat files before "Loaders.a" (and in any documenation)
	Then the config can use a local config at any path instead of expecting one in the same directory.
	This will make it easier to use the tool.




*Instead of saving $ea31 into $314 to make it escape the block loader earlier, instead save $ea2f
	https://codebase64.org/doku.php?id=base:autoboot_tape_turbo_loader
This executes one extra instruction from the normal tape loader which should be $f92c
This means the IRQ executes $ea2f, which executes an illegal opcode NOOP $60,X (SKB #$60)
*Using $ea2c isn't really viable, it does kind of work but it goes through a nasty sequence of the BRK vector being hit by a mistaken RTS inside the IRQ.
*There is another option, save $022c. This will cause the loader at $f92c to be used until the second $02 byte is read. Then always have the start code at $022c, like a JMP.
	Note: ; Effectively at $0314
	Inspect $033c (tape buffer) when filename is displayed
	Usual IRQ vector during data load (after header) $f92c
	$f875 is common tape read/write code
	$fb41 is the usual data store
	$f8c1 is the compare for the $02a0 and $0315 values, which if equal goes to $f8dc which is the end of the "handle stop key" routine
		$f8dc clears $02a0 and then returns from $f875
	Use this in the monitor to trap most auto-start loaders: bk 100 a000
	Do a bit of research of other commerical tapes, see what they use...
	* "C:\CCS64\TAPES\DELTA.TAP"
		Black screen for a bit then border effects
		Buffer: Type $03 load $029f (EZPFlagTempIRQDuringTapeIOLoHi) to $0300
			$0351 into $029f load completes and restores this custom vector
		Code: $0351 via $ff58 jmp ($0314)
	* "C:\CCS64\TAPES\LASTNINJ.TAP"
		Cyberload
		Buffer: Type $03 load $029f to $033b
			$02a6 into $029f load completes and restores this custom vector
		Code: $02a6 via $ff58 jmp ($0314)
	* "C:\CCS64\TAPES\Operation Wolf.tap"
		Ocean loader? Flashy bars quite early on...
		Buffer: Type $03 load $02a7 to $0334
			$02a7 into $0302 load writes $ea31 into $0314
		Code: $02a7 via $a480 jmp ($0302)
		** Note: It's the same method as mine
			This confirms the existence of a second "verify" data block: c:\work\C64\bin\TapeTool.exe r "C:\CCS64\TAPES\Operation Wolf.tap" bc1000
			Which explains the extra colour bars before the turbo data kicks in.
			Note how mine does not have a second "verify" data block: c:\work\C64\bin\TapeTool.exe r c:\work\c64\IRQTape\TapeTool\test.tap bc1000
	** Decided to keep the current method given the fact that "Operation Wolf.tap" Ocean loader does the same.
	* c:\work\C64\bin\TapeTool.exe r "C:\CCS64\TAPES\Morpheus.tap" bc1000
		$03 $a7 $02 $34 $03
		Loads $ea31 into $0314
		Load $02a7 into $0302
		Entry: $02a7

		

* Possible to add some expert code that detects possible auto-boot tape methods based on the discovery work for "Do a bit of research of other commerical tapes, see what they use..."
	Example output:
		Opened 'test.tap' for reading.
		The code will attempt to load to address $0302
		This load will early out due to IRQ hi address match. ($ea)
		Will probably attempt to auto-start vector $0302 code at $0304



* **Unknown tape header type** is displayed because ProcessTapeHeader(RAMC64) is called  more than once which tries to process the overwritten tape buffer.
	Instead the returned values need a backup...



* Original Tusari.TAP had a missing EOD for the second tape header... Which still loads on the C64.
	TODO: The missing EOD might also be OK for the second data block... Needs investigation.



* Should be possible to loop through all files and only write problematic TAP paths to a file list by detecting "gmail.com" in the output
	UnitTest_FullRead.bat



* Problems:
	Sometimes a tape just contains turbo data, or doesn't contain jernal data, so there cannot be any auto-boot code
	Also detect loading into BASIC memory, precisely detect loading >= 0x0400
	* E:\Ultimate tape archive\Ultimate_Tape_Archive_V3.0\Ultimate_Tape_Archive_V3.0\Dancing_Monster_(1983_Commodore)_[1686]\Dancing_Monster.tap
		Stack $0202 slide!!!



* Problems:
	E:\Ultimate tape archive\Ultimate_Tape_Archive_V3.0\Ultimate_Tape_Archive_V3.0\Punchy_(1983_Mr._Micro)_[92]\Punchy.tap
		Interesting, overwrites $328 with $f6e1 which disables the stop key...
		Seems to start code at: E144   6C 14 00   JMP ($0014)
		Via SYS command at $e12a?
		Loaded vector $332/$333 is different, $fd22
			Which gets read by: FB72   B1 AC      LDA ($AC),Y
			Which seems to execute a run after a decent number of blocks are loaded...?!




* Debug: "C:\Users\Martin Piper\Downloads\ForMartin\ForMartin\Bogymen.tap"
	The first data block (after tape header) seems to always read $89 $88 $87 $86 $85 $84 $83 *rare parity error* $82 ** $c1 ** $fe $c1 $fe $4a
	Why $c1? Check what the C64 says...
		* $fa55 is the "store received byte from tape" routine
			FA55   85 BD      STA $BD
		C64 reads 51 89 88 87 86 85 84 83 82 7d?!! c1 fe c1 fe 4a
		* This reads and process header bytes, but only once?!
			FA9C   A5 BD      LDA $BD
			It seems the logic for detecting the header only detects the first $89 value then counts the bytes?!
			This seems to happen because the first $89 value is then processed by:
				FAA5   29 0F      AND #$0F
				FAA7   85 AA      STA $AA
				FAA9   C6 AA      DEC $AA
			Use: w aa
			Shows that this is triggered:
				FA70   A9 0F      LDA #$0F
				FA72   24 AA      BIT $AA
				Which then goes back to: FAA9   C6 AA      DEC $AA
				To count bytes in the header, not validate them
				This indicates a "standard" kernal header could be shorter than the "$89 $88 $87 $86 $85 $84 $83 $82 $81" observed in most tapes. Interesting.
				** Proven: Checked by creating a tape like this... TapeTool\Kernal short headers check.txt
			** Fix to get the 7d reading, like the C64 does, but the next c1 isn't read: if ( ( p1 == kLong ) || ( p2 == kLong ) ) then start to read the bits again without resetting parity
			** Better fix, ignore the EOD and advance the file data header check for both bit errors
		* This processes read file data and stores it
			FB3F   A5 BD      LDA $BD
