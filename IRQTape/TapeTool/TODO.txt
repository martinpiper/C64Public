TapeTool TODO file started 12 September 2012
A tool to provide a command line interface that enables C64 format TAP files to be created with kernal and turbo data.
********************************************

// TODO: Test for inverted start/end (negative length)



* Need to support the short kernal header variant: TapeTool\Kernal short headers check.txt
	Note the header lengths also don't need to match



// TODO: When reading data check the data length is not more than the end (length)



// TODO: Validate checksum in header and data



* Add some more _config.a options that enable/disable various chunks of code (like the scrolling message, bitmap loading etc)
	This makes the loader smaller




* Add support for faster RNZip option
	So as well as writing the file with "otfbr" for RLE compression, it could use an extra RNZip option ("otf[b][z]" for example?) to gain even more compression




* Explain how poke193,0:poke194,4:poke174,0:poke175,7:sys63562 works and how $F867 can be used to write similar blocks.
	It directly calls the kernal tape loader that loads a block of data, even the tape header is a block of data and can be loaded to different addresses.


Explain the label values used from the map file for ocb1, otft, otf, otfb



1/2/3 Paralax scrolling raster bars while loading, with the normal tape loading colour effects behind.
Could use an IRQ counter as the raster bar position index which is slightly desynced from the screen refresh time to produce a scrolling effect.
Or could update 64ish bytes table all the time in the background with effects and use the current timer anded with 64 and indexed into the table.
Try to keep the mainline clear so music can still be played and scrollers added.
The tape loading itself would really have to be NMI based.




Detect TinyHeader not being set and display a warning if "otft" is used on the command line asking if they are sure they want to use a tiny header file.


In the scroller loader add some extra prints to show what file it has found and what file it is loading.


When the "Extended header checksum check" is OK then add code that will:
Display the human readable information like filename byte and load/end address, expected number of blocks.
Also read the block bytes and then when the required number of bytes has been read it will go back to searching for the next header block.


Make it possible so that anyone without coding knowledge can produce tape turbo loaders.
Change the loading scheme, scroll text, loader picture, sprite(s).
Add more loader styles with various animations.
These options come from the command line.


Fix comment: Disable the short pulse calibration code for now, it doesn't work on all tapes.
Study the kernal logic and replicate it.


Add options to include special gaps that disrupt the ability of tape-to-tape audio copying.



*Add the option to assemble the Loader.a with input parameters for the type of turbo to use. It can modify the _config.a file.
	Or create a new temp config file and include that...
	This would provide a simple command line wrapper which expands into the more complex command line internally.




Create some private functions to do the common operations.
Like writing a leadin or leadout.
