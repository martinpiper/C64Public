; This tape loader just uses the CIA without any IRQ being active. It is designed to fit into a
; small space at the bottom of memory in zero page.
; In a zone so that all this block of code which is actually split into three chunks gets treated as one block
!zn {

TapeLoaderStoringToLo					= $06
TapeLoaderStoringToHi					= $07
.checksum								= $08
.loadColPos								= $09
startBlock
; The code entry point.
; Must not end beyond $0301 in real terms
; Constants for zp variables
; This loader is actually quite short and it uses some extra space in the tape header, so it can start at around $2c7 instead of $2a7.
; This shortens the amount of data loaded after the tape header.
; If the pseudopc is moved back to $2a7 then the startBlock and FreeBlock1 calculations below will need to be changed to account for the extra space.
;!pseudopc $02a7 {
!pseudopc $02c7 {
TapeRelocatedStart

	ldx #(.ScreenTextEnd - .ScreenText)-1
.sl1
	lda #VIC2Colour_White
	sta COLOURRAM+(10*40) + 13,x
	lda #VIC2Colour_LightGrey
	sta COLOURRAM+(23*40) + 20 - ((.ScreenTextEnd - .ScreenText)/2),x
	lda .ScreenText,x
	sta SCREENRAM+(23*40) + 20 - ((.ScreenTextEnd - .ScreenText)/2),x

	dex
	bpl .sl1
	; Grab everything on the stack earlier
	txs

	+MACROSetTurboTimerMiddle -$11

	; Because the kernal loader has been interrupted we have to switch on the screen :)
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV

	bne .startBlock2Real
}
endBlock
; Just to introduce a warning if the above code oversteps its boundary
;*=startBlock + $5b
*=startBlock + $3b
;FreeBlock1 = $5b - (endBlock - startBlock)
FreeBlock1 = $3b - (endBlock - startBlock)

; Now we are effectively at $0302
; Set the vector "BASIC Input Line and Decode" so that it gets saved and when our routine loads it gets called when the load finishes.
; We set this vector because the BASIC LOAD command (also shift-runstop) starts at $e168.
; After the load this function will e1b2 jmp $a52a which then does a530 jmp $a480 which then follows on to do a480 jmp ($302)
!by <MainLoaderEntry , >MainLoaderEntry

startBlock2
; Must not end beyond $0313 in real terms
!pseudopc $0304 {
.startBlock2Real
	; Display the filename from the tape buffer in white in the top left of the screen
	ldx #TapeHeaderFilenameLen
.f1
	lda TapeHeaderFilenameStart,x
	and #$3f
	sta SCREENRAM+(10*40) + 20 - (TapeHeaderFilenameLen/2),x
	dex
	bpl .f1

	bmi .TapeHeaderCode
}
endBlock2
; Just to introduce a warning if the above code oversteps its boundary
*=startBlock2 + $10
FreeBlock2 = $10 - (endBlock2 - startBlock2)

; Effectively at $0314
!by <DefaultIRQServiceRoutine , >DefaultIRQServiceRoutine

TapeTurboEndOfExtendedZeroPageCodeAndIRQ

tapeHeader
; Must not end beyond $03fb in real terms
!pseudopc $0351 {

.TapeHeaderCode
	; First loop until we get a valid tape sync code
.l1
	jsr WaitForTapeEdge
	rol
	cmp #TapeSyncCode
	bne .l1

	; Much shorter version because it assumes the load address and end address
	; No file name byte check. :)

	; Then check the next byte is actually from the header
	jsr GetTapeByte
	cmp #TapeHeaderByteEx3
	bne .l1

.l2
	jsr GetTapeByte
.sm1
	sta MainSecondLoaderStart
	eor .checksum
	sta .checksum

	inc .sm1+1
	bne .l3
	inc .sm1+2
	inc VIC2BorderColour
.l3
	; Now check for the end of the file being reached
	lda .sm1+1
	cmp #< (MainSecondLoaderStart + (RealCodeEnd - RealCodeStart))
	bne .l2
	lda .sm1+2
	cmp #> (MainSecondLoaderStart + (RealCodeEnd - RealCodeStart))
	bne .l2

	; End reached, check the checksum byte
	jsr GetTapeByte
	cmp .checksum
	bne .displayLoadError

	; Call the loaded code
	jmp MainSecondLoaderStart

	; Display an error border effect
.displayLoadError
	inc VIC2BorderColour
	jmp .displayLoadError

.ScreenText
	!scr "novaishload 1234567"
.ScreenTextEnd

!source "TapeLoaderCIACommon.a"

MainLoaderEntry
	; Demonstrate some code that uses the timer but doesn't use an IRQ to read bytes.
	; Instead IRQs are turned off and a tight loop is used to read bytes from the tape.
	; Here we know the ROM calls us so we can assume the ROMs and IO are enabled.
	sei
	jsr CLRSCR

	+MACROCIAIRQControlDisable_A

	; Turns on cassette motor and removes ROMs
	lda #%101
	sta ZPProcessorPort
	lda #ProcessorPortDDRDefault
	sta ZPProcessorPortDDR

	; Clear CIA timers and VIC to a known state
	lda #VIC2Colour_DarkGrey
	sta VIC2ScreenColour
	lda #0
	sta .checksum
	sta VIC2InteruptControl
	sta CIA1TimerAControl
	sta CIA1TimerBControl
	sta CIA2TimerAControl
	sta CIA2TimerBControl

	jmp TapeRelocatedStart
}
endTapeHeader
; Just to introduce a warning if the above code oversteps its boundary
*=tapeHeader + $ab
FreeBlockHeader = $ab - (endTapeHeader - tapeHeader)
}
