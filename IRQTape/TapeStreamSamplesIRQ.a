; This demonstrates using the CIA timer to stream samples from tape
!source "../stdlib/stdlib.a"
!source "../stdlib/PETSCII.a"
!to "TapeStreamSamples.prg", cbm
!sal
!sl "TapeStreamSamples.map"
!svl "TapeStreamSamples.lbl"
!cpu 6510
!ct pet
!initmem $ea

; The short IRQ allows a shorter offset
kStartCycleOffset = 48
; This allows the pulse lengths to be differentiated
kPerVolumeCycles = 16

; Calculate the final /2 timer value
kMainTimerValue = ((kPerVolumeCycles*16) + kStartCycleOffset - 16)/2

Initialise_NoIRQServiceRoutine = 1

* = $400
	; Turns on cassette motor and removes ROMs
	lda #ProcessorPortAllRAMWithIO & %111
	jsr InitialiseMachine

	; The base timer value
	; The best way to calibrate the tweak value is to fill the TAP file with the shortest allowed pulse length and verift that "ldx CIA1TimerALo" returns a consistent value near $ff and never near $00
	; Also remove the mainline nop fill below to cause longer instructions to delay and wobble the IRQ slightly.
	; Test that a consistent value can be read for pulse lengths of the minimum, then the next volume pulse length.
	; For exampl,e test with TAP byte 07 then 09 for pulse length volume 0 and then 1. Both values should read consistently.
	; This timing reliably causes $fb-$ff to be read for repeating shortest pulses in the TAP file (kStartCycleOffset / 8)
	; Count every other cycle
	+MWordValueToAddress_A 1 , CIA1TimerALo
	; With underflow testing
	+MWordValueToAddress_A kMainTimerValue , CIA1TimerBLo
	lda #%10001
	sta CIA1TimerAControl		; Start timer, it automatically repeats
	lda #%01011001
	sta CIA1TimerBControl		; Start timer, count timer A underflows

	+MWordValueToAddress_A .irq , KERNALIRQServiceRoutineLo
	; Enable IRQ on positive edge on FLAG pin from tape
	lda #%10010000
	sta CIA1InterruptControl
	+MACROAckAllIRQs_A

	cli

	; Mainline
.l1
	; Sometimes update the border colour, which can affect cycle accuracy of the IRQ
	lda SIDVolumeFilter
	sta VIC2BorderColour

	; Otherwise mostly allow 2 cycle accuracy for most of the IRQ
!for .i , 256 {
	nop
}
	jmp .l1


!scr "WangFM Tape streaming sample encoding by Martin Piper https://github.com/martinpiper/C64Public/blob/master/IRQTape/TapeStreamSamplesIRQ.a"

!source "../stdlib/Initialise.a"

!align 255,0
	; With this IRQ, the smallest TAP file byte that reliably allows "some" mainline processing is $07, which is 56 cycles
.irq
	sta $fb
	stx $fc

	; Just ACK and assume the IRQ is the tape flag input pin
	lda CIA1InterruptControl

	; X to be used to convert the timer into a usable volume
	ldx CIA1TimerBLo

	lda #%01011001
	sta CIA1TimerBControl		; Start timer again, one shot mode.

	lda .timerToSample,x
	sta SIDVolumeFilter

	ldx $fc
	lda $fb
	rti


!align 255,0
; The timer is counting down...
.timerToSample
	!fill kPerVolumeCycles /2 , 15
	!fill kPerVolumeCycles /2 , 14
	!fill kPerVolumeCycles /2 , 13
	!fill kPerVolumeCycles /2 , 12
	!fill kPerVolumeCycles /2 , 11
	!fill kPerVolumeCycles /2 , 10
	!fill kPerVolumeCycles /2 , 9
	!fill kPerVolumeCycles /2 , 8
	!fill kPerVolumeCycles /2 , 7
	!fill kPerVolumeCycles /2 , 6
	!fill kPerVolumeCycles /2 , 5
	!fill kPerVolumeCycles /2 , 4
	!fill kPerVolumeCycles /2 , 3
	!fill kPerVolumeCycles /2 , 2
	!fill kPerVolumeCycles /2 , 1
; Ideally, the shortest pulse time will reliably read this sample.
	!fill kPerVolumeCycles /2 , 0
!fill (kMainTimerValue-1) - (*-.timerToSample) , 0
; Underflow space wrap-around, when the timer underflows it reads its start value
!if (*-.timerToSample) >= kMainTimerValue {
	!error "The uderflow table space, when the timer and underflowed, must wrap around to here"
}
	!fill 256 - (* - .timerToSample) , 15
