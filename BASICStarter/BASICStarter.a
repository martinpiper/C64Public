; BASICStarter
; This is designed to start BASIC code after many horrible things have been done to zero page or the interupts.
; In essence it completely restores the machine to a known state before starting the loaded BASIC code.

; This example code is compressed by LZMPi.exe which decompresses the data and start the code at $400
; The BASIC code is already located at $801, the machine zeropage state is initialised, then the BASIC warm start is called to start the real code.

!source "../stdlib/stdlib.a"
!to "BASICStarter.prg", cbm
!sl "BASICStarter.map"
!svl "BASICStarter.lbl"
!cpu 6510
!ct pet

*=$400
start
	sei
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	lda #ProcessorPortDefault
	sta ZPProcessorPort

	; Initaliase IO devices
	jsr IOINIT

	; Replaces RAMTAS
	+M_RAMTAS

	; This is needed because the BASIC init will kill the screen
	ldx #.casBufEnd - .casBufStart
.l2
	lda .casBufCode-1,x
	sta .casBufStart-1,x
	dex
	bne .l2
	jmp .casBufStart

.casBufCode
!pseudopc $33c {
.casBufStart
	; Restore IO
	jsr RESTOR
	; IO init, screen on
	jsr CINT

	; Start BASIC
	; Reset IO
	jsr CLRCHN

	; Current input device file number
	lda #$00
	sta ZPFileNumberCurrentInputDevice

	; Initialise vectors
	jsr KERNALInitZPVectors

	; Backup the first couple of bytes of our BASIC code
	lda TheBASICStart
	sta .casBufStart
	lda TheBASICStart+1
	sta .casBufStart+1

	; Init BASIC memory, finds bottom and top of memory
	jsr KERNALBASICInit

	; Prints BASIC startup messages, which also does a NEW
	jsr KERNALBASICStartupMessages

	; This is optional
!if 1 {
	; Display "READY." from a474
	lda #$76   ; low a376
	ldy #$a3   ; hi a376
	jsr BASICTextPrint
}

	; Setup the BASIC code start and end pointers, pretends that we just loaded the data
	ldx #<TheBASICStart
	ldy #>TheBASICStart
	stx ZPStartBasicLo
	sty ZPStartBasicHi
	ldx #<TheBASICEnd
	ldy #>TheBASICEnd
	stx ZPStartVariableLo
	sty ZPStartVariableHi

	; Restore the first couple of bytes of our BASIC code, defeating the previous NEW
	lda .casBufStart
	sta TheBASICStart
	lda .casBufStart+1
	sta TheBASICStart+1

	; The tail end of the NEW command, which also does a CLR and initialises the BASIC code start pointers to the start of the loaded program and resets the stack pointer
	jsr BASICTailNEWCLRInitStack
	; Starts the BASIC code and doesn't return, executes the next statement
	jmp BASICExecuteNextStatement
.casBufEnd
}

!if .casBufEnd > ZPExTapeIOBufferEnd {
!error "Too much code in the tape buffer"
}

!source "../stdlib/Initialise.a"

*=$801
TheBASICStart
	!bin "BASIC.P00",,$1c
TheBASICEnd
	; For safety add a few extra zeros
	!by 0,0,0,0
