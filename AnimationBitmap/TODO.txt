// NOTE: ConvDelta2.bat needs these values set correctly for the number of rames used:
	set START=0
	set STEP=1
	set END=99

// cls && Conv.bat && ConvDelta.bat && cls && ConvPrint.bat
// cls && Conv.bat && ConvDelta.bat && BuildIt.bat && cls && ConvPrint.bat
// cls && ConvDeltaOpt.bat && cls && ConvPrint.bat
// cls && Conv.bat && ConvDeltaHMSequence.bat
// cls && Conv2.bat && ConvDelta2.bat && BuildIt2.bat
// cls && Conv2_11.bat && ConvDelta2_11.bat && BuildIt2_11.bat


* Using REU http://www.zimmers.net/anonftp/pub/cbm/documents/chipdata/programming.reu
	Try to use the REU to accelerate the copying
	But EasyFlash cannot be used due to its registers at $df00 conflicting with the REU registers, will need to use gmod2
	Alternatively, just write out the REU RAM file directly so it contains all the needed frame data
	To get the best benefit of compression DeltaCompression.exe should be altered to:
		Store most of the new data in REU memory, the whole file effectively becomes the dictionary, where it can be copied into the C64 memory quickly later on
		Separate frame data for:
			Skip code
			Block copy from C64 to REU temporary and back to another C64 area (this is if the frame data is not present in REU frame data)
			Block copy from REU to C64
	REU for MDeltaDecompression_CopyColours



* MashSamples
	Could it use u-law instead for better quality?
		import librosa
		import numpy
		y, sr = librosa.load(filename, samplerate, True) #load file
		numpy.clip(y, -1, 1, y) #Clip samples
		norm = librosa.mu_compress(y, mu=15, quantize=True) #mu-compress and quantize to 16 different values
		norm = norm + 8 #offset the samples values
		bin8 = numpy.uint8(norm) #convert to 8-bit unsigned



* Dragon's Lair - Needs a better way to read the video and audio start lo/hi/bank information
	An indexed table of animation chunks would do
	This would replace all the references to address/bank in GameState_null and all GameState_* sections


* Video could be made smaller, leaving more time for samples and the colour RAM update
	Done



* Dragon's Lair colour update could do with only copying the smaller section of screen updated, not the whole screen



* Perhaps the image quality for Dragon's Lair can be improved by telling ffmpeg/mogrify to use the target C64 palette first?
	https://imagemagick.org/script/mogrify.php



* Document DeltaCompression.exe options. Especially those like "-fragment $c00 Data\frm*05d.sno" and how it iteracts with "-fragment f$d00 Data\Dictionary1.bin"



* Note TestingExtraCompression from the extra compression pass in MakeCart
	* It works, but it is slower and doesn't maintain 15 fps
	* For now it's disabled
		BuildIt2.bat outputs...
		AnimationBitmap.crt
		AnimationBitmapCompressed.crt
		totalbyteSize=317780
		totalbyteSize=200712
		for the compressed data size (edited) 
		so it's about 30% smaller extra compressed
		but notice how the extra compression is slower
		Still just about usable though
	* Done - !source "../Decompression/DecompressionVars.a" could be moved into ZP?
	* Done - Trim the 2 bytes of the LZMPi output file in MakeCart
		totalbyteSize=196555



* .notSpecialEscape could actually be one 0, not two 0 since the first 0 is impossible as an escape due to the bmi/bpl being used



* Try to vertically center the outro video without killing memory



* Try various compression options for CharPack on a per frame basis
	This means the DeltaCompression tool will drive conversion of input BMPs via CharPack and cycle through the various options.
	For example try combinations of:
		* -forceordering -reducebitmapchange t.scr t.col




* Or create a decision point list, and iterate over the decision points until the more optimal dictionary choice is used?




* I really need to put a frame counter display in there that shows the time and number of frames displayed when it loops at the end :smile:
	and then calculate the average FPS



* Add an option to become increasingly lossy for compression...
