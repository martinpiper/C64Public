* !swizzle could be used by the object data structure definition code?




* Would be potentially possible by doing a sheer of vertical strips. Plotting to a bigger buffer and then drawing the section.
	Optimised speed code for the screen data copy?
	Colour lookup could use the screen index.
	It would mean the main draw would always render to a fixed address screen, that is slightly larger, it does not need to be position independant code.
	This would have optimisation benefits, especially for speed code plotting.
	The larger buffer to real screen buffer draw can then be optimised for rotation around a defined point, this can be all speed code with easy colour table lookup.
		TrackDraw_colours would need changing significantly
	Several angles can be included as speed code to fill cartridge banks. The real screen draw and its colour plot can be draw order optimised from top to bottom to chase the raster.





* To avoid jagged road edges when steering left/right, especially when seeing the far hill/valley, a track width/offset + edge calculation can calculate a minmimum clamp value
	This is used for each subsequent line until a larger value is calculated
	The last value to then be added in a separate pas would be any corner offset
	Observed when:
		Debug_ForceTrackStateRender
		skd = 31
		Debug_ForceTrackStateRender=$ec
	Actually the problem is due to a combination of the linear left/right offset and the non-linear width changing as a function of distance and the hill/valley table.
	The fix is to have a linear width table, not change depending on the hill/valley. This will make the code simpler as well.



	* Instead if we wanted to have several width tables to adjust the road width as we drive along then add another table, like the road side objects table, that has a width tweak.
	This would basically be a lookup into an adjusted multiplier lookup table



* Figure out why Multiplex_SortStore isn't working correctly, in a way that doesn't break all the other multiplexor code use



	
* Make the colourise asm files generic and pickup RoadsideObjectColourLookup dynamically, or set RoadsideObjectColourLookup in a global include





* The top screen IRQ and the last multiplexor IRQ need to set the correct flags so the next multiplexor copy can be triggered earlier
	The flag also needs to be reset in the mainline to avoid a potential early trigger




* With corners, or steering, the road side objects seem to be using positions that appear to be inside the road at some extremes?
	Check the hot spots
	* Add some form of roadside tweak, that basically adds extra offset as a fraction of the road width or perspective?
	* The hotspot offset seems to be always using sbc? Is this accounted for in the data?
		lda xbtl
		sec
		sbc xhot




* Could do with a tool to edit the in-memory road tables whilst Vice renders the roads





* TODO: Supporting raised roads, like bridges or ramps, the horizon index can be separated from the plot culling functionality.




* In addition to the left/right roadside objects, can also have an above road list as well.




* Fork in the road, left and right choice, can be done by rendering up to a limit of the middle section that advances towards the screen like the roadside objects
