; This demonstrates using the VIC to generate an IRQ and the CIA to generate an NMI.
; Press space for the NMI timer to be started by the IRQ so generating a stable NMI at a certain point on the screen.
; Useful for screen splits using an NMI if there are likely to be many IRQs bouncing around the screen.
!source "../stdlib/stdlib.a"
!to "RasterTest.prg", cbm
!sl "RasterTest.map"
!svl "RasterTest.lbl"
!cpu 6510
!ct pet

; C:\VICE\x64.exe
; RasterTest.prg

; This starts at $0801 so that doing a LOAD"*",8 will still work with the default $0801 BASIC start address.
*= BASICSTART
!byte $0c,$08,$0a,$00,$9e		; Line 10 SYS
!convtab pet
!tx "2304"						; Address for sys start in text
!byte $00,$00,$00,$00
!byte $00,$00,$00,$00			; And a few more zeros for the sake of paranoia and safety.

scorePanel1Pos = 205	; The place to start the split, 9 lines above scorePanel2Pos.
scorePanel2Pos = 214	; The line above where we want to display the real panel. Just enough time to set H and V pos

mainRoutineZP = $2
irqAStore = mainRoutineZP
irqXStore = mainRoutineZP+1
irqYStore = mainRoutineZP+2
nmiAStore = mainRoutineZP+3
nmiXStore = mainRoutineZP+4
nmiYStore = mainRoutineZP+5

*=$0900
!zn
	sei
	cld
	lda #%100101
	sta ZPProcessorPort
	lda #%101111
	sta ZPProcessorPortDDR
	; Clear all CIA to known state
	lda #$7f
	sta CIA1InterruptControl
	sta CIA2InterruptControl
	lda #0
	sta CIA1TimerAControl
	sta CIA1TimerBControl
	sta CIA2TimerAControl
	sta CIA2TimerBControl
	; Ack any interrupts that have happened
	lda #1
	sta VIC2InteruptStatus

	; Setup raster IRQ
	lda #<IrqTopOfScreen
	sta KERNALIRQServiceRoutineLo
	lda #>IrqTopOfScreen
	sta KERNALIRQServiceRoutineHi
	lda #1
	sta VIC2InteruptControl
	lda #$0
	sta VIC2Raster
	lda #$1b
	sta VIC2ScreenControlV

	; Setup NMI
	lda #<nmi1
	sta KERNALNMIServiceRoutineLo
	lda #>nmi1
	sta KERNALNMIServiceRoutineHi
	; Turn on NMI generated by timer B
	lda #$81
	sta CIA2InterruptControl

	ldx #0
.cpc1
	lda Chars,x
	sta $c000,x
	lda Chars+$100,x
	sta $c000+$100,x
	lda Chars+$200,x
	sta $c000+$200,x
	lda Chars+$300,x
	sta $c000+$300,x
	lda Chars+$400,x
	sta $c000+$400,x
	lda Chars+$500,x
	sta $c000+$500,x
	lda Chars+$600,x
	sta $c000+$600,x
	lda Chars+$700,x
	sta $c000+$700,x

	lda Screen,x
	sta $c800,x
	lda Colours,x
	sta COLOURRAM,x
	lda Screen+$100,x
	sta $c800+$100,x
	lda Colours+$100,x
	sta COLOURRAM+$100,x
	lda Screen+$200,x
	sta $c800+$200,x
	lda Colours+$200,x
	sta COLOURRAM+$200,x
	lda Screen+$2e8,x
	sta $c800+$2e8,x
	lda Colours+$2e8,x
	sta COLOURRAM+$2e8,x

	dex
	bne .cpc1


	; Fill this screen line with the equivalent of <space>
	ldx #39
.colf1
	lda #32
	sta SCREENRAM+19*40,x
	dex
	bpl .colf1

	lda #4
	sta $0402
	lda #6
	sta $0403

	cli

	ldy #10
	ldx #1
	stx SCREENRAM+3+20*40
	sty COLOURRAM+3+20*40
	inx
	stx SCREENRAM+4+21*40
	sty COLOURRAM+4+21*40
	inx
	stx SCREENRAM+5+22*40
	sty COLOURRAM+5+22*40
	inx
	stx SCREENRAM+6+23*40
	sty COLOURRAM+6+23*40

	ldx #$c0
	stx VIC2Sprite0Y
	inx
	stx VIC2Sprite1Y
	inx
	stx VIC2Sprite2Y
	inx
	stx VIC2Sprite3Y
	inx
	stx VIC2Sprite4Y
	inx
	stx VIC2Sprite5Y
	inx
	stx VIC2Sprite6Y
	inx
	stx VIC2Sprite7Y

	clc
	lda #30
	sta VIC2Sprite0X
	adc #24
	sta VIC2Sprite1X
	adc #24
	sta VIC2Sprite2X
	adc #24
	sta VIC2Sprite3X
	adc #24
	sta VIC2Sprite4X
	adc #24
	sta VIC2Sprite5X
	adc #24
	sta VIC2Sprite6X
	adc #24
	sta VIC2Sprite7X

	; Blank sprites frames in the unused area of the score panel screen
	lda #20
	sta SPRITEFRAME
	sta SPRITEFRAME+1
	sta SPRITEFRAME+2
	sta SPRITEFRAME+3
	sta SPRITEFRAME+4
	sta SPRITEFRAME+5
	sta SPRITEFRAME+6
	sta SPRITEFRAME+7

	ldx #63
	lda #0
.spr1
	sta $0500,x
	dex
	bpl .spr1

.loop1
	lda panelIRQDone
.loop2
	cmp panelIRQDone
	beq .loop2

	lda CIA1KeyboardColumnJoystickA
	and #%10000
	bne .loop1

	lda VIC2Sprite0Y
	eor #$80
	sta VIC2Sprite0Y
	tax
	inx
	stx VIC2Sprite1Y
	inx
	stx VIC2Sprite2Y
	inx
	stx VIC2Sprite3Y
	inx
	stx VIC2Sprite4Y
	inx
	stx VIC2Sprite5Y
	inx
	stx VIC2Sprite6Y
	inx
	stx VIC2Sprite7Y

	jmp .loop1

bottomMultiplexIRQDone	!by 0
panelIRQDone			!by 0

; Remove all possibility that the timings will change due to previous code
!align 255,0
IrqTopOfScreen
!zn
	pha
	txa
	pha
	tya
	pha

	+MACROAckRasterIRQ_A

	; Setup the NMI
	lda #$7f
	sta CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl
	sta CIA2TimerBControl
	; Ack any interrupts that have happened
	lda CIA2InterruptControl
	; Turn off timer A
	lda #0
	sta CIA2TimerAControl
	; Reset timer B count
	lda #0
	sta CIA2TimerALo
	lda #$16
	sta CIA2TimerAHi
	; Turn on timer A
	lda #$9						; Trigger timer A once only
	sta CIA2TimerAControl
	; Reset interrupt control for NMI so that if restore is pressed it only misses one frame.
	lda #$81
	sta CIA2InterruptControl

	lda #%11111111
	sta VIC2SpriteEnable


	lda #%0100
	and CIA1KeyboardColumnJoystickA
	bne .o1
	inc $0402
.o1
	lda #%1000
	and CIA1KeyboardColumnJoystickA
	bne .o2
	dec $0402
.o2
	lda #%0001
	and CIA1KeyboardColumnJoystickA
	bne .o3
	inc $0403
.o3
	lda #%0010
	and CIA1KeyboardColumnJoystickA
	bne .o4
	dec $0403
.o4
	lda $0402
	and #7
	sta $0402
	lda $0403
	and #7
	sta $0403

	lda $0402
	ora #%10000
	sta VIC2ScreenControlH
	lda $0403
	ora #%10000
	sta VIC2ScreenControlV

	; Make the VIC use bank $c000-$ffff for this top screen
	lda #%00
	sta CIA2PortASerialBusVICBank

	; Charset at $c000 and screens at $c800/$cc00
	lda #%00100000
	sta VIC2MemorySetup

	; The same values passed to CharPack
;	lda #4
	lda #0
	sta VIC2ScreenColour
;	lda #9
	lda #10
	lda #11
	sta VIC2ExtraBackgroundColour1
;	lda #12
	lda #1
	lda #12
	sta VIC2ExtraBackgroundColour2

	lda #1
	sta VIC2BorderColour
	ldx #32
.loop1
	dex
	bne .loop1
	lda #0
	sta VIC2BorderColour

	lda #scorePanel1Pos
	sta VIC2Raster
	lda #<ScorePanel1
	sta KERNALIRQServiceRoutineLo
	lda #>ScorePanel1
	sta KERNALIRQServiceRoutineHi

	pla
	tay
	pla
	tax
	pla
	rti


; Remove all possibility that the timings will change due to previous code
!align 255,0
ScorePanel1
!zn
	sta irqAStore

	; Setting bitmap and ECM modes will cause VIC2 to display black as it gets confused but the internal counters will continue to count correctly.
	; Create our own char new line at this position
	lda #$67
	sta VIC2ScreenControlV

	; Switch to displaying our text screen in bank 0 to demo this
	lda #20
	sta VIC2MemorySetup
	lda #%11
	sta CIA2PortASerialBusVICBank

	lda #2
	sta VIC2ScreenColour
	lda #11
	sta VIC2ExtraBackgroundColour1
	lda #14
	sta VIC2ExtraBackgroundColour2

	; Make sure our sprites are off by the time the top interrupt comes along
	lda #0
	sta VIC2SpriteEnable

	cld									; Paranoia
	inc panelIRQDone

	lda #scorePanel2Pos
	sta VIC2Raster
	lda #<ScorePanel2
	sta KERNALIRQServiceRoutineLo
	lda #>ScorePanel2
	sta KERNALIRQServiceRoutineHi

	+MACROAckRasterIRQ_A
	lda irqAStore
	rti

ScorePanel2
!zn
	sta irqAStore

	; Turn on screen now
	lda #$17
	sta VIC2ScreenControlV
	lda #$18
	sta VIC2ScreenControlH

	cld									; Paranoia

	lda #0
	sta VIC2Raster
	lda #<IrqTopOfScreen
	sta KERNALIRQServiceRoutineLo
	lda #>IrqTopOfScreen
	sta KERNALIRQServiceRoutineHi

	+MACROAckRasterIRQ_A
	lda irqAStore
	rti

nmi1
!zn
	; Don't forget to save registers for the NMI
	sta nmiAStore
	stx nmiXStore

	lda #15
	sta VIC2BorderColour
	ldx #32
.loop1
	dex
	bne .loop1
	lda #0
	sta VIC2BorderColour

.NMIExit
	lda CIA2InterruptControl
	lda #$81
	sta CIA2InterruptControl

	lda nmiAStore
	ldx nmiXStore
	rti




;CharPack.exe TestScreen.bmp 4 9 12 chars.bin screen.bin colours.bin
;CharPack.exe TestScreen3.bmp 0 10 1 chars.bin screen.bin colours.bin
Chars
!bin "../CharPack/chars.bin"
Colours
!bin "../CharPack/colours.bin"
Screen
!bin "../CharPack/screen.bin"
