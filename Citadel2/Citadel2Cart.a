; Citadel2Cart boot code
; EasyFlash version
;-truedrive -cartcrt Citadel2Cart.crt

!source "../stdlib/stdlib.a"

CartSelectBank_ProcessorPort	= ProcessorPortDefault
CartKillBank_ProcessorPort		= ProcessorPortKERNALWithIO

!source "../MakeCart/asm/EasyFlash_Macros.a"
;!source "../MakeCart/asm/GMod2_Macros.a"
;!to "Citadel2Cart.prg", cbm
!to "Citadel2Cart_8K.prg", cbm
;!sl "Citadel2Cart.map"
!sl "Citadel2Cart_8K.map"
!sal
;!svl "Citadel2Cart.lbl"
!svl "Citadel2Cart_8K.lbl"
!cpu 6510
!ct pet

; This is bank 0 in the cart
; It contains the boot code.
; The code at Boot copies the code at RealCodeStart to its real place in $c000.
; It then uses the other cart banks to copy the compressed Citadel2 code.

; If bank 0 ever gets over 8K or the compressed game code gets over $b800 (47104) bytes then this approach is screwed. :)

* = C64Cartridge_Lo_8K
; Used by MakeCart to place this address at 0xfffc into the second chip (bank 0 address a000)
; When making EasyFlash carts
; EasyFlash replaces the kernal and so this address is used for the kernal reset vector
!word Boot
; This is used by GMod2, since it uses the normal 8K boot ROM location we use the CBM80 magic bytes instead
!word Boot
+M_CBM80

Boot
	sei
	cld

	ldx #PreBootEnd-PreBoot
.l1
	lda PreBoot,x
	sta PreBootReal,x
	dex
	bpl .l1
	txs
	jmp PreBootReal

!zone
PreBoot
!pseudopc $100 {
PreBootReal
!ifdef EASYFLASH_CONTROL_16K {
	; EasyFlash defaults to Ultimax mode and we want RAM at $c000 so select bank 0 instead
	lda #0
	+MACRO_CartSelectBank_8K_NoSEI_A
}

	; Need to use indirect addressing to do the copy since we cannot use self modifying code
	lda #<CodeMoveStart
	sta $fb
	lda #>CodeMoveStart
	sta $fc
	ldx #(>(CodeMoveEnd-CodeMoveStart))+1
	lda #<RealCodeStart
	sta $fd
	lda #>RealCodeStart
	sta $fe
	ldy #0
.l1
	lda ($fb),y
	sta ($fd),y
	dey
	bne .l1
	inc $fc
	inc $fe
	dex
	bne .l1
	jmp RealCodeStart
}
PreBootEnd

!zone
CodeMoveStart
!pseudopc $c000 {
RealCodeStart
	lda #ProcessorPortDefault
	jsr InitialiseMachine

	; Using the kernal process to init the machine
;	stx VIC2ScreenControlH
	jsr IOINIT ;prepare i/o
	jsr RAMTAS ;init memory
	jsr RESTOR ;init i/o
;	jsr CINT

	; Check for runstop being pressed
	lda #$ff
	sta CIA1PortADDR
	lda #0
	sta CIA1PortBDDR
	lda #$7f
	sta CIA1KeyboardColumnJoystickA
;	lda #$7f
	cmp CIA1KeyboardRowsJoystickB
	bne .notRunstop

	lda #VIC2Colour_Green
	sta VIC2BorderColour

	; Runstop is pressed, so just do a normal reset after killing the cartridge bank
	+MACRO_CartKillBank
	jmp (KERNALColdStartResetLo)

.notRunstop
	; Now really grab the machine
	lda #ProcessorPortDefault
	jsr InitialiseMachine

	lda #0
	sta ZPCurrentFileDeviceNumber

	+ClearScreenAt_AX SCREENRAM , ' '
	+MACROWaitForTheLastScanPlus1_A
	+SetDefaultScreenLowerCase_A


	; Check the cart banks switch properly, otherwise there is a hardware problem
	lda C64Cartridge_Lo_8K
	pha
	lda C64Cartridge_Lo_8K+1
	pha

	; Switch to the next bank and compare for data differences
	lda #1
	+MACRO_CartSelectBank_8K_NoSEI_A

	pla
	cmp C64Cartridge_Lo_8K+1
	bne .diff
	pla
	cpx C64Cartridge_Lo_8K
	bne .diff

	+DisplayColourTextMiddle_AX .HWFail , .HWFailEnd , SCREENRAM + (12*40) , VIC2Colour_White

	; Endless loop
.l1
	inc VIC2BorderColour
	jmp .l1

.diff
	; Display message in zero page...
	+ClearScreenAt_AX COLOURRAM , VIC2Colour_Black

!if 1 {
	; No disc access needed, so clobber it all
	; Clobber all the lower memory
	ldx #0
	txa
.cl2
	sta $0002,x
	sta $0100,x
	sta $0200,x
	sta $0300,x
	inx
	bne .cl2
}

	+DisplayColourTextMiddle_AX .loading , .loadingEnd , $0000 + (13*40) , VIC2Colour_White

	+MACROWaitForTheLastScanPlus1_A
	; Standard ROM character set and screen at $0
	lda #4
	sta VIC2MemorySetup

	; Copy the other 8KB cart banks to BASIC memory
	lda #0
	tax
	ldy #1
	sty CART_SELECT_BANK
.l2
.sm1	lda C64Cartridge_Lo_8K,x
.sm2	sta $0800,x
	dex
	bne .l2
	inc .sm1+2
	inc .sm2+2

	lda .sm2+2
	cmp #>VIC2_Bank3
	beq .RunGame

	; Loop the cart end address block copying $8000 - $a000
	lda .sm1+2
	cmp #>BASICROM
	bne .l2

	lda #$80
	sta .sm1+2
	; Next bank
	iny
	sty CART_SELECT_BANK
	jmp .l2

.RunGame
	; Stop the cartridge from selecting the bank by selecting an invalid bank
	+MACRO_CartKillBank

	jsr VideoMode_DetectVideoType
	lda VideoMode_Type
	sta $3fd

	; Store the joysticks xor with $ff to $3fe and $3ff so we can test communication of external configuration information to the booted code
	lda CIA1KeyboardColumnJoystickA
	eor #$ff
	and #JoystickBits_AllDirections | JoystickBits_Fire
	tax
	lda .joystickToChoice,x
	sta $3fe
	lda CIA1KeyboardRowsJoystickB
	eor #$ff
	and #JoystickBits_AllDirections | JoystickBits_Fire
	tax
	lda .joystickToChoice,x
	sta $3ff

	; Start the compressed game code
	jmp 2061

; Maps joystick direction to these choices:
;010
;304
;020
.joystickToChoice
	!by 0 , 1 , 2 , 0	; 0
	!by 3 , 0 , 0 , 0	; 4
	!by 4 , 0 , 0 , 0	; 8
	!by 0 , 0 , 0 , 0	; 12
	!by 5 , 0 , 0 , 0	; 16


.loading !scr "  loading  "	; The extra spaces are important to give these blank spaces some colour for the later decompressed data that used << and >>
.loadingEnd

.HWFail !scr "Hardware failure, banks not switching!"
.HWFailEnd

!source "../stdlib/Initialise.a"
!source "../stdlib/VideoModes_Macros.a"
!source "../stdlib/VideoModes.a"

}
CodeMoveEnd
