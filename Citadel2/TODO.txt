#Code flow:
ScrollEntryCommon.a - ScrollEntry
Calls:
	ScrollMain.a - InitialiseGame
		UpdateMultiplexorToAnimation
	ScrollerDemoMainline
		DarkGrey	TopOfScreen
		White		HandleUserInput
						Updates reqested scroll speeds into frameTargetVelX and frameTargetVelY
					Scroller.a - ScrollerCalculate
						Stores into scrollerRealMovementXPixels and scrollerRealMovementYPixels
		Blue		MusicPlayerPlay
		Green		UpdateSprites
						This updates sprites with scrollerRealMovementXPixels and scrollerRealMovementYPixels
					if Multiplex_SplitSort {
		Brown			Scroller.a - AnimationUpdateMultiplexorPre
		Cyan			Multiplex_Sort
					}
					ScrollerDemoWaitMultiplex
		Red			Scroller.a - AnimationUpdateMultiplexor
					if !Multiplex_SplitSort {
		Cyan			Multiplex_Sort
					}
					if Multiplex_SplitSort {
		LightRed		CopyMultiplexTables
					}
					ScrollerDemoWaitScorePanel
					ScrollerUpdateTopIRQ
		DarkGrey	BeforeScrollers - Remove old bullets
		Purple		ScrollerScreen
		LightGreen	ScrollerOffScreen
		LightGrey	AfterScrollers - Move and render bullets (topScreenBank is the displayed screen)
		LightRed	EnemyProcessActivation
						EnemyThink

	if MazeSolve_DebugBorder {
		DarkGrey	Idle
		White		Scheduled DynamicMemory_BlockSweep
		Red			WantMazeSolve_doInit
		Green		WantMazeSolve_step
		Blue		WantMazeSolve_traceBackStep
		Yellow		WantMazeSolve_traceBackMemory
						WantMazeSolveBytes and resultant route calculation copy
		Purple		Out of memory DynamicMemory_BlockSweep
	}

	If Scroller_DebugColourScrollTimings {
		Green		ScrollColour_1 top half of screen
		LightGreen	ScrollColour_1 bottom half of screen
		LightBlue	Block colour draw
	}
	if Scroller_DebugScreenScrollTimings {
		Red			ScrollBank0To1_1
		Blue		Block draw
	}


During the sub-game
		White		HandleUserInput
						CheckForTerminalsAndSwitches
							SubGameCreatePuzzle
						SubGameUpdate
							SubGame_CheckResult
							SubGame_HandleUserUpdates
							SubGame_DrawPointer
							SubGameChar_UpdateHorizontalBar
							SubGameChar_UpdateVerticalBar
							SubGame_SolveXStripPreCalc
							SubGame_SolveXStrip
							SubGame_SolveXStripUpdatePosition
						SubGame_ResetEnterTimer


** Note **
All references to CartFile1_ values must be in the GenericSpecificCode block, else weird bugs happen where old data offsets are used when assembling the code overlays.


TODO items:

* On the title screen, when choosing "Arcade" "Strategy" and the music/SFX options, display the music/sfx to the left and the arcade/strategy to the right.
	Perhaps pulse them and add joystick direction hint icons.




* For the last door, will need a hint that the door can only be opened by an enemy, not the player
	Captured or not captured... If only they would follow your commands...




* DisplayTitleScreen can be used with completely standalone code for the title screen, no need to reuse the game multiplexor code at all if we don't want to. :)
	This makes the whole title screen code easier to maintain as there won't be so much referencing of Scroller internals
	Currently the title screen gets the common game code, including the multiplexor and IRQ handler, from "Citadel2Entry.a" along with: Citadel2Entry_Title.a Citadel2Entry_Title_Stubs.a
	It would be easier to remove TitleScreenAnimationHook and just use DecompressTitleScreenCode while extracting GenericSpecificCode_End from the game compilation
		* DecompressTitleScreenCode might need updating to copy more data, like the conditional code at: !ifdef CartFile1_Size_Citadel2_Game2_dec {





* If we are using the IRQ vector, with the Scroller_UseKernal, add data check for RNXPCompressionDecompress_GetDictEntryAndWrite not getting corrupted by the kernal vectors
	Note: Scroller_EarlyStartHook already does some code backup for the vecotrs
	The PreBoot.a "*=(13*40)+15" seems to push the code start for the decompression beyond the vectors, by accident
	Note: InitBank0Data
		; Blank sprite num 20 data in this bank
	Note: Search for "memory map"




* When ScrollerDemoInitOneTimeData is called, the game sprites lookup table might not be correct
	This actually needs to be called at the start of the level once the game sprites are available

	
	

* Title screen Arcade/Strategy indicator in a different position from the music/sound display
	Always display these, with a joystick direction indicator
	Music/sfx/music+sfx option can tri-state toggle on one direction
	Arcade/Strategy can toggle on another direction
	Tutorial hints or normal
		Normal mode changes the question mark map tile to be a normal empty map tile when loading the map



* Tutorial text window needs a more fancy effect. A bounding box, animated text colour, grey wipe effect?



* Also the score panel memory access whilst the tutorial text is displayed will need to be fixed, currently the direct access draws over the tutorial text




* These need macros: MapTerminalToDoor MapAutoDoor
	These do have some structural define offsets




* When teleporting to near the edges of the map, ensure the map coordinates are not out of range.
	For example the first level 1 teleport shows corrupt blocks on the bottom edge of the screen



* Bateries currently recharge on constant movement. Instead make it a cumulative "momentum" based recharge. Each successful move increases a counter by 1, a pause in the movement reduces the cumulative value by 25% (to be tweaked) of the current value
	Once the maximum is reached the "charge" is dumped into the battery. The status bar display could do with showing this charge value, and how it "goes into" the batteries




* Robot level can increase with kills. 
	The sub game doors/switches can have levels.
	The difference between robot and sub game decides how difficult the sub game is.
	* Capture probe could display the level of the enemy being targetted



* Level loading, extra levels
	* TODO - Exit level code goes here
	* Any fancy between levels code could use the same cart bank based code execution model as demonstrated by SubGame_Init etc
		This would be similar to DisplayingSubGame but named to something like DisplayingInterLevel
		Need new small first level, very simple layout.
			Just to teach what the various terminals do etc.
			Slow not very strong enemies.
		Second level can be comprised of data from the current first.
			This will need to take data labels as input, not define them.
			Remember: ; Data after this point can be dynamic in length and referenced by updates to previous tables
			Also maximum data sizes will need to be clarified to take into account various animations still needed.
		Third level can take the current level 2 file



* InterestingPlacesZone could be moved to somewhere else before the loaded level data, since it's not actually forming part of the level data
	So also update BuildIt.bat to remove InterestingPlacesZone extraction



* Unroll the animation and enemy movement code in Animations.a in .sp1 loop
	Convert to a macro, unroll the indrected calculations for AnimationXPosLo,x AnimationXPosHi,x and AnimationYPos,x and store in a cart bank
	Also .simpleUpdateSpriteCheck



* When firing up/down or left/right consider alternating the X or Y coordinate so that the characters are alternately chosen perpendicular to the firing direction
	AllocatePlayerBullet



* There seems to be a bunch of free memory during the game (and title screen) around $400-$700 as the top of the score panel screen isn't used?
	Done forget ClearGameScreens copies over lines at screens: $0800+20*40		$0c00+20*40		$c800+20*40		$cc00+20*40
	Radar.a seems to be accessing $800 directly as is InitBank0Data
	Note memory map in C64\Scroller\ScrollMain.a
	Note InitBank0Data uses $500: ; Blank sprite num 20 data in this bank
	Note copy from ScorePanelChars to $800 for $800 bytes




* It would be possible to run enemy bullet to enemy sprite collision detection, reusing most of the existing enemy bullet to player bounding box tests
	This would be useful for captured enemies that could to be destroyed by enemy fire




- stop capture probe going off-screen



* Battery/weapon/upgrade installation indicator/chars
	fireCounterDelay	: 16 down to ?
	enableRearFire
	enableSideFire
	Capture slot upgrade : 0 to 2
	Battery	: 0 to 2




- Add text to the upgrade screen so you know what icon you're selecting (open door, install upgrade, weapon type, etc.)



* DynamicMemory_BlockSweep is taking way too many rasters
	It needs to be shortened to work incrementally. After each block pos it will store the position and exit and carry on from there.
	A successful allocate or free will reset the sweep block pos to the start.
	If there have been no successful allocates and no frees then it can carry on from the last block merged. Else it starts from the start again.
	The DynamicMemory_BlockSweepCount can then be lowered
* DynamicMemory_AllocateBytes is also taking quite a large amount of time




* Need defines for the animation types (used by AnimationInitWithType, AnimationMutateToType etc) in DataDefs.a. No magic numbers here please.
	* Also for SFXInit



- computer terminals is a save feature - so if you lose a life you reappear at the last terminal you saved to
	Save doors state
	No need to save enemies





* in the real game initially only one slot could be available, pressing space obviously has no effect
collecting and installing the right upgrade adds a slot
meaning F1 could be "assimilate power"
which destroys the captured droid as its power is depleted?




* It might be nice to have "reprogrammers" - droids that can, say, reprogram a droid you'd told to stay and return it to normal.
		Reprogrammers take more energy to capture


* Higher level droids take more energy to capture



* when hovering the capture probe over a droid it will show the energy required to capture a droid




* During sub-game reward longer successful paths with more points. Display how long the bonus will be while the routing is going on. It can count up as the routing progresses.




* For the capture system, could roll out the functions (stay, follow, etc.) using upgrades you collect along the way.
	* these abilities and the number of maintained droids are from dropped upgrades
		we can control when these upgrades drop
		to allow for strategic balanced development/progression
	So you get the player used to one function before you unleash the next...
	* Add pickups for the various functions
	* Add pickups for the maximum number of captured droids



* Think of a different game name:
	Without changing the title screen charset the letters that can be constructed are: CITADELFHOU
	Try anagram solver?



* Try 8-way block aligned based movement, instead of 4-way aligned



* Since the game boots to the title screen, make it so that the version of the code used in the base cartridge file is the title screen build, not the game build
	* Hmm, tricky since the scroller code have deep level hooks into game code and the game build includes so much char/sprite data




* Between level bonus stage. Static screen and static player in the middle. Choose direction to fire.
	Traps open around the player in sequence and enemies come out.
	Beat the bonus stage to get an extra life and permanent powerup.



* Optimise RadarEnemyPlayerUpdate
	It can pre-calc everything due to .EnemyPositionsXOld only being updated every full radar update




* For enemy movement, consider removing the old enemy map tile block only after some time period after the enemy starts moving out of the tile




* Check for other Citadel2_RestoreCallRNXPCompressionDecompress
		Remove decompression code Citadel2_RestoreCallRNXPCompressionDecompress and supportng routines?
			Scroller_EarlyStartHook
			



* Maybe make EnemyTemplate_Ram part of the EnemyFlags_* flags instead?




* Really need unit tests covering enemy and animation logic for the various flags
	* Expected movements through a vastly simplified level
	* Also enemy/player door types and interactions
	* Player to enemy collision detection logic - Captured flag especially
	* Player bulet to enemy collision - Captured flag especially
	* Behaviour with captured/stay/follow/seek&destroy modes
	* Power up drop flags and flags in the animation engine from the enemy flags and templates




Suggestions:

- Try a smooth colour fade (not char fade or bit dissolve) when using lifts - looks much slicker
- Can we have animating chars in the background? If so, how many chars can animate per level? Can we bank-in the animations from a different charset?



* Enemies should not shoot if they think their line of sight to the target is blocked.
	Instead save up the shot counter to be right after the shot becomes clear




* Since the "<<Loading>>" text still exists in zeropage could use that instead...
	Or using $400 it does give the opportunity to have a fancier loading screen
	Or animation etc...
	Need to ponder

	
	
* Fade in/out efect can cart bank in character data a line at a time across all characters
	* Or perform some form of disolve effect
	* This is possible now the cart bank scroller speed code work has been completed




* Create a feature file that runs with automated joystick switched on for many game frames.
	Make sure to test before all optimisations in Citadel2Optimisations.a
	Log and compare the result per frame
	Also produce an average per frame
	Produce a report after optimisations turned on




* Think about some weird areas for needed code, like in $3e8-$3f7, between the screens and the sprite pointers.



* Need defines for sound effects



* One of the levels could have a second computer controlled player that shoots enemies whilst running through a different later accessible part of the level.




* Enemies to use teleporters.
	Check for same zone as the player at the destination teleport when hunting.
	If yes, then route to the teleport and use it.




* Each enemy has a threshold limit for "run away" and how they notice the aggressive actions counter.
	When the counter is over the threshold then the enemy changes behaviour to be "run away"
		"Run away" means tiles that are further away from the player, without line of sight, trickier to code.
		There can be a cycling list of points around the player in a circle, like door scanning code, that are used to find a routable tile where the zone > 0 and not negative.





* Need to setup an enemy routing test, check the cycles, then optimise.
	* Need the BDD code to track cycles, not just instructions.






* Potential to move AnimationCommonUpdate inline and jmp to it from the simple sprite update instead
	Removes jsr/rts 12 cycles per sprite




* Add sprite twinkle animation for health gained




* Perhaps use FIFO to quickly get the next free animation index to use. (Citadel2Entry.a - AnimationFindFreeSlot)
	FIFO.a could expose macros for each routine and provide 8/16 bit FIFOs
	The FIFO start/end index and array will have to be inbetween Animation_StartMem/Animation_EndMem
	* asm/FIFO.a now defines macros to allow the code to be re-used
	Not sure if the extra complexity to the animation code is worth it




* Enemy hit player, make player move away from the collision a bit




* The enemy fire directon check can use the map or the screen chars to check if the intended fire direction to the player is clear, and then fire.
	Better than just random firing.




* Robot black and pink



* Add more trees and flowers



* Pick better interesting points, don't try to sort them with regard to zones. Go for better distribution.



* Structure macro for doors
	Also other structures in Data.a


* TeleportPairs structure




* If the off-screen enemy detects a blocked map tile then look for a map tile near it that isn't blocked and warp to that.
	Free any allocated route as well.



* Add memory read write failure checks in feature files for citadel



* Enemy map update routine to utilise spare cycles during the frame



* Better map with some landmarks like computer terminals and recharge points
	Add their coordinates into the intesting places array and separate into types of places for easier AI lookup
	Add distinct AI, some robots will shuttle between computer terminals.
	Some will patrol.
	When damaged they will try to get to a repair/recharge station.


* Think about enemy AI metrics to use:
	Hunt for player probability
		Inquisitiveness. Modifies "Hunt for player probability" when the enemy hears gunfire.
	Door check probability
	Computer check probability
	Recharge probability. Modified by a "damage to recharge modifier" value as damage is taken.
		Damage to recharge modifier
	


* If I set DynamicMemorySize to be really low then I see multiple DynamicMemory_BlockSweep and DynamicMemory_AllocateBytes in the same frame.
	This shouldn't happen. If the dynamic memory failed and there hasn't been any free and the DynamicMemory_BlockSweep fails to merge blocks then don't try DynamicMemory_AllocateBytes again until a block is potentially free again.
	DynamicMemory_BlockSweep should early out if it doesn't think there are any blocks to free. i.e. No frees done since the last full sweep.
	DynamicMemory_AllocateBytes should early out with failure for the same sized block if there have been no frees or successful sweep merges since the last attempt.




* Adding some placeholder animation types. See AnimationData_0
	The code needs to process this properly
	AnimationFindFreeSlot needs to setup colours and frames etc
	Also see AnimationSpriteFrameCount etc
	* Needs animation speed
	* loop/self delete etc



* Perhpas EnemyPositionsYHi, EnemyPositionsYLo, EnemyPositionsXLo , EnemyPositionsXHi , EnemyMoveStepsCount can be moved to the on-screen animation section
	It would save a lot of memory space




* Add code to grow out #Node_aversion when enemies are destroyed.
	*TODO* #Node_aversion can be gradually reduced over time with maze node scans.
	There can be displays, recharge stations, tool machines etc.
	Some robots will run away, some will seek out the player if the security alert is high enough.
	The player needs to access key card data from various terminals or specific types of robot.
	Certain doors will only open for certain key cards.
	Instead can try to take over certain robots and use them to open doors, or as battering rams or gun platforms.



* Add a bat file builder for a C64 screen displaying route test that repeatedly picks locations in a maze and routes between them

	
* Sprites


	
* Add some feature file tests for multi-directional scroll animation engine
	Fix Animation.feature so it will compile and test the bare minimum

* Add feature file tests for EnemyProcessActivation



* Robot's room - Place where robots rest, recharge and hide. There are recharge points.


* Player upgrades
** Faster speed
** Bigger/more weapons
** Circuit hacking addition





* Convert char based map to junction coordinate based links.
	Use A* to solve paths.
	However... Instead of just using a +/- 1 closer weight (or potential) use a direction based weight, where the path length/cost is adjusted by the direction of the link compared to the destination.
	
	
	
	
* The map path finding working area can probably be visualised by using a custom map view in the ICU64 memory view.
	The map width and height can be specifically set and each part of the data structure displayed separately.
