
!ct pet

!macro EnemySpritePosToCharacterLookup .rejectRoutine {
	+MSpritePosToCharacterLookup .rejectRoutine , AnimationXPosLo , AnimationXPosHi , AnimationYPos , ScrollerBankVisible , tempWork0 , tempWork1 , Citadel2_ZP_EnemySpriteXPosToScreenCharPoslo , Citadel2_ZP_EnemySpriteYPosToScreenCharPosLolo , Citadel2_ZP_EnemySpriteYPosToScreenCharPosHilo
}

!zn
;Animation_MapPosXLo !by <-(VIC2SpriteXBorderLeft38-7)
;Animation_MapPosXHi !by >-(VIC2SpriteXBorderLeft38-7)
;Animation_MapPosYLo !by <-(VIC2SpriteYBorderTop24-7)
;Animation_MapPosYHi !by >-(VIC2SpriteYBorderTop24-7)

scrollerRealMovementXPixelsNeg !by 0
scrollerRealMovementYPixelsNeg !by 0

!ifdef DebugEnemyBullet {
.doDebugEnemyBullets !by 1
}
!ifdef DebugPickup {
.doDebugPickups !by 1
}

frameIsOrWasBusy !by 0

EnemiesOnScreenCount	!by 0

Animation_alternateFrames !by 0 , 1

UpdateSprites
	; Update the alternate frames values
	lda Animation_alternateFrames
	eor #1
	sta Animation_alternateFrames
	eor #1
	sta Animation_alternateFrames+1


!if 0 {
	; Display the overrun counter in the border colour
	lda ScrollerDemo_OverrunCounter
	sta VIC2BorderColour
}

!if 0 {
	; Display the enemies on screen counter in the border colour
	lda EnemiesOnScreenCount
	sta VIC2BorderColour
}

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	sta Animation_PlayerXPosDiv2

!ifdef IsUnitTesting {} else {
	; Update any glow values for EnemyFlags combinations
	inc .glowCount
	lda .glowCount
	and #31
	sta .glowCount
	lsr
	tay
	lda .glowTabPickup,y
	sta .glowValues + EnemyFlags_DropPickup

	lda .glowCount
	lsr
	lsr
	and #7
	tay
	lda .glowTabCaptured,y
	sta .glowValues + EnemyFlags_IsCaptured

	lda .glowTabCapturedPickup,y
	sta .glowValues + (EnemyFlags_IsCaptured | EnemyFlags_DropPickup)

	lda .glowCount
	and #7
	tay
	lda .glowTabCaptured,y
	sta .glowValuesFast + EnemyFlags_IsCaptured

	lda .glowTabCapturedPickup,y
	sta .glowValuesFast + (EnemyFlags_IsCaptured | EnemyFlags_DropPickup)

	jsr Fade_Process
	jsr Teleport_CheckFadeAction
} ;< !ifdef IsUnitTesting {} else {

	lda #0
	sta EnemiesOnScreenCount

	; Calculate a nice sensible busy frame indicator that can be reused
	lda frameIsOrWasBusy
	beq .ob1
	dec frameIsOrWasBusy
.ob1
	lda #0
	ora frameTotalScrScroll
	ora frameScrollMoveColours
	beq .ob2
	lda #2
	sta frameIsOrWasBusy
.ob2

!if 0 {
	lda frameIsOrWasBusy
	sta VIC2BorderColour
}


!if 0 {
	; MPi: Debug for forcing the frame busy logic
	lda #JoystickBits_Fire
	bit CIA1KeyboardRowsJoystickB
	bne .notSpace
	lda #50
	sta frameIsOrWasBusy
.notSpace
	lda frameIsOrWasBusy
	sta VIC2ScreenColour
}

!if 0 {
	; MPi: TODO: Debug output the scroller movements per frame to known memory locations
.sm1	ldx #0
	lda scrollerRealMovementXPixels
	sta $fd00,x
	lda scrollerRealMovementYPixels
	sta $fe00,x
	inx
	; Clear the next to make the store position easier to find
	lda #' '
	sta $fd00,x
	sta $fe00,x
	inc .sm1+1
}


	+MSpritePosToCharacterLookup_Setup EnemySpriteXPosToScreenCharPos , EnemySpriteYPosToScreenCharPosLo , EnemySpriteYPosToScreenCharPosHi , Citadel2_ZP_EnemySpriteYPosToScreenCharPosLolo , Citadel2_ZP_EnemySpriteYPosToScreenCharPosLohi , Citadel2_ZP_EnemySpriteYPosToScreenCharPosHilo , Citadel2_ZP_EnemySpriteYPosToScreenCharPosHihi , Citadel2_ZP_EnemySpriteXPosToScreenCharPoslo , Citadel2_ZP_EnemySpriteXPosToScreenCharPoshi , topScreenScrollX , topScreenScrollY

	; Calculate the enemy bullet busy value this frame
	lda EnemyBulletBusy
	beq .nb1
	dec EnemyBulletBusy
.nb1

!ifdef DebugEnemyBullet {
	lda .doDebugEnemyBullets
	beq .skipDebug
	dec .doDebugEnemyBullets
	jsr AnimationFindFreeSlot
	ldy #6
	jsr AnimationInitWithType
	lda #0
	sta AnimationXPosHi,x
	lda #124
	sta AnimationXPosLo,x
	lda #150
	sta AnimationYPos,x
.skipDebug
}

!ifdef DebugPickup {
	lda .doDebugPickups
	beq .skipDebug2
	dec .doDebugPickups
	jsr AnimationFindFreeSlot
	ldy #7
	jsr AnimationInitWithType
	lda #0
	sta AnimationXPosHi,x
	lda #170
	sta AnimationXPosLo,x
	lda #150
	sta AnimationYPos,x
.skipDebug2
}

	lda .smAlternateFrames+1
	eor #1
	sta .smAlternateFrames+1

	lda #0
	sec
	sbc scrollerRealMovementXPixels
	sta scrollerRealMovementXPixelsNeg
	lda #0
	sec
	sbc scrollerRealMovementYPixels
	sta scrollerRealMovementYPixelsNeg

	+MAdd8STo16S scrollerRealMovementXPixelsNeg , Animation_MapPosXLo , Animation_MapPosXHi
	+MAdd8STo16S scrollerRealMovementYPixelsNeg , Animation_MapPosYLo , Animation_MapPosYHi

	jsr DetectPlayer_AutoDoorChars

	; Update sprites here from the frame data. i.e. Copy them from the frame data to the interrupt data
	; MPi: TODO: Optimisation. Don't copy the sprite data have double buffered sprite data. One for calc, one for draw.
	ldx Multiplex_MaxSpr
	dex
.sp1
	lda AnimationActiveSlot,x
	beq .simpleUpdateSpriteCheck

	inc EnemiesOnScreenCount
	tay	; Index into the enemy map

	jsr AnimationDoFineUpdates

	; Calculate the on screen positions based on the total map scroll
	; Also perform screen border checks
	lda EnemyPositionsXLo-1,y
	sec
	sbc Animation_MapPosXLo
	sta AnimationXPosLo,x
	lda EnemyPositionsXHi-1,y
	sbc Animation_MapPosXHi
	bmi .offScreenDB	; Off screen
	sta AnimationXPosHi,x
	beq .o1
	cmp #1
	bne .offScreenDB	; Way off screen
	lda AnimationXPosLo,x
	cmp #<VIC2SpriteXBorderRight
	bcs .offScreenDB	; Also off screen
.o1
	lda EnemyPositionsYLo-1,y
	sec
	sbc Animation_MapPosYLo
	sta AnimationYPos,x
	lda EnemyPositionsYHi-1,y
	sbc Animation_MapPosYHi
	bne .offScreenDB	; Also off screen

	lda AnimationYPos,x
	cmp #VIC2SpriteYBorderTop-VIC2SpriteSizeY
	bcc .offScreenDB
	cmp #scorePanelPos1
	bcs .offScreenDB

	cpy #1	; Is it the player slot?
	beq .skipEnemyBulletTest

	; Teleporting, no enemy firing
	lda Teleport_TimeToSwitchMap
	bne .enemyFireRet

	; Useful place to update enemy firing
	inc AnimationParam1,x
	lda AnimationParam1,x
	cmp AnimationFireSpeed,x	; Enemy fire rate check
	bcs .lenemyFire_

.enemyFireRet

	; Alternate the bullet test for each sprite based on its enemy DB index
	tya
	and #1
.smAlternateFrames	cmp #0
	beq .skipEnemyBulletTest

	lda AnimationEnemyFlags,x
	and #EnemyFlags_IsCaptured
	bne .doSolidTest
	jmp .enemyHitBulletTest
.doSolidTest
	jmp .enemyHitSolidTest

.skipEnemyBulletTest

	jsr AnimationCommonUpdate

	dex
	bpl .sp1

	rts
.lenemyFire_ jmp .enemyFire

.offScreenDB

.offScreenClearY
	lda #$ff
	sta AnimationYPos,x

.offScreen2
	dex
	bpl .sp1

	rts

.lnoPlayerLCollide jmp .noPlayerLCollide

.simpleUpdateSpriteCheck

	lda AnimationYPos,x
	cmp #$ff
	beq .offScreen2

	lda AnimationFlags,x
	and #AnimationFlags_PlayerCollideS
	beq .noPlayerSCollide

	; Stop collisions with the player when the game is exiting
	lda ScrollerExitMainLineCounter
	ora frameIsOrWasBusy
	ora Animation_alternateFrames
	bne .noPlayerSCollide

.testEnemyBulletToPlayerCollide
	lda AnimationYPos
	clc
	adc #8
	sec
	sbc AnimationYPos,x
	cmp #16
	bcs .lnoPlayerLCollide

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp+1

	lda Animation_PlayerXPosDiv2
	clc
	adc #5
	sta tempWork0
	sec
.smpp	sbc #0
	cmp #10
	bcs .lnoPlayerLCollide

	; Cannot use AnimationFlags_PlayerCollideS and EnemyFlags_Pickup at the same time
;	lda AnimationEnemyFlags,x
;	and #AnimationFlags_Pickup
;	bne .isPickup

	; When an enemy bullet hits the player this makes other enemies more alert, kind of like wasps :)
	lda #20
	jsr EnemyAddPlayerAggression

	lda #1
	jsr AnimationHitPlayerLogic
	
	jmp .removeBullet
.isPickup
	jmp .removePickup

.noPlayerSCollide


	lda AnimationFlags,x
	and #AnimationFlags_PlayerCollideL
	beq .noPlayerLCollide

.testPickupToPlayerCollide
	lda AnimationYPos
	clc
	adc #15
	sec
	sbc AnimationYPos,x
	cmp #32
	bcs .noPlayerLCollide

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp2+1

	lda Animation_PlayerXPosDiv2
	clc
	adc #9
	sta tempWork0
	sec
.smpp2	sbc #0
	cmp #20
	bcs .noPlayerLCollide

	lda AnimationFlags,x
	and #AnimationFlags_Pickup
	bne .isPickup

	; Just remove since we don't know what it is
	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x

	jmp .nextAnimation

.isPickup2
	jmp .removePickup2

.noPlayerLCollide


	lda AnimationFlags,x
	and #AnimationFlags_CharCollide
	beq .noCharCollide

	; Debug skip code
;	jmp .noCharCollide

.spriteToScreenCharsCollideTest

	; Checks for animated sprites hitting solid character blocks
	+EnemySpritePosToCharacterLookup .noCharCollide

	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y

	cmp #MapSolidChars
	bcc .noCharCollide

	lda AnimationFlags,x
	and #AnimationFlags_Pickup
	bne .isPickup2

	; Stop simple movement when it hits a wall
	lda #0
	sta AnimationSimpleMoveX,x
	sta AnimationSimpleMoveY,x

.removeBullet
	; Mutate to the explosion type
	ldy #9
	jsr AnimationMutateToType

	lda #5
	jsr SFXInit

.noCharCollide

	; Update and check Y pos offscreen
	lda AnimationYPos,x
	clc
	adc scrollerRealMovementYPixels
	clc
	adc AnimationSimpleMoveY,x

	cmp #VIC2SpriteYBorderTop-VIC2SpriteSizeY
	bcc .loffScreenClearY
	cmp #scorePanelPos1
	bcs .loffScreenClearY

	sta AnimationYPos,x

	; Update and check X pos offscreen
	lda scrollerRealMovementXPixels
	clc
	adc AnimationSimpleMoveX,x
	beq .noXMove
	bpl .posXMove

	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x
	bcs .noxC

	dec AnimationXPosHi,x
	beq .on
	jmp .offCheckX

.posXMove
	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x
	bcc .noxC

	inc AnimationXPosHi,x
	jmp .offCheckX

.noxC
	ldy AnimationXPosHi,x
	beq .on

.offCheckX
	cmp #<VIC2SpriteXBorderRight
	bcs .loffScreenClearY

.noXMove
.on
	jsr AnimationCommonUpdate

.nextAnimation
	dex
	bpl .lsp1

	rts
.lsp1 jmp .sp1
.loffScreenClearY jmp .offScreenClearY

.lenemyFire jmp .enemyFire
.lskipEnemyBulletTest jmp .skipEnemyBulletTest

.removePickup
	; Store the parameter, which is the type of the item picked up
	lda MapBlockAlignedMovement
	beq .isArcade1

	lda AnimationParam1,x
	jsr PlayerInventory_Add
	jmp .removePickup2

.isArcade1
	lda AnimationParam1,x
	sta SubGamePickPos
	lda #SubGameExit_Success
	sta SubGame_ExitState

.removePickup2
	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x

	lda #9
	jsr SFXInit

	jmp .nextAnimation

.enemyHitSolidTest

	; Debug skip code
;	jmp .skipEnemyBulletTest

	lda EnemyHealth-1,y
	bmi .lenemyHitBySolidBlocks


	+EnemySpritePosToCharacterLookup .lskipEnemyBulletTest

	lda (tempWork0),y
	; Detect with solid wall characters
	cmp #MapSolidChars
	bcs .lenemyHitBySolidBlocks
	jmp .testEnemyToPlayerCollide

.litHitEnemy jmp .itHitEnemy
.lenemyHitBySolidBlocks jmp .enemyHitBySolidBlocks


.enemyHitBulletTest

	; Debug skip code
;	jmp .skipEnemyBulletTest

	+EnemySpritePosToCharacterLookup .lskipEnemyBulletTest

	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	; Detect with solid wall characters
	cmp #MapSolidChars
	bcs .lenemyHitBySolidBlocks
	dey
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	iny
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	tya
	sec
	sbc #42
	tay
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	tya
	clc
	adc #80
	tay
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy
	dey
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #MaxNumBulletChars
	bcc .litHitEnemy


.testEnemyToPlayerCollide
	; Stop collisions with the player when the game is exiting
	lda ScrollerExitMainLineCounter
;	ora frameIsOrWasBusy
	; Do not use Animation_alternateFrames here since enemy hit tests are already made alternate frames based on their enemy DB index
	bne .noPlayerSCollide2

	lda AnimationYPos
	clc
	adc #20
	sec
	sbc AnimationYPos,x
	cmp #40
	bcs .noPlayerSCollide2

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp3+1

	lda Animation_PlayerXPosDiv2
	clc
	adc #11
	sta tempWork0
	sec
.smpp3	sbc #0
	cmp #22
	bcs .noPlayerSCollide2

	lda #2
	jsr AnimationHitPlayerLogic

	jmp .enemyHitByPlayer	

.doFlashOnly
	lda AnimationSpriteColour,x
	bmi .noPlayerSCollide2
	; Flash it
	eor #$ff
	sta AnimationSpriteColour,x

.noPlayerSCollide2

	jmp .skipEnemyBulletTest


.itHitEnemy
;	jmp .skipEnemyBulletTest

	; Remove the bullet next frame
	; The bullet char number is the index into PlayerBulletsY
	and #kNumPlayerBullets-1
	tay
	lda #100
	sta PlayerBulletsY,y
.enemyHitBySolidBlocks
.enemyHitByPlayer
	lda AnimationActiveSlot,x
	tay
	sty .smy1+1

	; Enemy was hit, so make it stop and re-calculate its route by faking that it is blocked, if the player aggression is less than its alertness.
	lda EnemyType-1,y
	tay
	lda EnemyTemplate_Alertness,y
.smy1	ldy #0
	cmp Enemy_PlayerAggression
	bcc .ljustPatrol
	lda #MaxEnemyBlockedCount+32
	sta EnemyBlockedCount-1,y
.ljustPatrol

	lda #20
	jsr EnemyAddPlayerAggression

	; Enemy health test
	lda EnemyHealth-1,y
	sec
	sbc #1
	sta EnemyHealth-1,y
	bpl .doFlashOnly

	; Now remove the enemy by switching to the explosion
	lda #20
	jsr EnemyAddPlayerAggression

	lda #0
	sta AnimationActiveSlot,x
	sta AnimationSpriteFrameCount,x
	lda #-1
	sta EnemyType-1,y

	; Check the enemy is not currently requesting a route and abort if necessary
	lda WantMazeSolveState
	cmp #WantMazeSolve_Idle
	beq .notRouting
	cpy WantMazeSolveForEnemyDBIndex
	bne .notRouting

	; Abort the route
	lda #WantMazeSolve_Idle
	sta WantMazeSolveState

.notRouting

	; Free any allocated enemy block
	stx tempWork0
	sty tempWork1
	sty .sm1y+1

	lda EnemyMoveStepsOriginalLo-1,y
	ldx EnemyMoveStepsOriginalHi-1,y
	beq .o2
	jsr DynamicMemory_FreeBytes
.o2
	ldx tempWork0
	ldy tempWork1

	; Really set the memory is freed
	lda #0
	sta EnemyMoveStepsOriginalHi-1,y

	; Add aversion to the place where the enemy exploded
	ldx EnemyPositionsX-1,y
	lda EnemyPositionsY-1,y
	tay
	jsr GetMazeNodesIndex
	sta tempWork2
	stx tempWork3
	ldy #Node_aversion
	lda (tempWork2),y
	clc
	adc #1
	sta (tempWork2),y

	ldy #Node_isBlocked
	lda (tempWork2),y
	and #!Node_isBlocked_Enemy
	sta (tempWork2),y

	ldx tempWork0
	ldy tempWork1

	lda AnimationEnemyFlags,x
	sta .smOldFlags+1

	ldy #4	; Explosion type
	jsr AnimationMutateToType

	lda #2
	jsr SFXInit

	; Score placeholder
	txa
	pha

	lda #<ScorePanel_Score_Addr
	ldx #>ScorePanel_Score_Addr
	jsr ScoreSetAddress
	lda #<EnemyScore
	ldx #>EnemyScore
	jsr ScoreAdd

	pla
	tax

.smOldFlags	lda #0
	and #EnemyFlags_DropPickup
	bne .isDropPickup

	; Pickup chance test
	jsr Rand
	cmp #PickupDropChance
	bcc .noDrop
.isDropPickup
	jsr SpawnPickup
.noDrop
	jsr Rand
	cmp #GeneratorDamageChance
	bcc .noDamageGenerator

.sm1y ldy #0
	jsr CheckGeneratorDamage
.noDamageGenerator

	jmp .skipEnemyBulletTest

EnemyScore
	!by ScorePanel_Score_NumDigits-1, 4, 6, 4, 3, 1

!zn {
SpawnPickup
	stx tempWork5

	; Spawn pickup
	lda AnimationXPosLo,x
	sta tempWork2
	lda AnimationXPosHi,x
	sta tempWork3
	lda AnimationYPos,x
	sta tempWork4

	jsr AnimationFindFreeSlot
	bcs .noFreeSlot

	lda tempWork2
	sta AnimationXPosLo,x
	lda tempWork3
	sta AnimationXPosHi,x
	lda tempWork4
	sta AnimationYPos,x

	; Random colour for the pickup type
	jsr Rand
	and #7
	sta AnimationParam1,x
	clc
	adc #1
	sta AnimationSpriteColour,x

	; Pick the pickup animation to display from the colour
	ldy AnimationParam1,x
	lda Inventory_TypeToGameAnimation,y
	tay
	jsr AnimationInitWithType

.noFreeSlot
	ldx tempWork5

	rts
}

EnemyBulletBusy !by 0

.lenemyFireRet jmp .enemyFireRet
.enemyFire
	lda #0
	sta AnimationParam1,x

	; Stop enemy firing at the player when the game is exiting
	lda ScrollerExitMainLineCounter
	bne .lenemyFireRet

	lda frameIsOrWasBusy
	bne .lenemyFireRet

	stx .smxEF1+1
	sty .smyEF1+1

	; Check for destroy mode
	lda AnimationEnemyFlags,x
	and #EnemyFlags_Destroy
	bne .doDestroyFireTests

	; Check if the game isn't too busy to accept new enemy bullets
	lda EnemyBulletBusy
	cmp #EnemyBulletBusy_Max
	bcs .lenemyFireRet

	; Check if it's not captured
	lda AnimationEnemyFlags,x
	and #EnemyFlags_IsCaptured
	beq .ldoSpriteBullet

	; Captured, but not destroy mode, then do not fire
	jmp .enemyFireRet

.doDestroyFireTests
	; Emit a player type of bullet instead
	; Like the code in UserInput.a : .doFire
	txa
	tay

	jsr Animation_FindOtherEnemyNotInY
	bcs .lnoBulletSpawned2
	stx .smOtherEnemyAnimation+1

	jsr AllocatePlayerBullet
	bcc .doCharFire

.lnoBulletSpawned2	jmp .noBulletSpawned
.ldoSpriteBullet jmp .doSpriteBullet

.doCharFire
	lda #3
	jsr SFXInit

	; Fire bullets!
	stx tempWork2

	lda AnimationYPos,y
	sta tempWork3
	sec
	sbc topScreenScrollY
	tax
	lda PlayerSpriteYPosToScreenCharPos,x
	bmi .lnoBulletSpawned2
	ldx tempWork2
	sta PlayerBulletsY,x

	lda topScreenScrollX
	lsr
	sta tempWork0

	lda AnimationXPosHi,y
	lsr
	lda AnimationXPosLo,y
	ror
	sta tempWork4
	sec
	sbc tempWork0
	tax
	lda PlayerSpriteXPosToScreenCharPos,x
	bmi .lnoBulletSpawned
	ldx tempWork2
	sta PlayerBulletsX,x

	; tempWork3/tempWork4 = Source position
.smOtherEnemyAnimation ldy #0

	lda AnimationYPos,y
	sec
	sbc tempWork3
	sta tempWork3

	lda AnimationXPosHi,y
	lsr
	lda AnimationXPosLo,y
	ror
	sec
	sbc tempWork4
	sta tempWork4

	; Find the approximate direction to fire
.divl1
	lda tempWork3
	beq .divl2
	cmp #-1
	beq .divl2
	cmp #1
	beq .divl2

.divl4
	lda tempWork3
	+M_ASR
	sta tempWork3
	lda tempWork4
	+M_ASR
	sta tempWork4

	jmp .divl1

.divl2
	lda tempWork4
	beq .divl3
	cmp #-1
	beq .divl3
	cmp #1
	beq .divl3
	jmp .divl4
.divl3

	lda tempWork3
	ora tempWork4
	bne .divl5
	inc tempWork3
.divl5

	; MPi: TODO: Calculate direction to a suitable enemy from this enemy
	lda tempWork4
	sta PlayerBulletsXVel,x
	lda tempWork3
	sta PlayerBulletsYVel,x
	lda #10
	sta PlayerBulletsTime,x

.lnoBulletSpawned	jmp .noBulletSpawned

.doSpriteBullet
	lda AnimationXPosLo,x
	sta tempWork2
	lda AnimationXPosHi,x
	sta tempWork3
	lda AnimationYPos,x
	sta tempWork4
	lda AnimationSpriteColourBackup,x
	sta tempWork5

	jsr AnimationFindFreeSlot
	bcs .lnoBulletSpawned

	ldy #6
	jsr AnimationInitWithType

	lda tempWork2
	sta AnimationXPosLo,x
	lda tempWork3
	sta AnimationXPosHi,x
	lda tempWork4
	sta AnimationYPos,x
	lda tempWork5
	sta AnimationSpriteColour,x

	; Calculate the speed
	jsr Rand
	and #1
	sta tempWork6

	; Figure out the fire direction and speeds
	lda tempWork4
	sec
	sbc AnimationYPos
	bcc .not1
	cmp #32
	bcc .not1
	dec AnimationSimpleMoveY,x
	cmp #64
	bcc .doneY
	ldy tempWork6
	bne .doneY
	dec AnimationSimpleMoveY,x
	jmp .doneY
.not1
	lda AnimationYPos
	sec
	sbc tempWork4
	bcc .not2
	cmp #32
	bcc .not2
	inc AnimationSimpleMoveY,x
	cmp #64
	bcc .doneY
	ldy tempWork6
	bne .doneY
	inc AnimationSimpleMoveY,x
	jmp .doneY
.not2

.doneY
	; Div X coord by 2
	; Enemy
	lda tempWork3
	lsr
	ror tempWork2
	; Player

	lda tempWork2
	sec
	sbc Animation_PlayerXPosDiv2
	bcc .not3
	cmp #16
	bcc .not3
	dec AnimationSimpleMoveX,x
	cmp #32
	bcc .doneX
	ldy tempWork6
	bne .doneX
	dec AnimationSimpleMoveX,x
	jmp .doneX
.not3
	lda Animation_PlayerXPosDiv2
	sec
	sbc tempWork2
	bcc .not4
	cmp #16
	bcc .not4
	inc AnimationSimpleMoveX,x
	cmp #32
	bcc .doneX
	ldy tempWork6
	bne .doneX
	inc AnimationSimpleMoveX,x
	jmp .doneX
.not4
.doneX

	lda AnimationSimpleMoveY,x
	ora AnimationSimpleMoveX,x
	bne .gotDirection
	; If there is absolutely no direction then just fire upwards
	dec AnimationSimpleMoveY,x
	dec AnimationSimpleMoveY,x
.gotDirection

	lda #6
	jsr SFXInit

	; Update the busy counter
	lda EnemyBulletBusy
	clc
	adc #EnemyBulletBusy_Add
	sta EnemyBulletBusy

.noBulletSpawned
.smxEF1	ldx #1
.smyEF1	ldy #1

	jmp .enemyFireRet

!if 0 {
.doBulletSpeedCalc
	cmp #0
	bne .of1
	inc AnimationSimpleMoveX,x
	rts
.of1
	cmp #1
	bne .of2
	inc AnimationSimpleMoveX,x
	inc AnimationSimpleMoveY,x
	rts
.of2
	cmp #2
	bne .of3
	inc AnimationSimpleMoveY,x
	rts
.of3
	cmp #3
	bne .of4
	inc AnimationSimpleMoveY,x
	dec AnimationSimpleMoveX,x
	rts
.of4
	cmp #4
	bne .of5
	dec AnimationSimpleMoveX,x
	rts
.of5
	cmp #5
	bne .of6
	dec AnimationSimpleMoveX,x
	dec AnimationSimpleMoveY,x
	rts
.of6
	cmp #6
	bne .of7
	dec AnimationSimpleMoveY,x
	rts
.of7
;	cmp #7
;	beq .of8
	inc AnimationSimpleMoveX,x
	dec AnimationSimpleMoveY,x
.of8
	rts
}

AnimationDoFineUpdates
	stx .smx1+1
;	sty .smy1+1
	ldx EnemyType-1,y
	lda EnemyTemplate_Speed,x
	bmi .notSpeed2
	sta .sma1+1
	and #1
	bne .notHalfSpeedToggle
	lda .smx1+1		; Update alternate enemies each frame depending on their animated sprite index
	eor .smAlternateFrames+1
	and #1
	beq .noMove
.notHalfSpeedToggle
	jsr EnemyMoveFineUpdate
.noMove
.sma1	lda #0
	and #2
	beq .notSpeed2
	jsr EnemyMoveFineUpdate
.notSpeed2
.smx1	ldx #0
;.smy1	ldy #0
	rts

.glowCount !by 0
.glowTabPickup !by VIC2Colour_Red , VIC2Colour_LightRed , VIC2Colour_LightGrey , VIC2Colour_White , VIC2Colour_LightBlue , VIC2Colour_Blue , VIC2Colour_Green , VIC2Colour_LightGreen , VIC2Colour_LightGrey
	!by VIC2Colour_Yellow , VIC2Colour_Orange , VIC2Colour_Brown , VIC2Colour_DarkGrey , VIC2Colour_Grey , VIC2Colour_LightGrey

.glowTabCaptured !by VIC2Colour_DarkGrey , VIC2Colour_Grey , VIC2Colour_LightGrey , VIC2Colour_White
	!by VIC2Colour_LightGrey , VIC2Colour_Grey , VIC2Colour_DarkGrey , VIC2Colour_DarkGrey

.glowTabCapturedPickup !by VIC2Colour_DarkGrey , VIC2Colour_Grey , VIC2Colour_LightGrey , VIC2Colour_White
	!by VIC2Colour_Yellow , VIC2Colour_LightRed , VIC2Colour_Red , VIC2Colour_Red


.glowValues !fill (AnimationBitMask_EnemyFlags_Glow + 1) , 0
.glowValuesFast !fill (AnimationBitMask_EnemyFlags_Glow + 1) , 0

AnimationCommonUpdate
	lda AnimationEnemyFlags,x
	and #AnimationBitMask_EnemyFlags_Glow
	beq .notGlowing

	; Is it the active slot?
	cpx CaptureProbe_CapturedListAnimations
	beq .activeCaptured

	tay
	lda AnimationSpriteColour,x
	and #128			; Preserve the flashing/hit flag
	ora .glowValues,y	; Read pre-calculated glow values table with the glow type
	sta AnimationSpriteColour,x
	jmp .notGlowing

.activeCaptured
	tay
	lda AnimationSpriteColour,x
	and #128				; Preserve the flashing/hit flag
	ora .glowValuesFast,y	; Read pre-calculated glow values table with the glow type
	sta AnimationSpriteColour,x

.notGlowing

	dec AnimationSpeed,x
	bmi .doTick
	rts
.doTick
	lda AnimationSpeedReset,x
	sta AnimationSpeed,x

	; Run the animation code since they're on-screen
	inc AnimationSpriteFrameCount,x
	lda AnimationSpriteFrameCount,x
	cmp AnimationNumFrames,x
	bne .l1

	lda AnimationFlags,x
	and #AnimationFlags_DeleteAtEnd
	bne .delAnim

	lda AnimationFlags,x
	and #AnimationFlags_Cycle
	beq .noCycle

	lda #0
	sta AnimationSpriteFrameCount,x
	jmp .l1

.noCycle
	lda #127
	sta AnimationSpeed,x
	dec AnimationSpriteFrameCount,x
	; No need to update the sprite frame, use the last frame drawn instead
	rts

.l1
	clc
	adc #AnimationDefOffset_Frames
	tay
	lda AnimationAddrLo,x
	sta tempWork0
	lda AnimationAddrHi,x
	sta tempWork1
	lda (tempWork0),y
	clc
	adc #AnimationSpriteOffset
	sta AnimationSpriteFrame,x
	rts

.delAnim jmp .offScreenClearY



!source "SpritePosToScreenPosMem2.a"
EnemySpriteXPosToScreenCharPos = SpriteXPosToScreenCharPos

!zn
ScrollerPreGameCalcuation
	jsr UpdateMapToMaze
	ldx #0
	jsr MazeSolve_init
	jsr MapCreateZones
	jsr MapPlacesToZone
	rts

PlayerHealth !by 6


!zn
AnimationInit2
	lda #0
	sta Teleport_TimeToSwitchMap

	lda AnimationStopMusic
	beq .noStop
	jsr MusicPlayerStop
.noStop
	lda #0
	sta Enemy_PlayerAggression
	lda #PlayerHealthMax
	sta PlayerHealth

	; Fade up!
	lda #1
	ldx #0
	ldy #4
	jsr Fade_Init

	jsr CartSubGame_Init
	jsr UserInput_Init
	jsr PlayerInventory_Init
	jsr MapAnimations_Init
	jsr PlayerBullets_Init
	jsr PlayerSweep_Init
	jsr AutoDoor_Init
	jsr Battery_Init
	; Debug cheat to enable all batteries
!if 0 {
	jsr Battery_Install
	jsr Battery_Install

!if 0 {
	jsr Battery_AddTick
	jsr Battery_AddTick
	jsr Battery_AddTick
	jsr Battery_AddTick

	jsr Battery_AddTick
	jsr Battery_AddTick
	jsr Battery_AddTick
}
}

	jsr EnemyProcessActivationInit
	jsr TutorialHint_Init

	jsr EnemyMapClear
	jsr AnimationClear

	lda #$ff
	sta VIC2SpriteMulticolour
	lda SpriteFixedColours
	sta VIC2ExtraSpriteColour1
	lda SpriteFixedColours+1
	sta VIC2ExtraSpriteColour2

	lda #WantMazeSolve_Idle
	sta WantMazeSolveState

	jsr DynamicMemory_Init
	jsr AnimationMapEnemyInit
	jsr AnimationEnemiesIntoMap
	jsr AnimationProcessAllActivations

	lda #<ScorePanel_Score_Addr
	ldx #>ScorePanel_Score_Addr
	jsr ScoreSetAddress
	ldy #ScorePanel_Score_NumDigits
	jsr ScoreInit

	rts

!zn
.counter !by 0
AnimationProcessAllActivations
	lda #numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck
	sta .counter
.l1
	jsr EnemyProcessActivation
	dec .counter
	bpl .l1
	rts

!zn
AnimationEnemiesIntoMap
	; Init enemy blocked node state into the map, to stop enemies from moving into each other at the start
	ldx #2; Skip the player slot at the start (1+1 for the -1,x adjustment)
.l2
	lda EnemyType-1,x
	bmi .o1
	tay
	lda EnemyTemplate_Health,y
	sta EnemyHealth-1,x

	lda EnemyPositionsX-1,x
	sta tempWork0
	lda EnemyPositionsY-1,x
	sta tempWork1

	txa
	pha

	ldx tempWork0
	ldy tempWork1
	jsr GetMazeNodesIndex
	sta tempWork0
	stx tempWork1
	ldy #Node_isBlocked
	lda (tempWork0),y
	ora #Node_isBlocked_Enemy
	sta (tempWork0),y

	pla
	tax

.o1
	inx
	cpx #MaxEnemies
	bne .l2
	rts


!zn
AnimationClear
	ldx #Multiplex_items-1
.l1
	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x
	dex
	bpl .l1
	rts


!zn
AnimationClearDynamics
	ldx #Multiplex_items-1
.l1
	ldy AnimationActiveSlot,x
	beq .isSimple

	lda #0
	sta AnimationActiveSlot,x

	lda #-1
	sta EnemyToAnimationIndex-1,y

.isSimple
	lda #$ff
	sta AnimationYPos,x
	dex
	bpl .l1
	rts



!zn
AnimationMapEnemyInit
	lda #0
	sta scrollerRealMovementXPixelsNeg
	sta scrollerRealMovementYPixelsNeg
	sta DisplayingSubGame

	jsr ScrollerInitVariables

	lda #4
	sta frameScrollX
	sta frameScrollY

	; Init the screen to map boundary rectangle
	lda #<-(VIC2SpriteXBorderLeft38-7+4)
	sta Animation_MapPosXLo
	lda #>-(VIC2SpriteXBorderLeft38-7+4)
	sta Animation_MapPosXHi
	lda #<-(VIC2SpriteYBorderTop24-7+4)
	sta Animation_MapPosYLo
	lda #>-(VIC2SpriteYBorderTop24-7+4)
	sta Animation_MapPosYHi
	
	; Init player position in the enemy DB
	ldx EnemyPositionsX
	lda MapTileToFineXLo,x
	sta EnemyPositionsXLo
	lda MapTileToFineXHi,x
	sta EnemyPositionsXHi

	ldx EnemyPositionsY
	lda MapTileToFineYLo,x
	sta EnemyPositionsYLo
	lda MapTileToFineYHi,x
	sta EnemyPositionsYHi

	; Setup the camera so the player is on screen
	; Calculate a sensible scrollMapHX, scrollMapHY from EnemyPositionsX, EnemyPositionsY
	lda EnemyPositionsX
	sec
	sbc #5
	bcs .o2
	lda #0
.o2
	cmp #30
	bcc .o2b
	lda #30
.o2b
	sta scrollMapHX

	lda EnemyPositionsY
	sec
	sbc #2
	bcs .o3
	lda #0
.o3
!ifdef Scroller_FullScreen {
	cmp #19
	bcc .o3b
	lda #19
} else {
	cmp #20
	bcc .o3b
	lda #20
}
.o3b
	sta scrollMapHY

	; Then adjust Animation_MapPosXLo, Animation_MapPosXHi, Animation_MapPosYLo, Animation_MapPosYHi with scrollMapHX, scrollMapHY
	ldx scrollMapHX
	beq .o4
.l3
	lda Animation_MapPosXLo
	clc
	adc #32
	sta Animation_MapPosXLo
	bcc .l4
	inc Animation_MapPosXHi
.l4
	dex
	bne .l3
.o4

	ldx scrollMapHY
	beq .o5
.l5
	lda Animation_MapPosYLo
	clc
	adc #32
	sta Animation_MapPosYLo
	bcc .l6
	inc Animation_MapPosYHi
.l6
	dex
	bne .l5
.o5

	jsr Camera_Init

	rts



!zn
; Finds a free slot and X contains the index with carry clear. If no index is free then carry is set.
; Exit
; A		Updated
; X		Updated
; Y		Preserved
; CS	No slot
; CC	Slot found, index in X
AnimationFindFreeSlot
	ldx #0
.l1
	lda AnimationActiveSlot,x
	bne .notFree
	lda AnimationYPos,x
	cmp #$ff
	bne .notFree

	; Free slot!
	clc
	rts

.notFree
	inx
	cpx #Multiplex_items
	bne .l1

	; All used!
	sec
	rts


!macro Animation_CommonInit_Addr {
	sta AnimationSpriteFrameCount,x
	sta AnimationEnemyFlags,x

	lda AnimationTypeTableLo,y
	sta tempWork0
	sta AnimationAddrLo,x
	lda AnimationTypeTableHi,y
	sta tempWork1
	sta AnimationAddrHi,x
}

!macro Animation_CommonInit_Flags {
	ldy #AnimationDefOffset_Flags
	lda (tempWork0),y
	sta AnimationFlags,x
}

!macro Animation_CommonInit_SpeedFrames {
	ldy #AnimationDefOffset_Speed
	lda (tempWork0),y
	sta AnimationSpeed,x
	sta AnimationSpeedReset,x

	ldy #AnimationDefOffset_Frames
	lda (tempWork0),y
	clc
	adc #AnimationSpriteOffset
	sta AnimationSpriteFrame,x

	ldy #AnimationDefOffset_NumFrames
	lda (tempWork0),y
	sta AnimationNumFrames,x
}

!zn
; Initialises an animation index with a type
; Entry
; X		Animation index
; Y		Animation type
; Exit
; A		Updated
; Y		Updated
; X		Preserved
; tempWork0/tempWork1	Updated
AnimationInitWithType
	lda #0
	sta AnimationSimpleMoveX,x
	sta AnimationSimpleMoveY,x
	+Animation_CommonInit_Addr

	+Animation_CommonInit_Flags
	and #AnimationFlags_InheritColour
	bne .noColourUpdate

	ldy #AnimationDefOffset_Colour
	lda (tempWork0),y
	sta AnimationSpriteColour,x
	sta AnimationSpriteColourBackup,x

.noColourUpdate

	+Animation_CommonInit_SpeedFrames

	rts



!zn
; Mutates an existing animation index to a new type
; Does not update movement speed or colour
; Entry
; X		Animation index
; Y		Animation type
; Exit
; A		Updated
; Y		Updated
; X		Preserved
; tempWork0/tempWork1	Updated
AnimationMutateToType
	lda #0
	+Animation_CommonInit_Addr

	+Animation_CommonInit_Flags

	+Animation_CommonInit_SpeedFrames

	rts

!zn
.justExit
	rts
; Entry:
; A = Amount of energy to subtract from the player
; Exit
; A/Y = Trashed
; X = Preserved
AnimationHitPlayerLogic
!ifdef RedirectHandleUserInput {} else {
	rts
}
	; Debug cheat
;	rts


	sta .sm1+1

	; Turn off the player health check due to various game events
	lda Teleport_TimeToSwitchMap
	bne .justExit

	lda ScrollerExitMainLineCounter
	bne .justExit

	txa
	pha

	lda PlayerHealth
	sec
.sm1	sbc #0
	bpl .notNeg

	sta PlayerHealth

	; Check up to 2 batteries
	lda #2
	sta tempWork1

.al2
	jsr Battery_Drain
	cmp #0
	beq .noBattery1

	sta tempWork0

	; TODO: Add suitable sound effect for draining a battery
	; TODO: Add a graphical effect?
	lda #3
	jsr SFXInit

.al1
	jsr PlayerAddHealthTick
	dec tempWork0
	bne .al1

	lda PlayerHealth
	bpl .notNeg

	dec tempWork1
	bne .al2

.noBattery1

	; Kill the player
	; Use this explosion type so that the player animation slot isn't freed and then used by an enemy during the player death
	ldy #12
	ldx #0
	jsr AnimationMutateToType
	lda #0
	jsr SFXInit
	lda #1
	jsr SFXInit

	jsr AnimationFindFreeSlot
	bcs .noSlot1
	ldy #10
	jsr AnimationInitWithType

	lda AnimationXPosLo
	sta AnimationXPosLo,x
	lda AnimationXPosHi
	sta AnimationXPosHi,x
	lda AnimationYPos
	sta AnimationYPos,x
	lda AnimationSpriteColour
	sta AnimationSpriteColour,x
	lda #-1
	sta AnimationSimpleMoveY,x
.noSlot1

	jsr AnimationFindFreeSlot
	bcs .noSlot2
	ldy #11
	jsr AnimationInitWithType

	lda AnimationXPosLo
	sta AnimationXPosLo,x
	lda AnimationXPosHi
	sta AnimationXPosHi,x
	lda AnimationYPos
	sta AnimationYPos,x
	lda AnimationSpriteColour
	sta AnimationSpriteColour,x
	lda #1
	sta AnimationSimpleMoveY,x
.noSlot2

	lda #150
	sta ScrollerExitMainLineCounter

	lda #0
.notNeg
	sta PlayerHealth

	lda #0
	ldx #PlayerHealthMax
.l1
	cpx PlayerHealth
	beq .l2
	dex
	sta COLOURRAM + (ScorePanelEnergy_YPos * VIC2ScreenCharsWidth) + ScorePanelEnergy_XPos , x
	jmp .l1
	
.l2

	pla
	tax
	rts

DetectPlayer_AutoDoorChars
	lda ScrollerExitMainLineCounter
	bne .retNoDoor
	lda DisplayingSubGame
	bne .retNoDoor

	ldx EnemyToAnimationIndex
	bmi .retNoDoor
	+EnemySpritePosToCharacterLookup .retNoDoor
	lda (tempWork0),y
	cmp #MapSolidChars
	bcs .lethalDoor
	cmp #AutoDoorChars_Min
	bcc .retNoDoor
	cmp #AutoDoorChars_Max
	bcs .retNoDoor

.lethalDoor
	; Very lethal doors
	lda #1
	jsr AnimationHitPlayerLogic

.retNoDoor
	rts

!zn {
; Exit:
; X = Preserved
CheckGeneratorDamage
	stx .smx+1

	ldx EnemyPositionsY-1,y
	stx .smEX+1
	lda EnemyPositionsX-1,y
	tay
	sty .smEY+1

	lda MapTabL,x
	sta tempWork1
	lda MapTabH,x
	sta tempWork2

	lda (tempWork1),y
	cmp #MapTile_GeneratorOpen1
	beq .doDamage
	cmp #MapTile_GeneratorOpen2
	beq .doDamage
	cmp #MapTile_GeneratorOpen3
	beq .doDamage
	cmp #MapTile_GeneratorOpen4
	beq .doDamage

	jmp .smx

.doDamage
;	inc VIC2BorderColour

	clc
	adc #1
	sta (tempWork1),y

	ldx ScrollerBankVisible
	stx tempWork0
.smEX ldx #0
.smEY ldy #0
	jsr UpdateMapBlockOnScreenInternal

.smx ldx #0
	rts
}

!zn
; Find the next enemy animation slot that isn't the same as in reg Y
; Entry:
; Y = The animation index not the filter
; Exit:
; CC = Found
; CS = Not found
.lastXIndex !by 0
.numToSearch !by 0
Animation_FindOtherEnemyNotInY
	sty .smFilter+1
	lda Multiplex_MaxSpr
	sta .numToSearch
	dec .numToSearch

	ldx .lastXIndex
.l1
	dec .numToSearch
	bpl .l2
	stx .lastXIndex
	sec
	rts

.l2
	inx
	cpx Multiplex_MaxSpr
	bcc .l3
	ldx #0
.l3
.smFilter	cpx #0
	beq .l1

	lda AnimationActiveSlot,x
	beq .l1

	; It's in the enemy DB
	cpx EnemyToAnimationIndex
	beq .l1

	; It's not the player
	lda AnimationEnemyFlags,x
	and #EnemyFlags_IsCaptured
	bne .l1

	stx .lastXIndex
	; It's not captured
	clc
	rts
