* = OtherCodeMemory

; Code here can be moved back to before GameSpecificCode_End in Citadel2Entry_Game.a if needed

!source "FingerPrint.a"
; Misc data at the end of the code
!source "asm/Score.a"
!source "asm/AutoDoors.a"
!source "asm/Fade.a"
!source "asm/EnemyData.a"
!source "asm/Charger.a"

OtherCodeMemory_End = *
OtherCodeMemory_Size = OtherCodeMemory_End - OtherCodeMemory
OtherCodeMemory_Free = MarkBeginData - OtherCodeMemory_End


; Free space since the screen used for the status bar doesn't render anything up at the top of the screen
; No maze calculation results when the sub-game is active
TraceBackResultBuffer	= $c00 + VIC2ScreenCharsWidth
BackupAnimationMemParts	= TraceBackResultBuffer + 192
; 4*Multiplex_items due to Citadel2Optimisations.a defining AnimationActiveSlot/AnimationXPosLo/AnimationXPosHi/AnimationYPos in zeropage
BackupAnimationMemPartsSize = (4*Multiplex_items)
BackupAnimationMem		= BackupAnimationMemParts + BackupAnimationMemPartsSize

* = DynamicMemoryData
!fill DynamicMemorySize , ' '

; Temporary calculation area for the maze screen before routing starts
; Also later calculated to be the zone lookup map
Maze = *
ZoneMap = Maze
; #			Wall
; <space>	Open area
; <Number>	Move cost/aversion
!fill (MazeWidth*MazeHeight) , ' '
MazeEnd = *

* = MarkBeginData
; Data that doesn't need to be accessed between levels

; MazeSolve.a MazeNodes goes here
MazeNodes
!source "FingerPrint.a"
;!fill (MazeWidth* MazeHeight * Node__size) , 0
* = MazeNodes + (MazeWidth* MazeHeight * Node__size)

Animation_StartMem = *
!source "asm/AnimationsMemory.a"
Animation_EndMem = *
Animation_MemSize = Animation_EndMem - Animation_StartMem

;!if (BackupAnimationMem + Animation_MemSize) > ($0c00+20*40) { !error "Animation backup overwrites important data in ghost screen" }
!if (BackupAnimationMem + Animation_MemSize + BackupAnimationMemPartsSize) > ($0c00+20*40) { !error "Animation backup overwrites important data in ghost screen" }

!source "asm/AnimationsData.a"

; The end of the data files in memory
MarkEndData = *


; From here this point is decompressed level data that can be updated between levels
; Reserve empty space for level data

* = LevelDataStart
!source "FingerPrint.a"
	!fill OtherCodeMemory - * , 0

;*=LevelDataStart
;!fill $1000
;!bin "DataLevel1.prg" ,, 2
!source "DataAutoDefsScorePanel.a"
!source "DataAutoDefs.a"


;* = MusicPlayerInit
;!bin "MusicAndSFX.prg",,$2	; Remember to skip any lo/hi file information by using $2
;!bin "Sound\Citadel2_Title.prg",,2




; VIC Graphics data
*=CharData
!bin "Level1.ctm" , $800 , $14



*=SpriteData
!bin "LevelSprites.spd" , MaxSpriteNumber*64 , $9
