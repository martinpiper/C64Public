!ifdef RedirectHandleUserInput {
!zn
.joystickDirectionToXVel !by  0 ,  0 ,  0 ,  0 ,  1 ,  1 ,  1 ,  1 , -1 , -1 , -1 , -1 ,  0 ,  0 ,  0 ,  0
.joystickDirectionToYVel !by  0 ,  1 , -1 ,  1 ,  0 ,  1 , -1 ,  0 ,  0 ,  1 , -1 ,  0 ,  0 ,  1 , -1 ,  0

.joystickDirectionToXVelRear !by  0 ,  0 ,  0 ,  0 , -1 , -1 , -1 , -1 ,  1 ,  1 ,  1 ,  1 ,  0 ,  0 ,  0 ,  0
.joystickDirectionToYVelRear !by  0 , -1 ,  1 , -1 ,  0 , -1 ,  1 ,  0 ,  0 , -1 ,  1 ,  0 ,  0 , -1 ,  1 ,  0

.joystickDirectionToXVelRot90 !by  0 , -1 ,  1 , -1 ,  0 , -1 ,  1 ,  0 ,  0 , -1 ,  1 ,  0 ,  0 , -1 ,  1 ,  0
.joystickDirectionToYVelRot90 !by  0 ,  0 ,  0 ,  0 ,  1 ,  1 ,  1 ,  1 , -1 , -1 , -1 , -1 ,  0 ,  0 ,  0 ,  0

.joystickDirectionToXVelRot270 !by  0 ,  1 , -1 ,  1 ,  0 ,  1 , -1 ,  0 ,  0 ,  1 , -1 ,  0 ,  0 ,  1 , -1 ,  0
.joystickDirectionToYVelRot270 !by  0 ,  0 ,  0 ,  0 , -1 , -1 , -1 , -1 ,  1 ,  1 ,  1 ,  1 ,  0 ,  0 ,  0 ,  0

.joystickValidDirection !by   0 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 , -1 , -1 , -1 , -1 ,  0 ,  1 ,  1 ,  0

.toggle !by 0
!ifdef DebugEnemyBullet {
.playerSpeed !by 1
} else {
.playerSpeed !by 2
}
.fireCounter		!by 0
.fireCounterDelay	!by 10
.enableRearFire		!by 0
.enableSideFire		!by 0
.bulletLifetime		!by 10
.lockedDirection	!by JoystickBits_AllDirections
.wasFire			!by 0
UserInput_LastFollowDirectionX	!by 1
UserInput_LastFollowDirectionY	!by 0
UserInput_LastFollowPosX			!by 0
UserInput_LastFollowPosY			!by 0



UserInput_Init
	lda #0
	sta .fireCounter
	sta .enableRearFire
	sta .enableSideFire
	sta .wasFire
	lda #16
	sta .fireCounterDelay
	lda #10
	sta .bulletLifetime

	; MPi: TODO: Need MLA here
	lda #1
	sta UserInput_LastFollowDirectionX
	lda #0
	sta UserInput_LastFollowDirectionY


	lda #JoystickBits_AllDirections
	sta .lockedDirection

	jsr CartSubGame_ResetEnterTimer
	jsr Teleport_ResetEnterTimer
	jsr CaptureProbe_Init

	jsr CalculateFollowPosition

	rts

.exitingGame
	lda #JoystickBits_AllDirections
	sta .lockedDirection
	jsr UpdateScreenScrollCamera
	jsr CameraClampVelocity
	jsr CameraClampMapBox

.exitQuick
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts

.lSubGameUpdate jmp CartSubGameUpdate
.lnoSubGameState jmp .noSubGameState
.lsubGameStateSuccess jmp .subGameStateSuccess

.movementTime	!word 0

HandleUserInput
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	jsr CaptureProbe_GeneralTick
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_White
	sta VIC2BorderColour
}
	jsr CalculateFollowPosition
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}

	; Increase any batteries that we might have
	lda Battery_NumInstalled
	beq .gs1
	lda .lockedDirection
	and #JoystickBits_AllDirections
	cmp #JoystickBits_AllDirections
	bne .gotSomeMovement
	lda #0
	sta .movementTime
	sta .movementTime+1
.gotSomeMovement
	inc .movementTime
	bne .gs1
	inc .movementTime+1
	lda .movementTime+1
	cmp #Battery_RechargeDelay
	bcc .gs1
	lda #0
	sta .movementTime
	sta .movementTime+1
	jsr Battery_AddTick
.gs1

	lda #0
	sta frameTargetVelX
	sta frameTargetVelY

	lda Teleport_TimeToSwitchMap
	bne .exitQuick

	jsr Joystick_Read
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Cyan
	sta VIC2BorderColour
}
	jsr HandleKeyboard
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Purple
	sta VIC2BorderColour
}



	lda ScrollerExitMainLineCounter
	bne .lexitingGame

	lda DisplayingSubGame
	bne .lSubGameUpdate

	; Once the sub-game finishes then pull out the state
	lda SubGame_ExitState
	cmp #SubGameExit_Null
	beq .lnoSubGameState

	; Reset it first
	ldx #SubGameExit_Null
	stx SubGame_ExitState

	cmp #SubGameExit_Success
	beq .l2subGameStateSuccess

	cmp #SubGameExit_Failure
	beq .lsubGameStateFailure

	jmp .noSubGameState
.lexitingGame jmp .exitingGame
.l2subGameStateSuccess jmp .subGameStateSuccess

.runProbe
	jsr CaptureProbe_HandleProbe
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts

.lsubGameStateFailure
	lda #2
	jsr AnimationHitPlayerLogic

.noSubGameState
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Green
	sta VIC2BorderColour
}
	jsr UpdateScreenScrollCamera
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Blue
	sta VIC2BorderColour
}
	jsr CameraClampVelocity
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Yellow
	sta VIC2BorderColour
}
	jsr CameraClampMapBox
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Orange
	sta VIC2BorderColour
}
	jsr CheckCharger
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Brown
	sta VIC2BorderColour
}

	; Don't run this code when busy in the frame
	lda frameIsOrWasBusy
	bne .noSweep2

	jsr AutoDoor_Iterate

!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_LightRed
	sta VIC2BorderColour
}


	; Don't run this sweep every frame, so use this counter instead
	lda DynamicMemory_BlockSweepCount
	and #1
	cmp #0
	bne .noSweep1
	jsr PlayerSweep_MapClosedGenerators
.noSweep1
	lda DynamicMemory_BlockSweepCount
	and #3
	cmp #1
	bne .noSweep2

	; Limit the number of enemies spawned with those already on screen
	lda EnemiesOnScreenCount
	cmp #MaxEnemyOnScreenBeforeSpawn
	bcs .noSweep2

	jsr PlayerSweep_MapOpenGenerators
.noSweep2
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_DarkGrey
	sta VIC2BorderColour
}

	lda CaptureProbe_RunningProbe
	bpl .runProbe

	; Fire was pressed previous frame
	lda #JoystickBits_Fire
	bit JoystickA_Processed
	beq .gotFire1
	lda #0
	sta .wasFire
	jmp .overFirePositiveEdge
.gotFire1
	lda .wasFire
	bne .overFirePositiveEdge
	inc .wasFire

	; Joystick and locked direction is empty?
	lda JoystickA_Processed
	and .lockedDirection
	and #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	cmp #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	bne .notStationary3

	jsr CaptureProbe_CheckAction
	jmp .notStationary3b

.notStationary3
	jsr CaptureProbe_ResetEnterTimer

.notStationary3b

.overFirePositiveEdge
	jsr CaptureProbe_TickEnterTimer

	lda #JoystickBits_Fire
	bit JoystickA_Processed
	beq .gotFire

	ldy .lockedDirection

	lda JoystickA_Processed
	sta .lockedDirection

	lda MapBlockAlignedMovement
	bne .doAligned1
	jmp .skipAligned1
.doAligned1

	lda EnemyPositionsYLo
	and #31
	cmp #6
	beq .canDoHorizontal

	; Stop horizontal movement from being registered
	lda .lockedDirection
	ora #JoystickBits_Left | JoystickBits_Right
	sta .lockedDirection

	and #JoystickBits_Up | JoystickBits_Down
	cmp #JoystickBits_Up | JoystickBits_Down
	bne .canDoHorizontal

	; Restore last movement if there isn't anything pressed
	tya
	sta .lockedDirection

.canDoHorizontal

	lda EnemyPositionsXLo
	and #31
	cmp #4
	beq .canDoVertical

	; Stop vertical movement from being registered
	lda .lockedDirection
	ora #JoystickBits_Up | JoystickBits_Down
	sta .lockedDirection

	and #JoystickBits_Left | JoystickBits_Right
	cmp #JoystickBits_Left | JoystickBits_Right
	bne .canDoVertical

	; Restore last movement if there isn't anything pressed
	tya
	sta .lockedDirection

.canDoVertical

!if 0 {
	; Remove any diagonals by restoring the old movement if detected
	lda #JoystickBits_Left | JoystickBits_Up
	bit .lockedDirection
	bne .ok1
	tya
	sta .lockedDirection
	jmp .gotFire
.ok1
	lda #JoystickBits_Left | JoystickBits_Down
	bit .lockedDirection
	bne .ok2
	tya
	sta .lockedDirection
	jmp .gotFire
.ok2
	lda #JoystickBits_Right | JoystickBits_Up
	bit .lockedDirection
	bne .ok3
	tya
	sta .lockedDirection
	jmp .gotFire
.ok3
	lda #JoystickBits_Right | JoystickBits_Down
	bit .lockedDirection
	bne .ok4
	tya
	sta .lockedDirection
	jmp .gotFire
.ok4
}
.skipAligned1	;<< MapBlockAlignedMovement

.gotFire

.beginPlayerMovement

	; Update the velocity at which we want to travel
	lda #JoystickBits_Right
	bit .lockedDirection
	bne .lo1


	jsr CaptureProbe_ResetEnterTimer

	; Check the bounding chars in the direction of travel
	lda MapBlockAlignedMovement
	beq .noAlignedTweak1

	lda EnemyPositionsXLo
	clc
	adc #28
	jmp .overAlignedTweak1
.lo1 jmp .o1

.noAlignedTweak1
	lda EnemyPositionsXLo
	clc
	adc #24

.overAlignedTweak1

	sta tempWork0
	lda EnemyPositionsXHi
	adc #0
	sta tempWork1
	jsr DivideBy32

	lda EnemyPositionsYLo
	sta tempWork2
	lda EnemyPositionsYHi
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o1Stop

!if 0 {
	lda EnemyPositionsYLo
	clc
	adc #10
	sta tempWork2
	lda EnemyPositionsYHi
	adc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o1Stop
}

	lda MapBlockAlignedMovement
	beq .noAlignedTweak2

	lda EnemyPositionsYLo
	clc
	adc #24
	jmp .overAlignedTweak2

.noAlignedTweak2
	lda EnemyPositionsYLo
	clc
	adc #20

.overAlignedTweak2

	sta tempWork2
	lda EnemyPositionsYHi
	adc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o1Stop

	lda CameraNotPushX
	beq .skipPush7
	lda frameTargetVelX
	sec
	sbc .playerSpeed
	sta frameTargetVelX
.skipPush7

	; Set the follow pos based on the directional input
;	lda #1
;	sta UserInput_LastFollowDirectionX
;	lda #0
;	sta UserInput_LastFollowDirectionY


	lda EnemyPositionsXLo
	clc
	adc .playerSpeed
	sta EnemyPositionsXLo
	bcc .oo1
	inc EnemyPositionsXHi
.oo1
	lda MapBlockAlignedMovement
	beq .o1
	jmp .nowTestFire
.o1Stop
	lda .lockedDirection
	ora #JoystickBits_Right
	sta .lockedDirection
.o1
	lda #JoystickBits_Left
	bit .lockedDirection
	bne .lo2


	jsr CaptureProbe_ResetEnterTimer
	; Check the bounding chars in the direction of travel
	lda MapBlockAlignedMovement
	beq .noAlignedTweak3

	lda EnemyPositionsXLo
	sec
	sbc #6
	jmp .overAlignedTweak3
.lo2 jmp .o2

.noAlignedTweak3
	lda EnemyPositionsXLo
	sec
	sbc #4

.overAlignedTweak3

	sta tempWork0
	lda EnemyPositionsXHi
	sbc #0
	sta tempWork1
	jsr DivideBy32

	lda EnemyPositionsYLo
	sta tempWork2
	lda EnemyPositionsYHi
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o2Stop
	
!if 0 {
	lda EnemyPositionsYLo
	clc
	adc #10
	sta tempWork2
	lda EnemyPositionsYHi
	adc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o2Stop
}

	lda MapBlockAlignedMovement
	beq .noAlignedTweak4

	lda EnemyPositionsYLo
	clc
	adc #24
	jmp .overAlignedTweak4

.noAlignedTweak4
	lda EnemyPositionsYLo
	clc
	adc #20

.overAlignedTweak4

	sta tempWork2
	lda EnemyPositionsYHi
	adc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o2Stop

	lda CameraNotPushX
	beq .skipPush8
	lda frameTargetVelX
	clc
	adc .playerSpeed
	sta frameTargetVelX
.skipPush8

	; Set the follow pos based on the directional input
;	lda #-1
;	sta UserInput_LastFollowDirectionX
;	lda #0
;	sta UserInput_LastFollowDirectionY


	lda EnemyPositionsXLo
	sec
	sbc .playerSpeed
	sta EnemyPositionsXLo
	bcs .oo2
	dec EnemyPositionsXHi
.oo2
	lda MapBlockAlignedMovement
	beq .o2
	jmp .nowTestFire
.o2Stop
	lda .lockedDirection
	ora #JoystickBits_Left
	sta .lockedDirection
.o2
	lda #JoystickBits_Down
	bit .lockedDirection
	bne .o3


	jsr CaptureProbe_ResetEnterTimer
	; Check the bounding chars in the direction of travel
	lda EnemyPositionsXLo
	sec
	sbc #2
	sta tempWork0
	lda EnemyPositionsXHi
	sbc #0
	sta tempWork1
	jsr DivideBy32

	lda MapBlockAlignedMovement
	beq .noAlignedTweak5

	lda EnemyPositionsYLo
	clc
	adc #26
	jmp .overAlignedTweak5

.noAlignedTweak5
	lda EnemyPositionsYLo
	clc
	adc #22

.overAlignedTweak5

	sta tempWork2
	lda EnemyPositionsYHi
	adc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o3Stop
	
!if 0 {
	lda EnemyPositionsXLo
	clc
	adc #10
	sta tempWork0
	lda EnemyPositionsXHi
	adc #0
	sta tempWork1
	jsr DivideBy32

	jsr .testPosition
	bne .o3Stop
}

	lda EnemyPositionsXLo
	clc
	adc #22
	sta tempWork0
	lda EnemyPositionsXHi
	adc #0
	sta tempWork1
	jsr DivideBy32

	jsr .testPosition
	bne .o3Stop

	lda CameraNotPushY
	beq .skipPush9
	lda frameTargetVelY
	sec
	sbc .playerSpeed
	sta frameTargetVelY
.skipPush9

	; Set the follow pos based on the directional input
;	lda #0
;	sta UserInput_LastFollowDirectionX
;	lda #1
;	sta UserInput_LastFollowDirectionY


	lda EnemyPositionsYLo
	clc
	adc .playerSpeed
	sta EnemyPositionsYLo
	bcc .oo3
	inc EnemyPositionsYHi
.oo3
	lda MapBlockAlignedMovement
	beq .o3
	jmp .nowTestFire
.o3Stop
	lda .lockedDirection
	ora #JoystickBits_Down
	sta .lockedDirection
.o3
	lda #JoystickBits_Up
	bit .lockedDirection
	bne .o4


	jsr CaptureProbe_ResetEnterTimer
	; Check the bounding chars in the direction of travel
	lda EnemyPositionsXLo
	sec
	sbc #2
	sta tempWork0
	lda EnemyPositionsXHi
	sbc #0
	sta tempWork1
	jsr DivideBy32

	lda MapBlockAlignedMovement
	beq .noAlignedTweak6

	lda EnemyPositionsYLo
	sec
	sbc #8
	jmp .overAlignedTweak6

.noAlignedTweak6
	lda EnemyPositionsYLo
	sec
	sbc #2

.overAlignedTweak6

	sta tempWork2
	lda EnemyPositionsYHi
	sbc #0
	sta tempWork3
	jsr DivideBy32_2

	jsr .testPosition
	bne .o4Stop
	
!if 0 {
	lda EnemyPositionsXLo
	clc
	adc #10
	sta tempWork0
	lda EnemyPositionsXHi
	adc #0
	sta tempWork1
	jsr DivideBy32

	jsr .testPosition
	bne .o4Stop
}

	lda EnemyPositionsXLo
	clc
	adc #22
	sta tempWork0
	lda EnemyPositionsXHi
	adc #0
	sta tempWork1
	jsr DivideBy32

	jsr .testPosition
	bne .o4Stop

	lda CameraNotPushY
	beq .skipPush10
	lda frameTargetVelY
	clc
	adc .playerSpeed
	sta frameTargetVelY
.skipPush10

	; Set the follow pos based on the directional input
;	lda #0
;	sta UserInput_LastFollowDirectionX
;	lda #-1
;	sta UserInput_LastFollowDirectionY


	lda EnemyPositionsYLo
	sec
	sbc .playerSpeed
	sta EnemyPositionsYLo
	bcs .oo4
	dec EnemyPositionsYHi
.oo4
	lda MapBlockAlignedMovement
	beq .o4
	jmp .nowTestFire
.o4Stop
	lda .lockedDirection
	ora #JoystickBits_Up
	sta .lockedDirection
.o4
.nowTestFire
	jsr CameraClampVelocity
	jsr CameraClampMapBox


	lda #JoystickBits_Fire
	bit JoystickA_Processed
	beq .no5
.lo5	jmp .o5
.no5

	lda #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	and .lockedDirection
	cmp #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	bne .notStationary
	jsr CheckForTerminalsAndSwitches
	beq .lo5
.notStationary

	lda JoystickA_Processed
	and #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	cmp #(JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right)
	bne .notStationary2

	jsr CheckTeleportAction
	beq .lo5

.notStationary2

	lda JoystickA_Processed
	and #15
	tay
	lda .joystickValidDirection,y
	bne .isValid
	jmp .o5
.isValid
	sty .smjd+1

	ldy EnemyToAnimationIndex
	bpl .isValid2
	jmp .o5
.isValid2

	; Rate limit the firing speed
	dec .fireCounter
	bmi .timeOK
	jmp .oo5
.timeOK
	lda .fireCounterDelay
	sta .fireCounter

	lda #2
	jsr EnemyAddPlayerAggression

	jsr AllocatePlayerBullet
	bcc .doFire
.lo5b	jmp .o5
.doFire

	lda #3
	jsr SFXInit

	; Fire bullets!
	stx tempWork2

	lda AnimationYPos,y
	sec
	sbc topScreenScrollY
	tax
	lda PlayerSpriteYPosToScreenCharPos,x
	bmi .lo5b
	ldx tempWork2
	sta PlayerBulletsY,x
	sta tempWork4

	lda topScreenScrollX
	lsr
	sta tempWork0

	lda AnimationXPosHi,y
	lsr
	lda AnimationXPosLo,y
	ror
	sec
	sbc tempWork0
	tax
	lda PlayerSpriteXPosToScreenCharPos,x
	bmi .lo5b
	ldx tempWork2
	sta PlayerBulletsX,x
	sta tempWork5

.smjd	ldy #0
	; Set the follow pos based on the directional input
	lda .joystickDirectionToXVel,y
	sta PlayerBulletsXVel,x
	sta UserInput_LastFollowDirectionX
	lda .joystickDirectionToYVel,y
	sta PlayerBulletsYVel,x
	sta UserInput_LastFollowDirectionY


;	lda #VIC2Multicolour_Yellow
;	sta PlayerBulletsCol,x
	lda .bulletLifetime
	sta PlayerBulletsTime,x

	inc .smAlternate2+1
.smAlternate2	lda #1
	and #1
	beq .s3

	; Rear fire
	lda .enableRearFire
	beq .s3
	jsr AllocatePlayerBullet
	bcc .doFire2
	jmp .o5
.doFire2

	lda tempWork5
	sta PlayerBulletsX,x
	lda tempWork4
	sta PlayerBulletsY,x
	lda .joystickDirectionToXVelRear,y
	sta PlayerBulletsXVel,x
	lda .joystickDirectionToYVelRear,y
	sta PlayerBulletsYVel,x
;	lda #VIC2Multicolour_Yellow
;	sta PlayerBulletsCol,x
	lda .bulletLifetime
	; Rear fire has half the lifetime
	lsr
	sta PlayerBulletsTime,x

.s3

	; Side fire
	lda .enableSideFire
	beq .s4
	jsr AllocatePlayerBullet
	bcc .doFire3
	jmp .o5
.doFire3

	inc .smAlternate1+1
.smAlternate1	lda #1
	and #1
	beq .s1

	lda .joystickDirectionToXVelRot90,y
	sta PlayerBulletsXVel,x
	lda .joystickDirectionToYVelRot90,y
	sta PlayerBulletsYVel,x
	jmp .s2
.s1
	lda .joystickDirectionToXVelRot270,y
	sta PlayerBulletsXVel,x
	lda .joystickDirectionToYVelRot270,y
	sta PlayerBulletsYVel,x
.s2

	lda tempWork5
	sta PlayerBulletsX,x
	lda tempWork4
	sta PlayerBulletsY,x
;	lda #VIC2Multicolour_Yellow
;	sta PlayerBulletsCol,x
	lda .bulletLifetime
	; Side fire has half the lifetime
	lsr
	sta PlayerBulletsTime,x

.s4
	jmp .oo5

.o5
	dec .fireCounter
	bpl .oo5
	; Immediate fire next valid direction
	lda #0
	sta .fireCounter
.oo5

	lda #JoystickBits_Fire
	bit JoystickA_Processed
	beq .fireHeldDown
.resetSubGameTimer
	jsr CartSubGame_ResetEnterTimer
	jsr Teleport_ResetEnterTimer
.fireHeldDown
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts


.testPosition
	ldx tempWork0
	ldy tempWork2
	jsr GetMazeNodesIndex
	sta tempWork4
	stx tempWork5

	ldy #Node_isBlocked
	lda (tempWork4),y
	and #Node_isBlocked_Wall | Node_isBlocked_AutoDoor
	rts

!source "asm/PlayerSpritePosTables.a"

; Will check MapTerminalToDoor with SubGame_ExitStateX/Y and modify the map and the maze node blocked state
.ldtEnd jmp .dtEnd
.subGameStateSuccess
	jsr CartSubGame_MakeMoreDifficult
	lda SubGamePickPos
	bmi .doDoor
	; TODO: Different weapon types or health upgrade etc

	cmp #0
	bne .notCPU

	jsr CartSubGame_Init
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts

.notCPU
	cmp #1
	bne .notBattery

	jsr PlayerAddHealthTick
	jsr PlayerAddHealthTick
	jsr PlayerAddHealthTick
	jsr PlayerAddHealthTick

	jsr Battery_Install

!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts
.notBattery
	; The rest of the values have various weapons combinations

	lda SubGamePickPos
	and #1
	beq .ow1

	; For now this increases the weapon fire rate
	dec .fireCounterDelay

.ow1

	lda SubGamePickPos
	and #2
	beq .ow2

	; And the bullet range
	inc .bulletLifetime

.ow2

	lda SubGamePickPos
	and #4
	beq .ow3

	; Debug: Progressively add read and then side fire
	lda .enableRearFire
	bne .e2
	inc .enableRearFire
	jmp .e1
.ow3
.e2
	lda .enableSideFire
	bne .e1
	inc .enableSideFire
.e1
!ifdef HandleUserInput_DebugFineTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts

.ldt2 jmp .dt2

.doDoor
	; Force the zone cache to be invalidated when doors open or close
	lda #-1
	sta ZoneMapStartCached

	lda #<MapTerminalToDoor
	sta tempWork0
	lda #>MapTerminalToDoor
	sta tempWork1
.dt1
	; Check each entry

	; Terminal X
	ldy #0
	lda (tempWork0),y
	bmi .ldtEnd
	cmp SubGame_ExitStateX
	bne .ldt2

	; Terminal Y
	iny
	lda (tempWork0),y
	cmp SubGame_ExitStateY
	bne .ldt2

	; Found a terminal, so check the linked door

	; Read door X , Y
	iny
	lda (tempWork0),y
	sta tempWork2
	iny
	lda (tempWork0),y
	sta tempWork3

	; Read tile index
	iny
	lda (tempWork0),y
	sta tempWork4

	; Read other tile index
	iny
	lda (tempWork0),y
	sta tempWork7

	; Read MapAnim close
	iny
	lda (tempWork0),y
	sta tempWork8

	; Read MapAnim open
	iny
	lda (tempWork0),y
	sta tempWork9

	; Read MapAnim switch off
	iny
	lda (tempWork0),y
	sta .sm_switch_off+1

	; Read MapAnim switch on
	iny
	lda (tempWork0),y
	sta .sm_switch_on+1

	; At this point
	; tempWork2/tempWork3 = Door X/Y
	; tempWork4 = Tile index
	; tempWork7 = Other tile index
	; tempWork8 = MapAnim close
	; tempWork9 = MapAnim open

	; Now get the map tile position from the read x/y position
	ldx tempWork3
	lda MapTabL,x
	sta tempWork5
	lda MapTabH,x
	sta tempWork6

	; Is it open or closed door in the map?
	ldy tempWork2
	lda tempWork4
	cmp (tempWork5),y
	beq .toBlank
	; To target tile type
	sta (tempWork5),y

	; Block out the zone tile
	ldx tempWork3
	lda ZoneMapTabL,x
	sta tempWork5
	lda ZoneMapTabH,x
	sta tempWork6
	lda #-1
	sta (tempWork5),y

	; Run the close MapAnim
	lda tempWork8
	ldx tempWork2
	ldy tempWork3
	jsr MapAnimations_Allocate

	; Run the switch off MapAnim
.sm_switch_off	lda #0
	bmi .noSwitch1
	ldx SubGame_ExitStateX
	ldy SubGame_ExitStateY
	jsr MapAnimations_Allocate
.noSwitch1

	; Unmap the zones, since the door is closed
	ldy #MapTerminalToDoor_Index_Zone1
	lda #-1
	sta (tempWork0),y
	iny
	sta (tempWork0),y

	; Block the maze tile
	jsr .dtGetMazeTile
	ldy #Node_isBlocked
	lda (tempWork5),y
	ora #Node_isBlocked_Wall
	sta (tempWork5),y

	jmp .dt2

.toBlank
	lda tempWork7
	sta (tempWork5),y

	; A door, when it is toggled, can link the zones by looking either side of it.
	; The door map tile zone map lookup can take either of the zones adjacent to it.
	; Zone map lookup
	ldx tempWork3
	lda ZoneMapTabL-1,x
	sta tempWork5
	lda ZoneMapTabH-1,x
	sta tempWork6

	; Zone map to the top
	lda (tempWork5),y
	bpl .od1

	; Zone map to the left
	tya
	clc
	adc #39
	tay
	lda (tempWork5),y
	bpl .od1

	; Zone map to the right
	iny
	iny
	lda (tempWork5),y
	bpl .od1

	; Zone map to the bottom
	tya
	clc
	adc #39
	tay
	lda (tempWork5),y
;	bpl .od1
.od1
	; Store the zone over the now open door character
	pha
	lda tempWork2
	clc
	adc #40
	tay
	pla
	sta (tempWork5),y
	ldy #MapTerminalToDoor_Index_Zone1
	sta (tempWork0),y

	; Now reverse the zone check to get the zone on the other side of the door
	; Zone map to the bottom
	lda tempWork2
	clc
	adc #80
	tay
	lda (tempWork5),y
	bpl .od2

	; Zone map to the right
	tya
	sec
	sbc #39
	tay
	lda (tempWork5),y
	bpl .od2

	; Zone map to the left
	dey
	dey
	lda (tempWork5),y
	bpl .od2

	; Zone map to the top
	tya
	sec
	sbc #39
	tay
	lda (tempWork5),y
;	bpl .od2
.od2
	ldy #MapTerminalToDoor_Index_Zone2
	sta (tempWork0),y



	; Run the open MapAnim
	lda tempWork9
	ldx tempWork2
	ldy tempWork3
	jsr MapAnimations_Allocate


	; Run the switch on MapAnim
.sm_switch_on	lda #0
	bmi .noSwitch2
	ldx SubGame_ExitStateX
	ldy SubGame_ExitStateY
	jsr MapAnimations_Allocate
.noSwitch2


	; Unblock the maze cell for the door
	jsr .dtGetMazeTile
	ldy #Node_isBlocked
	lda (tempWork5),y
	and #!Node_isBlocked_Wall
	sta (tempWork5),y

.dt2
	; Check the others
	lda tempWork0
	clc
	adc #MapTerminalToDoor_Size
	sta tempWork0
	bcc .ldt1
	inc tempWork1
	jmp .ldt1

.ldt1 jmp .dt1
.dtEnd
	jmp .noSubGameState

.dtGetMazeTile
	ldx tempWork2
	ldy tempWork3
	jsr GetMazeNodesIndex
	sta tempWork5
	stx tempWork6
	rts

} ;<!ifdef RedirectHandleUserInput {


!zn {
HandleKeyboard
	jsr Keyboard_Read

	; Prepare for keyboard based commands
	ldy CaptureProbe_CapturedList
	beq .nothingRecent

	lda #0
	sta .smCopyFlags+1

	lda Keyboard_Pressed_F1
	beq .notF1

;	inc VIC2BorderColour

	; Toggle StayHere
	lda EnemyFlags-1,y
	eor #EnemyFlags_StayHere
	sta EnemyFlags-1,y
	inc .smCopyFlags+1

.notF1

	lda Keyboard_Pressed_F3
	beq .notF3

	; Toggle StayHere
	lda EnemyFlags-1,y
	eor #EnemyFlags_FollowPlayer
	and #!(EnemyFlags_StayHere | EnemyFlags_Destroy)
	sta EnemyFlags-1,y
	inc .smCopyFlags+1

.notF3

	lda Keyboard_Pressed_F5
	beq .notF5

	; Toggle StayHere
	lda EnemyFlags-1,y
	eor #EnemyFlags_Destroy
	and #!(EnemyFlags_StayHere | EnemyFlags_FollowPlayer)
	sta EnemyFlags-1,y
	inc .smCopyFlags+1

.notF5

	lda Keyboard_Pressed_F7
	beq .notF7

	; Choose the lowest from half the capture cost or the remaining health
	lda EnemyHealth-1,y
	bmi .alreadyDead
	sta tempWork0

	stx .smx1+1
	sty .smy1+1

	ldx EnemyType-1,y
	lda EnemyTemplate_CaptureEnergyCost,x
	lsr
	cmp tempWork0
	bcs .ah1
	sta tempWork0

.ah1
	jsr PlayerAddHealthTick
	dec tempWork0
	bpl .ah1

.smx1	ldx #0
.smy1	ldy #0

	lda #-1
	sta EnemyHealth-1,y
.alreadyDead

.notF7

.smCopyFlags lda #0
	beq .nothingRecent
	ldx EnemyToAnimationIndex-1,y
	bmi .nothingRecent
	lda EnemyFlags-1,y
	sta AnimationEnemyFlags,x

.nothingRecent
	rts
}


!zn {
CalculateFollowPosition
	lda EnemyPositionsX
	sta tempWork1
	lda EnemyPositionsY
	sta tempWork2

	; 2 map blocks away
	ldx #2
.l1
	; Potential position
	lda tempWork1
	clc
	adc UserInput_LastFollowDirectionX
	sta tempWork3

	lda tempWork2
	clc
	adc UserInput_LastFollowDirectionY
	sta tempWork4

	tay
	lda MapTabL,y
	sta tempWork5
	lda MapTabH,y
	sta tempWork6
	ldy tempWork3
	lda (tempWork5),y
	cmp #SolidMapBlockIndex
	bcs .hitWall

	; Position good, so use it next
	lda tempWork3
	sta tempWork1
	lda tempWork4
	sta tempWork2

	dex
	bne .l1

.hitWall
	lda tempWork1
	sta UserInput_LastFollowPosX
	lda tempWork2
	sta UserInput_LastFollowPosY

	rts
}
