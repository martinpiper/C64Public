V2.1
Expanded the number of instruments to 255.

The track editor block indicator was not updating if the currently playing track offset was
not visible.

Wave table: XX YY
YY is always the frame delay.
XX:
0 = Don't change wave this frame
FF = Jump to position. pos 0 = stop

Pulse table
Only executes when pulse waveform bit is set
XY ZZ
X = 0 Set pulse Y & ZZ = Pulse
X = 1 Pulse add with unsigned ZZ for Y ticks (ticks zero based)
X = 2 Pulse subtract with unsigned ZZ for Y ticks (ticks zero based)
FF = Jump to position. pos 0 = stop

Note table
XY ZZ
Y = Except command 0 frame delay (0-15) (ticks zero based)
X = Command
Command:
*DONE*00 (both nybbles XY) = No note change. Do nothing. Delay time in ZZ
*DONE*1 = Set absolute note ZZ = note. Does this once at the start of the command. Effects can be active.
*DONE*8 = Timed note step add upper nybble Z+1 with time of lower nybble+1 (zero based). Effect does not execute on first frame.
*DONE*9 = Timed note step sub upper nybble Z-1 with time of lower nybble+1 (zero based). Effect does not execute on first frame.

*DONE*A = Relative note step ZZ = step signed 8 bit value each frame
*DONE*B = Set hi frequency to ZZ lo is zeroed. Skips other effects for the duration of this effect.
*DONE*FF = Jump to position and frame delay ignored. XX = pos 0 = stop


*DONE*While saving to C64 create a bit pattern of used tables for the envelope from the active
flags. Save this as an extra envelope parameter.
Update the player code to:
*DONE*Play the wave table.
*DONE*Then the pulse table.
*DONE*Then the note table parsing. Update the existing envelope vibrato code to use the note table
	triggered values.
*DONE*Remove old drums code. (Not that it will be enabled since the save routine won't flag them as used.)


*DONE*Remove drums from the views.
*DONE*Add wave and note table editing.
*DONE*Update the code that updates the music file from the document, then save to C64 and player.
*DONE*Update save and load.


There needs to be an instrument flag to say "Do not allow arpeggio and other effects" to
easily emulate the drums just using the wave/note/pulse tables.


Update load old versions <= 4 so that they convert drums to the new wave table.
	Use the test tables values as examples.
UI Changes that need corresponding table entries created during import
Wave mix removed
Wave removed
Pulse and variance control removed
Drum removed, plus drum start offset
Vibrato removed, plus the vibrato time and initial direction bit.



Pack duplicate table entries into the same spot whilst saving of course.
Try to create common code so that I can pack tables for the editor data on a menu item and also whilst saving.


When adding or removing a table entry update all corresponding intruments that use it.
Even if the instrument is greyed out the value still needs updating.
If the jump is deleted for the instrument then check the destination and set that instead.
If the destination is 0 then remove it from the instrument.


Note table optimised with cached jump table.
>Especially with regards to a cached jump table for the note table.


If there are no note table commands 8 and 9 then it is not necessary to save the second optimised/split note table values.


*Done* Hard restart can be edited for each channel.
Include in the docs that if channel commands are used the start of the music must set the
hard restart to expected values.
*Done* Spot the case where hard restart is constant for all three channels and do an immediate
load instead of the per channel index.
*Done* Allow hard restart to be set to two frames instead of one.
*Done* Each channel can also have command to edit the hard restart values as the music runs.
HAD, HSR, HWV, HTI


; Make the zero page usage configurable instead of using hard coded $fb/$fc values
Extended view edit page.


Added filter table updates


Added table block commands:
TWV:XX
TNT:XX
TPL:XX
TFL:XX



Spot when the tables are not used and remove that code.


Gate can still be timed etc. Can have a new split dur command where the release duration is another byte separate to the overall note length.
DTI:xx,yy


The ACME window popping up will disappear in the next version.

If the t.prg or t.sid file is not output then report the error in the build log.


Try making the player play routine multi-threaded and see if that improves the drawing.


Editing the tempo on a block that is mBlockLastEditedAsTracker does not alter the length of the block, it just
changes how fast it is played.



OnEditNumOnSetValue when it processes the updated row (kTrackerBlockEditingIndex), make the replacementBlockText
update common code inside CMusicStudioDoc then call it when loading existing files.
Then remove the mBlocks save and load.


Upon play the UpdateDocumentDataToInternalFile() needs to call the common code.


The rows delete to a blank edit box needs implementing. Can use the common block update.



Tracker style entry, three blocks side by side type of thing. Each block can be marked as tracker style or dur style editing. So a tune can use both styles of blocks. For the player it doesn't care because the data internally is the same.
 

Have a button that switches between DUR entry or tracker entry style for a particular block.


Maybe need a sustained duration plus a duration that includes an initial gate off, or fix the DTI so it can do a
zero frame gate off.

Added === command.


Add a higher resolution timer in the SID player assembly.


- maybe, some playback optimalisation is needed in tracker mode of the editor, sometimes it plays a little choppy
I've made a note to check this, maybe the ReSID preferences need tweaking to lower the sample rate. Or the re-draw rate for the windows drawing stuff needs to be tweaked down.


The Menu->Help->Configuration option allows the window update and ReSID parameters to be changed.
Add sample playback options in the editor and also tracker screen update speed config.
int gSoftMAXBUFBLOCKS
int gSoftBufSizeDivisor
int gSoftViewRefreshTime
Need frequency adjustment	SID2_DEFAULT_SAMPLING_FREQ
	CommonStartPlaying() can pass command lin flags to AllocatePlayer()
	Can use GetProfileInt
Have these updated by a preferences dialog box. Can also have three preset buttons, slow PC, normal, high performance.


Need to check the sound effect play hard restart, it killes the attack/decay.


Save and load instrument data.


I'm using the reSID player code. Obviously I can use it to play other people's SID files. I can then get the SID player code to tell me when each channel's notes start with gate on and end with gate off, ADSR, waveform and the filter parameters. It would be possible to record these into the tracker editor as the SID is playing. This would give the editor the ability to "rip" almost any piece of music so it can be edited. Getting the exact instrument sounds from all SIDs would be a little tricky but something should be able to be found.
Need to hook Player::writeMemByte_playsid()


Improved the table packing to spot duplicate loops within a segment.


Updated to use ReplicaNet V7.0, the amalgamated source.


The check "if (!GetDocument()->mBlockLastEditedAsTracker[currentBlock])" is always passing, which means the mBlockTrackerRows is always being calculated,
** which is V.V.V. expensive.


Max sample frequency is now 48000 for those with cheap onboard HW that can't switch.


2.2
2.2.0.1
Choosing Edit->Optimise will mark the file as updated if there were changes to the tables.

8 MRU items (LoadStdProfileSettings)


Tweaked the MainFrm startup dimensions so by default that on a 1024x768 screen it fits without displaying scroll bars.


Find the MIDI library and include it for importing blocks.
http://midifile.sapp.org/
http://www.ccarh.org/courses/253/handout/smf/
http://faydoc.tripod.com/formats/mid.htm



Improve MIDI reading, separate blocks for each track or merge blocks.
Added a dialog CImportMIDI that allows options to be tweaked before parsing the MIDI file.


Fixed a small bug when switching between an unedited duration block to the tracker block view. The tracker block would not have the correct length set and would not display notes beyond that time.



Quickly parse the MIDI file and show what MIDI channels are used, how many bytes per channel.



Add a BAT file that will produce a clean directory of the editor and demo files etc ready to be zipped.


2.2.0.2

For Richard and Necro Polo
Fixed a bug where an effect envelope with a note table will cause a music voice envelope without a note table to used the previous effect note table.


2.2.0.3

* Fixed a small output bug that would generate a lone "!by" for any EnvelopesAttackDecay etc table.


* When choosing "play envelope" the song index should be forced to 0


* Note Table command 1 had a bug where the ticks value was not being correctly set


* Dynamic track/table/block quick help reference in the lower right hand corner.

2.2.0.4

* Insert instrument positions.


* Fixed an issue where sometimes acme and the supporting sources cannot be found by the tool when starting from a msmus file in Explorer.


* Command line conversion and play mode.
	// See: Parse application specific command line options
		Load file
		Play song position
		Save msmus file
		Load envelope at pos
		Save envelope at pos
		Save SID, prg, +SFX, address
		Change zero page value
		Insert envelope at pos
		Delete track at pos for count
	* Options:
	/hide
	/exit
	/openFile <filename>
	/exportToSID <filename>
	/exportToSelf <y/n> <filename>
	/exportToC64 <addr> <y/n> <filename>
	/play
	/loadEnvelope <position> <filename>
	/saveEnvelope <position> <filename>
	/insertEnvelope <position>
	/deleteTrackPos <voice> <position> <count>

* Added:
	/pressEnvelopeForceUsedFX <position>





* When ripping a SID, capture the AD/SR and first few wav table entries.
	Capture entries while the gate is on whilst also timing how long the gate is on for.
	Then also continue to capture for at least that time period after the gate is off.
	* MPi: TODO: Calculate sensible block sizes based on analysis for the ripped SID
	* Done - // MPi: TODO: Progress onto new blocks when they reach their end times
	* Done - Have sensible defaults for ProcessSIDCaptureData()
	* Write routines to use those first
	* Reduce instrument duplicates



* When the desktop zoom level is set, the dynamic window drawing fails. Coordinates could do with a zoom level
	https://blogs.msdn.microsoft.com/vcblog/2010/03/11/mfc-applications-now-default-to-being-dpi-aware/
	https://msdn.microsoft.com/library/windows/desktop/mt843498(v=vs.85).aspx(d=robot)
	Manifest Tool->Enable DPI Awareness = No




* Stabalise the starting raster for the standalone prg player, remember to subtract 1 from the raster time
	* Make it dark grey, not white, to avoid video interference noise on real hardware
	* MusicStudio2\MusicStudioConvert\HeaderSelf.a



* Add moving average calculation for raster time



* Add a millis/seconds/minutes timer to the standalone prg player




* Try importing expanded MW tracks, sequences and effects
	Some of the specials might need extra functionality, especially in the pulse width modulation effects - Random inputs?
	* C64\MusicStudio2\MusicStudio\MusicStudioDocMWMusic.cpp : CMusicStudioDoc::LoadMWMusicFile()
	* Done - Tracks
	* Done - Sequences
	* Envelopes
		First stage, creating the same default sound for every effect works
		Now to really import the basic voice features
		Then vibratos
		Special effects
		etc



* From a blank editor in release mode, when importing an old file, the export/extended view menu options are not available?
	Needed duplicate menu entries for: IDR_MusicStudioTYPE2 , IDR_MusicStudioTYPE3 , IDR_MusicStudioTYPE4
		To match the template import types.


2.2.0.5

* Oric Atmos music player
	Resources:
		http://www.emucamp.com/oric.html
		http://www.ankman.de/load_cassette_tape_8bit_computers.html
		http://oric.free.fr/EMULATORS/manual.html
		http://osdk.org/index.php?page=documentation&subpage=floppybuilder
		http://osdk.org/index.php?page=documentation&subpage=samples
		http://miniserve.defence-force.org/svn/public/pc/tools/osdk/main/Osdk/_final_/sample/assembly/hello_world_assembly/
		https://retropie.org.uk/docs/Oric/
		https://github.com/oric-international/oric-tools/blob/master/euphoric-tools/tape_tools/wav_format/readme.txt
		http://osdk.defence-force.org/index.php?page=documentation&subpage=memorymap
		http://www.defence-force.org/computing/oric/library/lib_manual_oric/files/oric1manual.pdf		
	Sound specific links:
		http://twilighte.oric.org/twinew/sending.htm
		http://forum.6502.org/viewtopic.php?f=4&t=3704
		http://oric.free.fr/programming.html#psg

		
	Emulator: C:\Users\Martin Piper\Downloads\Oricutron_win32_v12\oricutron.exe
		cd /d "C:\Users\Martin Piper\Downloads\Oricutron_win32_v12"
		oricutron.exe -t tapes\Cyclotron.tap
	This automatically uses: CLOAD""
	Making a self booting TAP file (in Oric format) seems to be the best option for quick development turnaround
	$e4ac is the tape loader
	F2 - monitor
		bs $e4ac
		x
	Tape loader looks for:
		$24
		Stores reversed next 9 bytes at $2a7 (+1)
			In memory $2a8:	00 40 25 16 35 c7 80 00
							00 00
			Seems to be: ? lo/hi start lo/hi end ? ? ? ?
		Expects $00
		Stores it in $293
		Load rest of data
	This seems to be a good minimal Oric TAP file that loads 78 4c 00 05 (plus some padding bytes) to $500 and executes $500
		16 16 16 24 00 00 80 C7 
		05 08 05 00 00 00 78 4C
		00 05 FF EE DD CC BB
	Run it with: oricutron.exe -t c:\temp\oric.tap
	This gives a good minimal workflow for getting my code into the Oric emulator and seeing/hearing it run
	* Next step, create an Oric based ACME stub
	* Separate out the "play note" code and have optional replacement code for different machines.
	To export the data:
		C:\Work\C64\MusicStudio2\MusicStudio\Release\MusicStudio.exe /openFile "C:\Work\C64\MusicStudio2\ExampleFiles\OriginalC64Music\P.TUSARI END.PRG" /exportToSelf n C:\Temp\t.prg /exit
		C:\Work\C64\MusicStudio2\MusicStudio\Release\MusicStudio.exe /openFile "C:\Work\C64\MusicStudio2\ExampleFiles\OriginalC64Music\P.TUSARI LEVEL1.PRG" /exportToSelf n C:\Temp\t.prg /exit
	Then:
		cd /D C:\Work\C64\MusicStudio2\MusicStudio
		..\..\acme.exe -v4 --lib ..\..\ --lib ..\MusicStudioConvert\ ..\MusicStudioConvert\HeaderOric.a
		cd /d C:\Users\Martin Piper\Downloads\Oricutron_win32_v12
		oricutron.exe -t C:\Work\C64\MusicStudio2\MusicStudio\t.tap

		For the "P.TUSARI LEVEL1.ref.self.prg" file
		..\..\acme.exe -v4 --lib ..\..\ --lib ..\MusicStudioConvert\ ..\MusicStudioConvert\HeaderSelf.a
		"C:\Program Files\Git\usr\bin\diff.exe" t.prg "P.TUSARI LEVEL1.ref.self.prg"

	* Oric now makes sounds!




* Add Oric export menu option.
* Export to Oric can be used, which creates a self running Oric TAP file.
	The conversion is preliminary. More work needs to be done on the instruments export.
	Oricutron was used to test this output. http://www.petergordon.org.uk/oricutron/



2.2.0.6

* Export to C64 option "standalone prg" with sound effects option was sometimes not starting correctly.
	The kernal displayed text data was too large to be printed in one pass if the music information was longer than expected.


* Self playing demo includes extra scope effect



* Improved the error information if the conversion goes wrong. This can help when debugging failures.



* Improved the rip SID functionality to extract more of each instrument detected in the SID file




* Ripping SID preferences window. Tracker block length, split into time periods, tempo. Extract instruments etc.
	Add option to specify maximum length of wave/pulse width frames captured for each new instrument.
		Make it loop
	Done: Then call optimise() to reduce all the entries.
	Done: CMusicStudioDoc::GetInstrument() will need the future SID bytes to be able to construct the table entries...
	Done: * Add option for track number before starting the SID
	Done: * Before ripping, ask for instruments that will capture a note table instead of outputting individual notes
		This will make it potentially more useful for capturing drums sounds...
			It does!
	https://youtu.be/HKkapWwicA4



2.2.0.7

* Menu: Edit->"Clear All" and "Set Default" data options



* Automatic discovery of note based envelopes
	Convert with a baseline, no note envelopes
	Then for each envelope, progressively try to flag it as a note envelope
	Try a conversion pass
	If there are savings (fewer block notes output, smaller file size) then use that



* MIDI file export
	OpenDocumentFile( _T("C:\\Work\\C64\\MusicStudio2\\ExampleFiles\\Loopz Musix.msmus") );
	Produces something that can be recognised
	Done: Needs to handle transpose and repeat block commands




* Underneath the tracker mode editor there is a display for the "Frames", this doesn't seem to take into account the active block "tempo" and also it is not indicating the number is in hex, include a decimal value too.
	IDC_EDIT48
		mBlockDurSize
	IDC_EDIT58 is tempo	OnChangeBlockEditTrackerTempoEdit1




* Block tracker edit mode: When the number of rows is odd (and tempo is 1) then the final calculated duration (which uses frames/2 by default) doesn't seem to update
	The "Frames" display doesn't update when going from 6 to 7 rows with an empty block for example
	The output DUR: command doesn't update the number properly
	This indicates a rounding error when converting the rest lengths
	This doesn't happen if the first (0) row contains a valid note, it correctly uses DTI:
	> Fixed, uses "DTI:" when it should do




* When in tracker mode, converting a note with DTI to have the same release timing as the niote length produces noticable clicks with a following rest (+++)
	Why? Fix, obviously.
	Reducing the release length to always be one less than the note length seems to fix this...
	Is there a problem with processing the +++ command affecting the gate in combination with hard restart?
	HRD and use === instead




* Reaper import:
	Application: "C:\Temp\REAPER\reaper.exe"
	"C:\Users\Martin Piper\Downloads\NP MIDI conversion examples\Examples"
	In file: C:\Users\Martin Piper\Downloads\NP MIDI conversion examples\Examples\three notes one track.rpp
		Note: For three notes, separated by rests:
			<TRACK {A4470774-6ED8-416C-BFEA-DA175BF2766D}
			<ITEM
			POSITION 0
			  <SOURCE MIDI
				HASDATA 1 960 QN
				CCINTERP 32
				POOLEDEVTS {093CC3D2-0758-4BC9-9492-6DC54DF02B3A}
				E 0 90 35 7f
				E 120 80 35 00
				E 120 90 3c 7f
				E 120 80 3c 00
				e 120 90 40 7f
				e 120 80 40 00
				E 2280 b0 7b 00
				CCINTERP 32
				CHASE_CC_TAKEOFFS 1
				GUID {C73306DE-B4D1-4BCE-B5D7-3F25D01BABF7}
		Seems to be MIDI note data starting with: E 0 90 35 7f
			Ending with: CCINTERP 32
	* Need extra file extension added to open file
		* Note will need a duplicate entry similar to IDR_MusicStudioTYPE2
	>> LoadReaperFile
	> Perhaps it would be better to switch to tracker mode?
	> For a 1 second block the total time is:
		TEMPO 120 4 4
		<TRACK
		<ITEM
		  POSITION 1.5		(in seconds)
		  LENGTH 1			(if length is longer than the total item length then the item repeats and can repeat partially)
		  <SOURCE MIDI
		  HASDATA 1 960 QN	(960 = 1920 / 2, hmm does this indicate the real length? Nope, so ignore for now)
		  POOLEDEVTS {1121D557-29CB-4885-9F5B-13093D70E1D9}
		E 1920 b0 7b 00		(1 second rest at 120 bpm, rest is b0)
		    E 240 90 29 7f	(after 240 ticks, 90 note on, 29 note)
		    E 240 80 29 00	(after 240 ticks, 80 note off, 29 note)
		  CCINTERP 32
	> The logic here, will be to keep on processing these midi events, note first event (E or e), until "  CCINTERP 32" while LENGTH has not reached zero.
		Restarting at the first event as necessary.
		Set the tracker block length
		Would need to create empty tracker block for any gaps in position (time) detected
	>> Needed: SOFFS 0 0
	** Note: Try to handle full and partial loops of output block data
	** This seems to be missing the last flurry of notes?
		"C:\Users\Martin Piper\Downloads\NP MIDI conversion examples\Examples\one block.RPP"
		** The tempo also seems to be too slow?
			Could this be related to: // Why divide 2? It fitted the observed data in "one block.RPP"
			Could these event times have to be devided by 2? Why not the other file?
			>> Bodge fix for "one block.RPP"
		> Something to do with "BEAT 1" being present? Or in the metronome block?
	** Need to split longer blocks.
		Use: numberOfEventsInBlock
		Update: theBlockLengthProcessed
	** Perhaps split on every loop as well? This would make it easier to spot duplicate blocks
		Update:
			numberOfEventsInBlock
			theBlockLengthProcessed
	** Done: Need to remove items with "MUTE 1 0", can pre-process this
		Count subsequent > and <
	** Done: Need to remove tracks with no items, can pre-process this
	** Example1 seems to be creating a lot of duplicate blocks, try to spot them and remove as an option

2.2.0.8




* Reaper import, include a configuration dialog window for import options
	See CImportMIDI for example usage
		// Remove muted items
		// Remove any tracks without items
		tempo = 120
		Ticks multiplier (16) for:
			blockTicksPerSecond = tempo * 16
		includeEmptyTime = false;
		beatAdjustment = 0
		// Check for any duplicates
		kC64FramesPerSecond = 50;
		outBlockTempo = 1;
