!zn
HandleUserInput
	jsr HandleJoystick
	rts

!zn
.toggle !by 0
.playerDeltaY !by 0
.lastPushX !by 2
.lastPushY !by 2
.standing !by 0
.upImpulse !by 0
.jumpIndex !by -1
; This allows the feel and height of the maximum jump with "sub-pixel" accuracy to be precisely defined
.jumpVelocities !by 4 , 4 , 4 , 4 , 4 , 3 , 4 , 3 , 3 , 3 , 3 , 3 , 2 , 3 , 2 , 2 , 3 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 2 , 1 , 1 , 2 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0
.jumpVelocitiesEnd
;.fallingVelocities 1 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , -1

; Used to store Y from MSpritePosToCharacterLookupPosTweak
.headScrY !by 0
.headScrYP40 !by 0
.headScrYM40 !by 0
.legsScrY !by 0
.legsScrYP40 !by 0
.legsScrYM40 !by 0
.legs2ScrY !by 0
.legs2ScrYP40 !by 0
.legs2ScrYM40 !by 0

HandleJoystick

!set RunJumpDemo_Joystick = CIA1KeyboardColumnJoystickA
	lda #0
	sta AnimPlayer_directionSet

	lda AnimationYPos
	sta .playerDeltaY

	+MSpritePosToCharacterLookup_Setup SpriteXPosToScreenCharPos , SpriteYPosToScreenCharPosLo , SpriteYPosToScreenCharPosHi , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosLohi , ZP_SpriteYPosToScreenCharPosHilo , ZP_SpriteYPosToScreenCharPosHihi , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteXPosToScreenCharPoshi , topScreenScrollX , topScreenScrollY

	; Assume not standing
	lda #0
	sta .standing

	ldx #1
	+MSpritePosToCharacterLookup .rejectRoutineHead , AnimationXPosLo , AnimationXPosHi , AnimationYPos , ScrollerBankVisible , tempWork2 , tempWork3 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	sty .headScrY
	tya
	clc
	adc #40
	sta .headScrYP40
	tya
	sec
	sbc #40
	sta .headScrYM40
.rejectRoutineHead
	ldx #0
	+MSpritePosToCharacterLookupPosTweak 0 , -5 , .rejectRoutineLegs , AnimationXPosLo , AnimationXPosHi , AnimationYPos , ScrollerBankVisible , tempWork0 , tempWork1 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	sty .legsScrY
	tya
	clc
	adc #40
	sta .legsScrYP40
	tya
	sec
	sbc #40
	sta .legsScrYM40
.rejectRoutineLegs

	ldx #0
	; 0 , 1 carefully tweaked to cause the player to land on top of platforms while jumping
	+MSpritePosToCharacterLookupPosTweak 0 , 1 , .rejectRoutineLegs2 , AnimationXPosLo , AnimationXPosHi , AnimationYPos , ScrollerBankVisible , tempWork4 , tempWork5 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	sty .legs2ScrY
	tya
	clc
	adc #40
	sta .legs2ScrYP40
	tya
	sec
	sbc #40
	sta .legs2ScrYM40
.rejectRoutineLegs2

	; No need for fall detection when we are moving upwards due to jumping
	ldx .jumpIndex
	bpl .rejectRoutine

	; Falling or standing detection code

	; Assume standing now
	lda #1
	sta .standing

	ldy .legsScrYP40
	lda (tempWork0),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .rejectRoutine
}
.doFall
	inc AnimationYPos
	inc AnimationYPos
	lda #0
	sta .standing
.rejectRoutine

	lda #JoystickBits_Right
	bit RunJumpDemo_Joystick
	bne .o1

	; Check screen edge range
	lda AnimationXPosHi
	beq .nop1
	lda AnimationXPosLo
	cmp #<(VIC2SpriteXBorderRight38-VIC2SpriteSizeX)
	bcs .o1
.nop1

	ldy .headScrY
	iny
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o1
}
	ldy .headScrYP40
	iny
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o1
}
	ldy .legs2ScrY
	iny
	lda (tempWork4),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o1
}
	ldy .legsScrYM40
	iny
	lda (tempWork0),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o1
}

	jsr AnimPlayerRunRight

	lda AnimationXPosLo
	clc
	adc #2
	sta AnimationXPosLo
	bcc .o1
	lda #1
	sta AnimationXPosHi
.o1

	lda #JoystickBits_Left
	bit RunJumpDemo_Joystick
	bne .o2

	; Check screen edge range
	lda AnimationXPosHi
	bne .nop2
	lda AnimationXPosLo
	cmp #<VIC2SpriteXBorderLeft38
	bcc .o2
.nop2

	ldy .headScrY
	dey
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o2
}
	ldy .headScrYP40
	dey
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o2
}
	ldy .legs2ScrY
	dey
	lda (tempWork4),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o2
}
	ldy .legsScrYM40
	dey
	lda (tempWork0),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .o2
}

	jsr AnimPlayerRunLeft

	lda AnimationXPosLo
	sec
	sbc #2
	sta AnimationXPosLo
	bcs .o2
	lda #0
	sta AnimationXPosHi
.o2

;	lda #JoystickBits_Down
;	bit RunJumpDemo_Joystick
;	bne .o3
;	inc AnimationYPos
;.o3

	lda #JoystickBits_Up
	bit RunJumpDemo_Joystick
	bne .notUp

	; Already jumping?
	lda .jumpIndex
	bpl .alreadyJumping

	lda .upImpulse
	bne .o4

	lda #1
	sta .upImpulse


	; Not standing?
	lda .standing
	beq .o4
	; Start jumping then
	lda #0
	sta .jumpIndex
	jmp .o4

.alreadyJumping
	ldy .headScrYM40
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .notUp
}
	ldy .headScrY
	lda (tempWork2),y
!ifdef MapSolidCharsUpper {
	cmp #MapSolidCharsUpper	; The character that is solid
	bcs .notUp
}
	jmp .o4

.notUp
	lda #0
	sta .upImpulse
	; Stop jumping
	lda #-1
	sta .jumpIndex
.o4

	lda #JoystickBits_Fire
	bit RunJumpDemo_Joystick
	bne .o5

	jsr .fireDagger

.o5
	; TODO: Probably should check the head positions for solid blocks here to stop jumping happening
	ldx .jumpIndex
	bmi .noJumping
	lda AnimationYPos
	sec
	sbc .jumpVelocities,x
;	sbc #1
	sta AnimationYPos
	inx
	cpx #.jumpVelocitiesEnd-.jumpVelocities
	bne .noJumping
	ldx #-1
.noJumping
	stx .jumpIndex


	jsr AnimPlayerCheckForStand

	; Calculate any delta Y moved by the player
	lda AnimationYPos
	sec
	sbc .playerDeltaY
	sta .playerDeltaY

	; Simple push camera calculations
	lda #0
	sta frameTargetVelX
	sta frameTargetVelY

	lda AnimationYPos
	cmp #151+16	; Carefully selected to avoid any misaligned scrolling
	bcc .no1b
	lda .playerDeltaY
	bmi .endY
	lda #-3
	sta frameTargetVelY
	lda #-1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no1b
	lda AnimationYPos
	cmp #151	; Carefully selected to avoid any misaligned scrolling
	bcc .no1
	lda .playerDeltaY
	bmi .endY
	lda #-2
	sta frameTargetVelY
	lda #-1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no1

	lda AnimationYPos
	cmp #119-16	; Carefully selected to avoid any misaligned scrolling
	bcs .no2c
	lda .playerDeltaY
	beq .no2bb
	bpl .no2
.no2bb
	lda #3
	sta frameTargetVelY
	lda #1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no2c
	cmp #119	; Carefully selected to avoid any misaligned scrolling
	bcs .no2
	lda .playerDeltaY
	beq .no2b
	bpl .no2
.no2b
	lda #2
	sta frameTargetVelY
	lda #1	; Could be used but then it's harder to spot the "bad scrolls"
	sta .lastPushY
	jmp .endY
.no2

.endY

	; This calculates larger push scroll values if the player is close to the screen edges
	; Handle the X position now
	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror

	cmp #128+8
	bcc .no3b
	lda #-3
	sta frameTargetVelX
	lda #-1
	sta .lastPushX
	jmp .endX
.no3b
	cmp #128-8
	bcc .no3
	lda #-2
	sta frameTargetVelX
	lda #-1
	sta .lastPushX
	jmp .endX
.no3

	cmp #48-8
	bcs .no4b
	lda #3
	sta frameTargetVelX
	lda #1
	sta .lastPushX
	jmp .endX
.no4b
	cmp #48+8
	bcs .no4
	lda #2
	sta frameTargetVelX
	lda #1
	sta .lastPushX
	jmp .endX
.no4

.endX

	; When there is no target X velocity, attempt to center the X scroll until it is 4 pixels again
	lda frameTargetVelX
	bne .haveTargetX

	lda topScreenScrollX
	cmp #4
	beq .haveTargetX

	ldx .lastPushX
	stx frameTargetVelX
.haveTargetX



	; When there is no target Y velocity, attempt to center the Y scroll until it is 4 pixels again
	lda frameTargetVelY
	bne .haveTargetY

	lda topScreenScrollY
	cmp #4
	beq .haveTargetY

	ldx .lastPushY
	stx frameTargetVelY
.haveTargetY

	lda AnimationYPos
	sec
	sbc #VIC2SpriteSizeY
	sta AnimationYPos+1
	lda AnimationXPosLo
	sta AnimationXPosLo+1
	lda AnimationXPosHi
	sta AnimationXPosHi+1


	jsr ScrollerCheckMapRangeAndVelocity

	!source "CheckForBadScrolls.a"

	!source "ClampScrollVelocity.a"
	rts


Player_swordYPosAdjust = -4
AnimationTick_swordMovement
!for .i , 1 {
	!by Player_swordYPosAdjust , Player_swordYPosAdjust , Player_swordYPosAdjust
	!by 10+Player_swordYPosAdjust , 10+Player_swordYPosAdjust , 10+Player_swordYPosAdjust
	!by 16+Player_swordYPosAdjust , 16+Player_swordYPosAdjust , 16+Player_swordYPosAdjust
}
.lrejectRoutinePS jmp .rejectRoutinePS
AnimationTick_sword
	; Calculate some offsets for the sword sparkle effects, so we get some nice variation instead of just the sprite position
	lda Animation_Index,x
	asl
	and #%00000110
	sta .smPSXTweak+1

.smPSXTweak2	lda #0
	bpl .isPlus1
	lda #0
	sec
	sbc .smPSXTweak+1
	sbc #1
	sta .smPSXTweak+1
.isPlus1
	+MSpritePosToCharacterLookup .lrejectRoutinePS , AnimationXPosLo , AnimationXPosHi , AnimationYPos , BulletScreenBankHi , tempWork0 , tempWork1 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	; Check if we have a char effect here already
	lda (tempWork0),y
	+lbpl .rejectRoutinePS

	; TODO: Need the above to store the X/Y values suitable for CharEffectsX/CharEffectsY to use
	; 	lda CharEffects_SpriteYPosToScreenCharPos,y		+lbmi .noBulletAllocated	lda CharEffects_SpriteXPosToScreenCharPos,y		+lbmi .noBulletAllocated

	lda AnimationYPos,x
	sec
	sbc topScreenScrollY
;	sbc #20
	tay
	lda CharEffects_SpriteYPosToScreenCharPos,y
	+lbmi .rejectRoutinePS
	sta .smPSY+1

	lda topScreenScrollX
	lsr
	sta .smaPS+1

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sec
.smaPS	sbc #0
	clc
.smPSXTweak	adc #0
	tay
	lda CharEffects_SpriteXPosToScreenCharPos,y
	+lbmi .rejectRoutinePS
	sta .smPSX+1

	; Preserve the animation
	stx .smTmpX+1

	jsr AllocateCharacterEffect
	bcs .rejectRoutinePS2

	lda #0
	sta CharEffectsXVel,x
	lda #0
	sta CharEffectsYVel,x
.smPSX lda #0
	sta CharEffectsX,x
.smPSY lda #0
	sta CharEffectsY,x
	lda #5
	sta CharEffectsTime,x
	lda #VIC2Colour_White
	sta CharEffectsCol,x
	lda #5
	sta CharEffectsChar,x

.rejectRoutinePS2
.smTmpX ldx #0


.rejectRoutinePS
	ldy Animation_Index,x
	lda AnimationTick_swordMovement-1,y
	clc
	adc AnimationYPos + 1
	sta AnimationYPos,x
 	rts

.fireDagger
	lda Animation_FramesHi + 2
	+lbne .noFree

	lda AnimPlayer_lastDirectionSet
	+lbeq .noFree
	bmi .swordLeft

.swordRight
	lda #1
	sta .smPSXTweak2+1
	ldy #2
	+MWordValueTo_AX AnimationFrames_MainCharSwordSwipeRight
	jsr Animation_ForceSet
	+MAnimation_SetFuncs AnimationTick_sword , 0
	lda AnimationYPos + 1
	clc
	adc AnimationTick_swordMovement
	sta AnimationYPos + 2
	+MAddU8From16ToAddr16 20 , AnimationXPosLo + 1 , AnimationXPosHi + 1 , AnimationXPosLo + 2 , AnimationXPosHi + 2
	lda #VIC2Colour_White
	sta AnimationSpriteColour,y
	jmp .noFree

.swordLeft
	lda #-1
	sta .smPSXTweak2+1
	ldy #2
	+MWordValueTo_AX AnimationFrames_MainCharSwordSwipeLeft
	jsr Animation_ForceSet
	+MAnimation_SetFuncs AnimationTick_sword , 0
	lda AnimationYPos + 1
	clc
	adc AnimationTick_swordMovement
	sta AnimationYPos + 2
	+MSubU8FromAddr16ToAddr16 20 , AnimationXPosLo + 1 , AnimationXPosHi + 1 , AnimationXPosLo + 2 , AnimationXPosHi + 2
	lda #VIC2Colour_White
	sta AnimationSpriteColour,y
	
.noFree
	; TODO: Choose to fire the daggers
	jmp .noBulletAllocated

	lda AnimationYPos
	sec
	sbc topScreenScrollY
	sbc #20
	tay
	lda CharEffects_SpriteYPosToScreenCharPos,y
	+lbmi .noBulletAllocated
	sta .smcyp1+1

	lda topScreenScrollX
	lsr
	sta .sma+1

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	sec
.sma	sbc #0
	tay
	lda CharEffects_SpriteXPosToScreenCharPos,y
	+lbmi .noBulletAllocated
	sta .smcxp1+1

	jsr AllocateCharacterEffect
	bcc .gotBullet1
	jmp .o5b
.gotBullet1
	stx .smcx1+1
	lda .smcyp1+1
	sta CharEffectsY,x

	jsr AllocateCharacterEffect
	bcc .gotBullet2
	jmp .o5b2
.gotBullet2
	stx .smcx2+1




.smcx1	ldx #0
.smcx2	ldy #0
.smbx	lda #1
	sta CharEffectsXVel,x
	sta CharEffectsXVel,y
.smby	lda #-1
	sta CharEffectsYVel,x
	sta CharEffectsYVel,y
	lda #VIC2Multicolour_Yellow
	sta CharEffectsCol,x
	sta CharEffectsCol,y
	lda #30
	sta CharEffectsTime,x
	sta CharEffectsTime,y
	lda #1
	sta CharEffectsChar,x
	lda #2
	sta CharEffectsChar,y
.smcxp1	lda #0
	sta CharEffectsX,x
	clc
	adc #1
	sta CharEffectsX,y
.smcyp1	lda #0
	sta CharEffectsY,x
	sta CharEffectsY,y


	lda #48
	ldx #1
	ldy #2
	jsr MusicPlayerPlaySFX

	jmp .o5b


	; Just kill it
.o5b2
	ldx .smcx1+1
	lda #-1
	sta CharEffectsY,x
.o5b

.noBulletAllocated

	inc .smby+1
	lda .smby+1
	cmp #3
	bne .osmby
	lda #-2
	sta .smby+1

	inc .smbx+1
	lda .smbx+1
	cmp #3
	bne .osmbx
	lda #-2
	sta .smbx+1
.osmbx

.osmby
	rts


!zn
AnimPlayer_directionSet !by -1
AnimPlayer_lastDirectionSet !by -1

AnimPlayerRunLeft
	lda #-1
	sta AnimPlayer_directionSet
	sta AnimPlayer_lastDirectionSet
	ldy #0
	+MWordValueTo_AX AnimationFrames_MainCharLegsLeft
	jsr Animation_MorphToIfNeeded
	ldy #1
	+MWordValueTo_AX AnimationFrames_MainCharTorsoLeft
	jmp Animation_MorphToIfNeeded

AnimPlayerRunRight
	lda #1
	sta AnimPlayer_directionSet
	sta AnimPlayer_lastDirectionSet
	ldy #0
	+MWordValueTo_AX AnimationFrames_MainCharLegsRight
	jsr Animation_MorphToIfNeeded
	ldy #1
	+MWordValueTo_AX AnimationFrames_MainCharTorsoRight
	jmp Animation_MorphToIfNeeded

AnimPlayerCheckForStand
	lda AnimPlayer_directionSet
	beq .tryStand
	rts

.tryStand
	lda AnimPlayer_lastDirectionSet
	bmi .standLeft

	ldy #0
	+MWordValueTo_AX AnimationFrames_MainCharLegsStandRight
	jsr Animation_MorphToIfNeeded
	ldy #1
	+MWordValueTo_AX AnimationFrames_MainCharTorsoStandRight
	jmp Animation_MorphToIfNeeded

.standLeft
	ldy #0
	+MWordValueTo_AX AnimationFrames_MainCharLegsStandLeft
	jsr Animation_MorphToIfNeeded
	ldy #1
	+MWordValueTo_AX AnimationFrames_MainCharTorsoStandLeft
	jmp Animation_MorphToIfNeeded
