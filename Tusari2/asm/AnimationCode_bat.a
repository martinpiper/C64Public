!zn
Animation_CountEnemiesThatHomeInYPos !by 0
kAnimation_CountEnemiesThatHomeInYPos_Max = 6
AnimationInit_bat
	lda Animation_CountEnemiesThatHomeInYPos
	cmp #kAnimation_CountEnemiesThatHomeInYPos_Max
	bcs .error
	jsr Animation_FindFreeSlot
	bcs .error
	inc Animation_CountEnemiesThatHomeInYPos
	+MWordValueTo_AX AnimationFrames_Bat
	jsr Animation_ForceSet
	jsr AnimationCommonSetInitPosition
	; Interesting colour choice
	tya
	sta AnimationSpriteColour,y

	+MAnimation_SetFuncs AnimationTick_bat , AnimationDelete_bat

	; Health
	lda #2
	sta Animation_GeneralStorage0,y
	; Target pos offset
	lda #0
	sta Animation_GeneralStorage1,y
	sta Animation_GeneralStorage2,y

	clc
.error
	rts

AnimationDelete_bat
	; Handles screen edge removal, and also when it is killed
	dec Animation_CountEnemiesThatHomeInYPos
	rts

AnimationTick_bat
	+MAnimation_CalculateShifted_X
	+MAnimation_DetectBoundingBoxCollisionWithIndexShifted .isHit , 2 ,	10 , 20 , 10 , 20
	+MSpritePosToCharacterLookupShifted .rejectRoutine , AnimationXPosShifted , AnimationYPos , BulletScreenBankHi , tempWork0 , tempWork1 , ZP_SpriteXPosToScreenCharPoslo , ZP_SpriteYPosToScreenCharPosLolo , ZP_SpriteYPosToScreenCharPosHilo
	lda (tempWork0),y
	bmi .rejectRoutine
	; The char effects index
	tay
	lda CharEffectsChar,y
	cmp #5
	beq .instantDeath1
	lda #-1
	sta CharEffectsTime,y	; Kill the char effect
.isHit
	; Decrease bat health
	dec Animation_GeneralStorage0,x
	bpl .noExplode
.instantDeath1
	jsr AnimationDelete_bat
	jsr Animation_makeExplode
	+MWordValueTo_AX .scoreForBat
	jsr ScoreAdd
	rts

.scoreForBat
	+MScoreData 7 , 3 , 4

.noExplode
	lda #2
	jsr SFXInit

	jsr Animation_FlashTheSprite

.rejectRoutine

	lda #1
	sta tempWork2
	lda Animation_IndexLoopedEvent,x
	beq .notLooped

	dec Animation_IndexLoopedEvent,x

	jsr Rand
	and #31
	sec
	sbc #16
	sta Animation_GeneralStorage1,x
	jsr Rand
	and #31
	sec
	sbc #16
	sta Animation_GeneralStorage2,x
.notLooped

	lda Animation_Index,x
	cmp #30
	bne .noFX1
	lda #4
	jsr SFXInit
.noFX1

	lda Animation_Index,x
	cmp #20
	bcc .goSlow
	cmp #30
	bcc .goFast
	; Alternate between 1 and 2 for some frames
	and #1
	beq .goSlow
.goFast
	lda #2
	sta tempWork2
.goSlow
	lda AnimationXPosShifted,x
	clc
	adc Animation_GeneralStorage1,x
	; This stops any wraparound from causing the bat to fly in the wrong direction
;	cmp #$f0
;	bcc .noAdjust1
;	lda #0
;.noAdjust1
	cmp AnimationXPosShifted
	beq .doY
	bcc .moveRight

;.moveLeft
	lda AnimationXPosLo,x
	sec
	sbc tempWork2
	sta AnimationXPosLo,x
	lda AnimationXPosHi,x
	sbc #0
	and #1
	sta AnimationXPosHi,x
	jmp .doY

.moveRight
	lda AnimationXPosLo,x
	clc
	adc tempWork2
	sta AnimationXPosLo,x
	lda AnimationXPosHi,x
	adc #0
	and #1
	sta AnimationXPosHi,x

.doY

	lda AnimationYPos,x
	sec
	sbc #4
	sbc Animation_GeneralStorage2,x
	cmp AnimationYPos+1
	beq .doRet
	bcs .moveUp
;.moveDown
	lda AnimationYPos,x
	clc
	adc tempWork2
	sta AnimationYPos,x
	rts
.moveUp
	lda AnimationYPos,x
	sec
	sbc tempWork2
	sta AnimationYPos,x
	rts

.doRet
	rts
