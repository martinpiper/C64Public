!set kAnimation_currentSpeed = 0
!set kAnimation_currentAddress = 0

; Called during object initialisation or after Animation_FindFreeSlot
; Note: These use Y to index the animation

!macro MAnimation_StandardInit_Allocated .animationFrames , .colour , .tick , .delete {
	+MAnimation_PreserveMapPlacementTo Animation_ActivationObjectIndex

	+MWordValueTo_AX .animationFrames
	jsr Animation_ForceSet
!ifdef kAnimation_IncludeActivationObjectCode {
	jsr AnimationCommonSetInitPosition
}
	lda #.colour
	sta AnimationSpriteColour,y

	+MAnimation_SetFuncs .tick , .delete
}

!macro MAnimation_StandardInit .animationFrames , .colour , .tick , .delete {
	jsr Animation_FindFreeSlot
	bcs .error

	+MAnimation_StandardInit_Allocated .animationFrames , .colour , .tick , .delete

	clc
.error
	rts
}

!macro MAnimation_StandardInit_GeneralStorage0 .animationFrames , .colour , .tick , .delete , .value0 {
	jsr Animation_FindFreeSlot
	bcs .error

	+MAnimation_StandardInit_Allocated .animationFrames , .colour , .tick , .delete

	lda #.value0
	sta Animation_GeneralStorage0 , y

	clc
.error
	rts
}

!macro MAnimation_StandardInit_GeneralStorage01 .animationFrames , .colour , .tick , .delete , .value0 , .value1 {
	jsr Animation_FindFreeSlot
	bcs .error

	+MAnimation_StandardInit_Allocated .animationFrames , .colour , .tick , .delete

	lda #.value0
	sta Animation_GeneralStorage0 , y
	lda #.value1
	sta Animation_GeneralStorage1 , y

	clc
.error
	rts
}

!macro MAnimation_SetFuncs .tick , .delete {
	lda #<.tick
	sta Animation_TickLo,y
	lda #>.tick
	sta Animation_TickHi,y

	lda #<.delete
	sta Animation_DeleteLo,y
	lda #>.delete
	sta Animation_DeleteHi,y
}

!macro MAnimation_PreserveMapPlacementTo .array {
!ifdef kAnimation_IncludeActivationObjectCode {
	txa
	sta .array,y
	lda #1
	sta Animation_IsActivationObject,y
}
}


; Called during object ticks or delete
; Note: These use X to index the animation
!macro MAnimation_MakeObjectRespawnFrom .array {
!ifdef kAnimation_IncludeActivationObjectCode {
	lda Animation_IsActivationObject,x
	beq .notSpawned
	ldy .array,x
	lda #0
	sta MapPlacement_spawnedFlag,y
.notSpawned
}
}

!macro MAnimation_StopObjectRespawnFrom .array {
!ifdef kAnimation_IncludeActivationObjectCode {
	lda Animation_IsActivationObject,x
	beq .notSpawned2
	lda #0
	sta Animation_IsActivationObject,x
	ldy .array,x
	lda #-1
	sta MapPlacement_spawnedFlag,y
.notSpawned2
}
}

!macro MAnimation_DetectBoundingBoxCollisionWithIndex .isHitRoutine , .index , .addY , .cmpY , .addX , .cmpX {
!if .index = 2 {
	lda Player_UsingSpellDamage
	bne .isSpellHit
}

	lda Animation_FramesHi + .index
	beq .noCollide

	; Simple shifted bounding box check for player collision
	lda AnimationYPos,x
	clc
	adc #.addY
	sbc AnimationYPos + .index
	cmp #.cmpY
	bcs .noCollide
	lda AnimationXPosHi + .index
	ror
	lda AnimationXPosLo + .index
	ror
	sta .subX+1
	lda AnimationXPosHi,x
	ror
	lda AnimationXPosLo,x
	ror
	clc
	adc #.addX
.subX	sbc #0
	cmp #.cmpX
	bcs .noCollide

	jmp .isHitRoutine

!if .index = 2 {
.isSpellHit
	dec Player_UsingSpellDamage
	jmp .isHitRoutine
}

.noCollide
	; Fall through to the next routine, probably the character based weapons hit test
}

!macro MAnimation_DetectBoundingBoxCollisionWithIndexShifted .isHitRoutine , .index , .addY , .cmpY , .addX , .cmpX {
!if .index = 2 {
	lda Player_UsingSpellDamage
	bne .isSpellHit
}

	lda Animation_FramesHi + .index
	beq .noCollide

	; Simple shifted bounding box check for player collision
	lda AnimationYPos,x
	clc
	adc #.addY
	sbc AnimationYPos + .index
	cmp #.cmpY
	bcs .noCollide

	lda AnimationXPosShifted,x
	clc
	adc #.addX
	sbc AnimationXPosShifted + .index
	cmp #.cmpX
	bcs .noCollide

	jmp .isHitRoutine

!if .index = 2 {
.isSpellHit
	dec Player_UsingSpellDamage
	jmp .isHitRoutine
}

.noCollide
	; Fall through to the next routine, probably the character based weapons hit test
}

!macro MAnimation_CalculateShiftedIndex .index {
	lda AnimationXPosHi + .index
	ror
	lda AnimationXPosLo + .index
	ror
	sta AnimationXPosShifted + .index
}

!macro MAnimation_CalculateShifted_X {
	lda AnimationXPosHi,x
	ror
	lda AnimationXPosLo,x
	ror
	sta AnimationXPosShifted,x
}

; Macros for data creation

!macro DoSpeed .speed {
	!set kAnimation_currentSpeed = .speed
}
!macro DoFrame .frame {
	!fill kAnimation_currentSpeed , .frame
	!if kAnimation_currentAddress = 0 {
		!error "DoFrame used without a corresponding StartAnim?"
	}
	!if * - kAnimation_currentAddress >= 253 {
		!error "Animation max length reached"
	}
}

!macro DoFrame .frame1 , .frame2 {
	+DoFrame .frame1
	+DoFrame .frame2
}
!macro DoFrame .frame1 , .frame2 , .frame3 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 , .frame10 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
	+DoFrame .frame10
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 , .frame10 , .frame11 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
	+DoFrame .frame10
	+DoFrame .frame11
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 , .frame10 , .frame11 , .frame12 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
	+DoFrame .frame10
	+DoFrame .frame11
	+DoFrame .frame12
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 , .frame10 , .frame11 , .frame12 , .frame13 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
	+DoFrame .frame10
	+DoFrame .frame11
	+DoFrame .frame12
	+DoFrame .frame13
}
!macro DoFrame .frame1 , .frame2 , .frame3 , .frame4 , .frame5 , .frame6 , .frame7 , .frame8 , .frame9 , .frame10 , .frame11 , .frame12 , .frame13 , .frame14 {
	+DoFrame .frame1
	+DoFrame .frame2
	+DoFrame .frame3
	+DoFrame .frame4
	+DoFrame .frame5
	+DoFrame .frame6
	+DoFrame .frame7
	+DoFrame .frame8
	+DoFrame .frame9
	+DoFrame .frame10
	+DoFrame .frame11
	+DoFrame .frame12
	+DoFrame .frame13
	+DoFrame .frame14
}

kEndAnim_Loop = 0
kEndAnim_Delete = 1

!macro EndAnimLoop {
	!if kAnimation_currentAddress > 0 {
		!by 0
		!by kEndAnim_Loop
	}
	!set kAnimation_currentAddress = 0
}

!macro EndAnimDelete {
	!if kAnimation_currentAddress > 0 {
		!by 0
		!by kEndAnim_Delete
	}
	!set kAnimation_currentAddress = 0
}

!macro StartAnim ~.label , .speed {
	+EndAnimLoop
	.label = *
	!set kAnimation_currentAddress = .label
	+DoSpeed .speed
}

!macro AnimationEnemyMapPlacement ~.label , .activationObjectIndex , .posX , .posY {
!set .t = *
!if kMapPlacement_currentIndex >= kMapPlacement_maxIndex {
	!error "kMapPlacement_maxIndex reached"
}

	.label = kMapPlacement_currentIndex
* = MapPlacement_activationObject + kMapPlacement_currentIndex
	!by .activationObjectIndex
* = MapPlacement_spawnedFlag + kMapPlacement_currentIndex
	!by 0
* = MapPlacement_posXLo + kMapPlacement_currentIndex
	!by <.posX
* = MapPlacement_posXHi + kMapPlacement_currentIndex
	!by >.posX
* = MapPlacement_posYLo + kMapPlacement_currentIndex
	!by <.posY
* = MapPlacement_posYHi + kMapPlacement_currentIndex
	!by >.posY

!set kMapPlacement_currentIndex = kMapPlacement_currentIndex + 1
* = .t
}

kAnimationEnemyMapPlacement_mapPlacementIndex	= 0
kAnimationEnemyMapPlacement_PosEntry_size		= 1
!macro AnimationEnemyMapPlacement_PosBlockEntry .mapPlacementIndex {
	!by .mapPlacementIndex
}

kAnimationEnemyMapPlacement_Pos_numberEntries			= 0
kAnimationEnemyMapPlacement_Pos_numberEntriesRemaining	= 1	; To be used as an early out, to avoid processing once all the entries are spawned
kAnimationEnemyMapPlacement_Pos_nextHi					= 2
kAnimationEnemyMapPlacement_Pos_nextLo					= 3
kAnimationEnemyMapPlacement_Pos_previousHi				= 4
kAnimationEnemyMapPlacement_Pos_previousLo				= 5
kAnimationEnemyMapPlacement_Pos__size					= 6
!macro AnimationEnemyMapPlacement_PosBlock .numberEntries , .next , .prev {
	!by .numberEntries
	!by .numberEntries
	!by >.next , <.next
	!by >.prev , <.prev

!if (kAnimationEnemyMapPlacement_Pos__size + (.numberEntries * kAnimationEnemyMapPlacement_PosEntry_size)) >= 256 {
	!error "number of entries exceeds Y index capability"
}
}


!macro DoAnimationActivationObject ~.label , .init , .respawnTime, .extData0 , .extData1 {
!ifdef kAnimation_IncludeActivationObjectCode {
!set .t = *
!if kAnimation_currentActivationObject >= kAnimation_maxActivationObjects {
	!error "kAnimation_maxActivationObjects reached"
}

	.label = kAnimation_currentActivationObject

* = AnimationActivationObject_InitLo + kAnimation_currentActivationObject
	!by <.init
* = AnimationActivationObject_InitHi + kAnimation_currentActivationObject
	!by >.init
* = AnimationActivationObject_respawnTiming + kAnimation_currentActivationObject
	!by .respawnTime
* = AnimationActivationObject_ExtData0 + kAnimation_currentActivationObject
	!by .extData0
* = AnimationActivationObject_ExtData1 + kAnimation_currentActivationObject
	!by .extData1


!set kAnimation_currentActivationObject = kAnimation_currentActivationObject + 1
* = .t
}
}
