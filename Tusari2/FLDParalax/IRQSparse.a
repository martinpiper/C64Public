!align 255,0
!zn
IRQ_BottomBorder
	sta tempWorkIRQA
	stx tempWorkIRQX
	; Disable NMI sources. This neatly stops any NMI FLD or colour split effects or scrolling without needing any complex NMI termination calculation.
	lda #$7f
	sta CIA2InterruptControl

	; Blank out the bottom, part 1
	ldx #kVIC2ScreenControlVBits_ScreenOn | kVIC2ScreenControlVBits_Bitmap | kVIC2ScreenControlVBits_Extended
	; Wait...
	lda #VIC2SpriteYBorderBottom-3
.wl1
	cmp VIC2Raster
	beq .wl1
	; Blank out the bottom, part 2
	stx VIC2ScreenControlV

	lda #VIC2SpriteYBorderBottom
	sta VIC2Raster
	+MWordValueToAddress_A IRQ_Bottom , KERNALIRQServiceRoutineLo
	+MACROAckRasterIRQ_A
	ldx tempWorkIRQX
	lda tempWorkIRQA

	rti

IRQ_BottomStarted !by 0
IRQ_Bottom
	sta tempWorkIRQA
	stx tempWorkIRQX

	; This tries to make the NMI, just after the initial entry code above, start on the right hand border, repeatedly and precisely
	+DelayFor 39
	; Disable NMI sources and ACK anything
	lda #$7f
	sta CIA2InterruptControl
	lda CIA2InterruptControl
	+MWordValueToAddress_A NMI_Cloud1 , KERNALNMIServiceRoutineLo
	lda #0
	sta CIA2TimerAControl
	+MWordValueToAddress_A CyclesPerRasterPALC64 - 1, CIA2TimerALo
	lda #%00010001	; Restarting CyclesPerRasterPALC64 counter
	sta CIA2TimerAControl

	lda #0
	sta CIA2TimerBControl
	+MWordValueToAddress_A 118 , CIA2TimerBLo
	lda #%01010001	; Counting timer A iterations, repeating
	sta CIA2TimerBControl

	; Once started, the next start value can be set
	+MByteValueToAddress_A 7 , CIA2TimerBLo

	lda #$82	; NMI On timer B
	sta CIA2InterruptControl


!macro MProcessSplitYPos .table , .split {
	and #7 ; This causes the calculation to cycle around the scroll bits and also avoids any carry situation
	adc .table,x
	; Note: It is not required to enable the 25 row screen since the screen is already enabled for this frame and it cannot be switched off again during the display portion of the frame.
	; But not enabling the screen causes the deug display in C64DebugGUI to be displayed as empty, so we include these bits to enable the debug display.
	ora #kVIC2ScreenControlVBits_ScreenOn | kVIC2ScreenControlVBits_25Rows
	sta .split
}
	; Update the code with the desired sparse FLD parameters
	ldx WantFLD
	lda TableFLDSize1_YScroll,x
	ora #kVIC2ScreenControlVBits_ScreenOn | kVIC2ScreenControlVBits_25Rows
	sta NMI_FLDSize1_YScroll1
	clc
	+MProcessSplitYPos TableFLDSize1B_YScrollPlus , NMI_FLDSize1B_YScroll
	+MProcessSplitYPos TableFLDSize2_YScrollPlus , NMI_FLDSize2_YScroll
	+MProcessSplitYPos TableFLDSize2B_YScrollPlus , NMI_FLDSize2B_YScroll
	+MProcessSplitYPos TableFLDSize2C_YScrollPlus , NMI_FLDSize2C_YScroll
	+MProcessSplitYPos TableFLDSize2D_YScrollPlus , NMI_FLDSize2D_YScroll
	+MProcessSplitYPos TableFLDSize3_YScrollPlus , NMI_FLDSize3_YScroll
	+MProcessSplitYPos TableFLDSize3B_YScrollPlus , NMI_FLDSize3B_YScroll
	+MProcessSplitYPos TableFLDSize3C_YScrollPlus , NMI_FLDSize3C_YScroll
	+MProcessSplitYPos TableFLDSize3D_YScrollPlus , NMI_FLDSize3D_YScroll
	+MProcessSplitYPos TableFLDSize3E_YScrollPlus , NMI_FLDSize3E_YScroll
	+MProcessSplitYPos TableFLDSize3F_YScrollPlus , NMI_FLDSize3F_YScroll
	+MProcessSplitYPos TableFLDSize3G_YScrollPlus , NMI_FLDSize3G_YScroll
	+MProcessSplitYPos TableFLDSize3H_YScrollPlus , NMI_FLDSize3H_YScroll
	+MProcessSplitYPos TableFLDSize4_YScrollPlus , NMI_FLDSize4_YScroll
	+MProcessSplitYPos TableFLDSize4B_YScrollPlus , NMI_FLDSize4B_YScroll
	+MProcessSplitYPos TableFLDSize4C_YScrollPlus , NMI_FLDSize4C_YScroll
	+MProcessSplitYPos TableFLDSize4D_YScrollPlus , NMI_FLDSize4D_YScroll
	+MProcessSplitYPos TableFLDSize4E_YScrollPlus , NMI_FLDSize4E_YScroll
	+MProcessSplitYPos TableFLDSize4F_YScrollPlus , NMI_FLDSize4F_YScroll

	; Using C64DebugGUI, place cursor in right border, at least one character inside, where the row counter changes:
	; Row counter = 1 = bad line
	; One line before: Row counter = 7 Sequencer state = idle
	; One line before that: Row counter = 7 Sequencer state = display	<< Ideal FLD start by adding 2 lines, it gives an extra line grace period
	; One line before that: Row counter = 6 << Too soon for FLD

	lda #(3*8)+2
	clc
	adc TableFLDSize1_NextNextLines,x
	sta NMI_FLDSize1_NextNextLines

	; Taking into account the extra 3x4 sparse raster chunks used
	lda #(5*8)-12+1
	clc
	adc TableFLDSize2_NextNextLines,x
	sta NMI_FLDSize2_NextNextLines

	lda #1
	clc
	adc TableFLDSize3_NextNextLines,x
	sta NMI_FLDSize3_NextNextLines

;	lda #(1*8)+2
;	clc
;	adc TableFLDSize4_NextNextLines,x
;	sta NMI_FLDSize4_NextNextLines

	inc IRQ_BottomStarted

;	+DisplayGameScreenClouds
	+MByteValueToAddress_A VIC2Colour_Red , VIC2ScreenColour

	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV

	; Displays score sprites
	jsr Sprites_UpdateToVIC3

	lda #0
	sta VIC2Raster
	+MWordValueToAddress_A IRQ_TopBorder , KERNALIRQServiceRoutineLo
	+MACROAckRasterIRQ_A

	ldx tempWorkIRQX
	lda tempWorkIRQA

	rti

IRQ_TopBorder
	sta tempWorkIRQA
	stx tempWorkIRQX

	+DisplayGameScreenClouds

	jsr Sprites_UpdateToVIC2

	lda #VIC2SpriteYBorderBottom-3
	sta VIC2Raster
	+MWordValueToAddress_A IRQ_BottomBorder , KERNALIRQServiceRoutineLo
	+MACROAckRasterIRQ_A

	ldx tempWorkIRQX
	lda tempWorkIRQA

	rti


WantFLD !by 0

TableFLDSize1_YScroll
	!by 3 , 3 , 3 , 3
	!by 4 , 4 , 4 , 4
	!by 5 , 5 , 5 , 5
	!by 6 , 6 , 6 , 6
	!by 7 , 7 , 7 , 7
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0


TableFLDSize1B_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 1 , 1 , 1
	!by 2 , 2 , 2 , 2

TableFLDSize1_NextNextLines
	!by 0 , 0 , 0 , 0
	!by 1 , 1 , 1 , 1
	!by 2 , 2 , 2 , 2
	!by 3 , 3 , 3 , 3
	!by 4 , 4 , 4 , 4
	!by 5 , 5 , 5 , 5
	!by 6 , 6 , 6 , 6
	!by 7 , 7 , 7 , 7

TableFLDSize2_NextNextLines
	!by 0 , 0 , 1 , 1
	!by 2 , 2 , 3 , 3
	!by 4 , 4 , 5 , 5
	!by 6 , 6 , 7 , 7
	!by 8 , 8 , 9 , 9
	!by 10 , 10 , 11 , 11
	!by 12 , 12 , 13 , 13
	!by 14 , 14 , 15 , 15

TableFLDSize3_NextNextLines
	!by 0 , 1 , 2 , 3
	!by 4 , 5 , 6 , 7
	!by 8 , 9 , 10 , 11
	!by 12 , 13 , 14 , 15
	!by 16 , 17 , 18 , 19
	!by 20 , 21 , 22 , 23
	!by 24 , 25 , 26 , 27
	!by 28 , 29 , 30 , 31

TableFLDSize4_NextNextLines
	!by 0 , 2 , 4 , 6
	!by 8 , 10 , 12 , 14
	!by 16 , 18 , 20 , 22
	!by 24 , 26 , 28 , 30
	!by 32 , 34 , 36 , 38
	!by 30 , 42 , 44 , 46
	!by 48 , 50 , 52 , 54
	!by 56 , 58 , 60 , 62


TableFLDSize2_YScrollPlus
	!by 2 , 2 , 3 , 3
	!by 4 , 4 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5

TableFLDSize2B_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 1 , 2 , 2
	!by 3 , 3 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize2C_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 1 , 2 , 2
	!by 3 , 3 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize2D_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 1 , 2 , 2
	!by 3 , 3 , 4 , 4


TableFLDSize3_YScrollPlus
	!by 2 , 3 , 4 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5
	!by 5 , 5 , 5 , 5

TableFLDSize3B_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3C_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3D_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3E_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3F_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3G_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize3H_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 1 , 2 , 3 , 4

TableFLDSize4_YScrollPlus
	!by 2 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize4B_YScrollPlus
	!by 0 , 0 , 2 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize4C_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 2 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize4D_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 2 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize4E_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 2 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

TableFLDSize4F_YScrollPlus
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 0 , 0
	!by 0 , 0 , 2 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4
	!by 4 , 4 , 4 , 4

!align 255,0
!zn
NMI_Cloud1
	pha

;	+MByteValueToAddress_A VIC2Colour_LightGrey , VIC2ScreenColour
Cloud2_XScroll = * + 1
	lda #0
	sta VIC2ScreenControlH

	+MByteValueToAddress_A 7 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_Cloud2 , KERNALNMIServiceRoutineLo

	lda CIA2InterruptControl
	pla
	rti

NMI_Cloud2
	pha

;	+MByteValueToAddress_A VIC2Colour_Blue , VIC2ScreenColour
Cloud3_XScroll = * + 1
	lda #0
	sta VIC2ScreenControlH

	+MByteValueToAddress_A 14 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_Cloud3 , KERNALNMIServiceRoutineLo

	lda CIA2InterruptControl
	pla
	rti

NMI_Cloud3
	pha

;	+MByteValueToAddress_A VIC2Colour_LightBlue , VIC2ScreenColour
Cloud4_XScroll = * + 1
	lda #0
	sta VIC2ScreenControlH

	jsr Sprites_UpdateToVIC

	+MByteValueToAddress_A 4 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize1 , KERNALNMIServiceRoutineLo

	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize1
	pha
	; Initial sparse FLD, no need for ugly wasteful updates every raster line
NMI_FLDSize1_YScroll1 = * + 1
	+MByteValueToAddress_A 0 , VIC2ScreenControlV	; Causes a badline on $60

FLDSize1_XScroll = * + 1
	lda #0
	sta VIC2ScreenControlH

	+DisplayGameScreenTop

NMI_FLDSize1_NextNextLines = * + 1
	+MByteValueToAddress_A 4 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize1b , KERNALNMIServiceRoutineLo

	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize1b
	pha
NMI_FLDSize1B_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MByteValueToAddress_A 0 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize2 , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti


NMI_FLDSize2
	pha
NMI_FLDSize2_YScroll = * + 1
	+MByteValueToAddress_A 5 , VIC2ScreenControlV

	+MByteValueToAddress_A 2 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize2N , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl

	pla
	rti

NMI_FLDSize2N
	pha

	+MByteValueToAddress_A VIC2Colour_Grey , VIC2ScreenColour
	+DisplayGameScreenMiddle
FLDSize2b_smx1 = * + 1
	lda #2	; Start at this offset so it never coincides with the wall layer scroll above
	sta VIC2ScreenControlH
	+MByteValueToAddress_A 3 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize2b , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl

	pla
	rti

NMI_FLDSize2b
	pha
NMI_FLDSize2B_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize2c , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize2c
	pha
NMI_FLDSize2C_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
NMI_FLDSize2_NextNextLines = * + 1
	+MByteValueToAddress_A 24 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize2d , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize2d
	pha
NMI_FLDSize2D_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MByteValueToAddress_A 0 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize3 , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3
	pha
NMI_FLDSize3_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MByteValueToAddress_A 3 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize3N , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl

	pla
	rti

NMI_FLDSize3N
	pha
	+MByteValueToAddress_A VIC2Colour_DarkGrey , VIC2ScreenColour
	+DisplayGameScreenBottom
	+MWordValueToAddress_A NMI_FLDSize3b , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti


NMI_FLDSize3b
	pha
NMI_FLDSize3B_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
FLDSize3_smx2 = * + 1
	lda #0
	sta VIC2ScreenControlH
	+MWordValueToAddress_A NMI_FLDSize3c , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3c
	pha
NMI_FLDSize3C_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize3d , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3d
	pha
NMI_FLDSize3D_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize3e , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3e
	pha
NMI_FLDSize3E_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize3f , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3f
	pha
NMI_FLDSize3F_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize3g , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3g
	pha
NMI_FLDSize3G_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
NMI_FLDSize3_NextNextLines = * + 1
	+MByteValueToAddress_A 1 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize3h , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize3h
	pha
NMI_FLDSize3H_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MByteValueToAddress_A 1 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize4a , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4a
	pha
	+MByteValueToAddress_A VIC2Colour_Grey , VIC2ScreenColour
	+MByteValueToAddress_A 0 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize4b , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4b
	pha
	+MByteValueToAddress_A VIC2Colour_LightGrey , VIC2ScreenColour
	+MWordValueToAddress_A NMI_FLDSize4c , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti


NMI_FLDSize4c
	pha
NMI_FLDSize4_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MByteValueToAddress_A 2 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize4c2 , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4c2
	pha
	+MByteValueToAddress_A VIC2Colour_LightBlue , VIC2ScreenColour
FLDSize4_smx2 = * + 1
	lda #0
	sta VIC2ScreenControlH
	+MByteValueToAddress_A 3 , CIA2TimerBLo
	+MWordValueToAddress_A NMI_FLDSize4d , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4d
	pha
NMI_FLDSize4B_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize4e , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4e
	pha
NMI_FLDSize4C_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize4f , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4f
	pha
NMI_FLDSize4D_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize4g , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4g
	pha
NMI_FLDSize4E_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	+MWordValueToAddress_A NMI_FLDSize4h , KERNALNMIServiceRoutineLo
	lda CIA2InterruptControl
	pla
	rti

NMI_FLDSize4h
	pha
NMI_FLDSize4F_YScroll = * + 1
	+MByteValueToAddress_A 2 , VIC2ScreenControlV
	lda #$7f
	sta CIA2InterruptControl
	pla
	rti

