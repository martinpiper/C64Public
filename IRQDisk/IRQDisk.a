IRQDiskCodeStart
; Number of bytes to use during the drive memory transfer
.driveTransferBytes = $20
; Used during transfers so we can get status information
.driveEscapeByte = $ea


; Commands used to send to the device
.diskCommandReadFile = 1
.diskCommandWriteFile = 2
.diskCommandSetPulseSpeed = 3
.diskCommandFutureExpansion = 4
.diskCommandSendClockedData = 5

!ifdef IRQDisk_NoDriveCode { } else {
; By default after the init the drive has incomming port %00 which is C0D0.
; By default after the init the C64 is getting %11 on the port which is C0D0.
;***************************************
.linitError jmp .initError
IRQDisk_Init
	sta .toDrive
	; Clear any previous disk related errors
	lda #0
	sta ZPSTVariable
	; Initialize the self-modifying parts of the code
	lda #<.driveCodePseudoStart
	sta .smwdcbl + 1
	lda #>.driveCodePseudoStart
	sta .smwdcbl + 2
	lda #<.driveCodeRealStart
	sta .commandMWLo
	lda #>.driveCodeRealStart
	sta .commandMWHi
	; Send the M-W command telling the .driveCodeRealStart we are going to send .driveTransferBytes data
	; Start of the write drive code loop
.wdcl:
	; Make the drive listen for the command
	jsr IRQDisk_InitDrive
	jsr READST
	and #%10000011	; Ignore EOI
	bne .linitError
	ldx #0
.mwoutl:
	lda .commandMW,x
	jsr CIOUT
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError
	inx
	cpx #.commandMWLength
	bne .mwoutl

	; Sends a chunk of .driveTransferBytes bytes of drive code following the M-W command
	ldx #0
.smwdcbl:
	lda .driveCodePseudoStart,x
	jsr CIOUT
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError
	inx
	cpx #.driveTransferBytes
	bne .smwdcbl

	; Finish the command
	jsr UNLSN
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError

	; Update the self-modifying addresses for .driveTransferBytes bytes for the drive code
	clc
	lda #.driveTransferBytes
	adc .smwdcbl + 1
	sta .smwdcbl + 1
	bcc .skiphi1
	; Update the high byte
	inc .smwdcbl + 2
	clc
.skiphi1:
	; Update the self-modifying addresses for .driveTransferBytes bytes for the M-W command address
	; Lo first
	lda #.driveTransferBytes
	adc .commandMWLo
	sta .commandMWLo
	tax
	; Hi next using the carry
	lda #0
	adc .commandMWHi
	sta .commandMWHi
	cpx #<.driveCodeRealEnd
	sbc #>.driveCodeRealEnd
	; If we have not finished uploading the drive code we go back and do another M-W command
	bcc .wdcl

	; Send M-E command to start running the drive code
	; Make the drive listen for the command
	jsr IRQDisk_InitDrive
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError
	ldx #0
.meoutl:
	lda .commandME,x
	jsr CIOUT
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError
	inx
	cpx #.commandMELength
	bne .meoutl

	; Finish the command
	jsr UNLSN
	jsr READST
	and #%10000011	; Ignore EOI
	bne .initError

	; Try setting the pulse speed, this syncs the communication between the drive and the computer.
	lda #1
	jsr IRQDisk_SetPulseSpeed
	; Fake a time out error if the carry is set on this return
	lda #%11
	bcs .initError

	rts
.initError
	sta .lastDriveError
	sec
	rts
.lastDriveError !by 0

; The drive number we want to use
.toDrive !by 8

	; The M-W command
.commandMW:
	!raw "M-W"
.commandMWLo !by <.driveCodeRealStart
.commandMWHi !by >.driveCodeRealStart
	!by .driveTransferBytes
.commandMWLength = * - .commandMW

	; The M-E command
.commandME:
	!raw "M-E"
	!by <.driveCodeRealStart,>.driveCodeRealStart
.commandMELength = * - .commandME

;***************************************
	; Make the chosen drive listen
IRQDisk_InitDrive:
	lda .toDrive
	jsr LISTEN
	; http://www.joler.org/storage/C64PRG10.TXT
	; B-27. Function Name: SECOND - "When a secondary address is to be sent to a device on the serial bus, the address must first be ORed with $60."
	lda #$6f	; $f (command channel) OR $60
	jmp SECOND
}

!ifndef IRQDisk_NoCode_Load {
;***************************************
	; The actual IRQ loader
.loadError
rts
; On return:
;	CC = Load OK
;	CS = Load error
IRQDisk_Load:
	jsr IRQDisk_SendLoadName
	bcs .loadError
!ifndef IRQDisk_NoCode_LoadAfterName {
	jmp IRQDisk_LoadDataAfterName
} else {
	rts
}

IRQDisk_SendLoadName
	pha
	; Update the self modify file name address
	stx .smFileNameIn+1
	sty .smFileNameIn+2

	; Send the command code to read a file
	lda #.diskCommandReadFile
	jsr IRQDisk_computerSend
	pla
	bcs .loadError
	tay
	; Send the file name length
	jsr IRQDisk_computerSend
	bcs .loadError
	; Send file name
	ldx #0
!ifdef IRQDisk_UseATN {
	stx .gotAddrB
}
.smFileNameIn	lda $0000,x
	jsr IRQDisk_computerSend
	bcs .loadError
	inx
	dey
	bne .smFileNameIn
	; Caqrry clear here
	rts

!ifndef IRQDisk_NoCode_LoadAfterName {

IRQDisk_LoadDataAfterName
!ifdef IRQDisk_UseATN {
	; Start the disk loading loop
.diskLoadL:
	; Avoid any conflict with the drive switching from ATN mode to 1-bit mode
	+DelayFor IRQDisk_C64FromBurstGuardTime

	; Gets the number of bytes to process, or the EOF escape code, or an error escape code
	jsr IRQDisk_computerRecv
	tay

	; This delay is to allow the drive time to setup the next byte and begin waiting for the ATN strobe
	+DelayFor IRQDisk_C64ToBurstGuardTime

.diskLoadL2
	jsr IRQDisk_computerRecvBitsATNBurst
	ldx .gotAddrB
	bne .gotAddrSkip
	; Store the start address first time around
	sta .storeLo
	dey
	jsr IRQDisk_computerRecvBitsATNBurst
	sta .storeHi
	dey
	lda #1
	sta .gotAddrB
	; Now the first char
	jsr IRQDisk_computerRecvBitsATNBurst
.gotAddrSkip
	; Check for the rare case of having no more bytes left to process
	cpy #0
	beq .diskLoadL
	; Receives the next byte from the drive and exits this loop by popping the stack
.storeLo = * + 1
.storeHi = * + 2
	; Store the data
	sta $100
	; Useful debugging displays chars on the screen or flashes the border
;	sta $400	; store it
!ifdef IRQDisk_UpdateRegisterOnDataStore {
	inc IRQDisk_UpdateRegisterOnDataStore
	sta IRQDisk_UpdateRegisterOnDataStore
}
	inc .storeLo
	bne .dls1
	inc .storeHi
.dls1:
	dey
	bne .diskLoadL2
	jmp .diskLoadL
.gotAddrB !by 0
} else {
	jsr IRQDisk_computerRecv	; get the start address
	tay
	jsr IRQDisk_computerRecv
	sta .storeHi

	; Start the disk loading loop
.diskLoadL:
	; Receives the next byte from the drive and exits this loop by popping the stack
	jsr IRQDisk_computerRecv
.storeHi = * + 2
	; Store the data
	sta $100,y
	; Useful debugging displays chars on the screen or flashes the border
;	sta $400,y	; store it
!ifdef IRQDisk_UpdateRegisterOnDataStore {
	inc IRQDisk_UpdateRegisterOnDataStore
	sta IRQDisk_UpdateRegisterOnDataStore
}
	iny
	bne .diskLoadL
	inc .storeHi
	jmp .diskLoadL
}

IRQDisk_GetLastStoredHi
	lda .storeHi
	rts

} ; <!ifndef IRQDisk_NoCode_LoadAfterName {

	; Gets a byte from the drive with escape byte parsing
IRQDisk_computerRecv:
	jsr IRQDisk_computerRecvBits
	cmp #.driveEscapeByte
	bne .notEscape
	; We got the escape code so we get another byte
	jsr IRQDisk_computerRecvBits
	; Is it the escape code again? If yes it is the actual byte
	cmp #.driveEscapeByte
	beq .notEscape

	; Compare the status returned from the drive
	; Transfer finished. 0=ok, nonzero=error. Carry clear or set by this.
	cmp #1
	; Pop the return address and go back to to whomever called us
	pla
	pla

.notEscape:
	rts

} ;< !ifndef IRQDisk_NoCode_Load {

!ifndef IRQDisk_NoCode_Pulse {
;***************************************
; Sets the pulse speed
; On return:
;	CC = Communication OK
;	CS = Communication error
IRQDisk_SetPulseSpeed:
	pha
	; Send the command code to set the pulse speed
	lda #.diskCommandSetPulseSpeed
	jsr IRQDisk_computerSend
	pla
	; If there was a problem then don't send the next byte
	bcs .end1
	; Send the pulse speed
	jsr IRQDisk_computerSend
	; Don't wait for a reply from the drive
.end1
	rts
} ;< !ifndef IRQDisk_NoCode_Pulse {

!ifndef IRQDisk_NoCode_Save {
;***************************************
; The sets the name to start saving data with. It will return quite quickly while the drive tries
; to find the file name, hence the user will only know if the name was found when IRQDisk_WriteData
; is called to actually try to start saving.
; On return:
;	CC = Communication OK
;	CS = Communication error
IRQDisk_WriteSetName:
	pha
	; Update the self modify file name address
	stx .smFileNameIn2+1
	sty .smFileNameIn2+2

	; Send the command code to write a file
	lda #.diskCommandWriteFile
	jsr IRQDisk_computerSend
	pla
	tay
	; Send the file name length
	jsr IRQDisk_computerSend
	; Send file name
	ldx #0
.smFileNameIn2	lda $0000,x
	jsr IRQDisk_computerSend
	inx
	dey
	bne .smFileNameIn2
	rts

; On return:
;	CC = Save OK
;	CS = Save error
IRQDisk_WriteData
	stx .diskSaveL + 1
	sty .diskSaveL + 2
	jsr IRQDisk_computerRecv	; get the return code or the number of bytes to save to the file
	tay
	; Theoretically it is possible to have a file on the disk with 1 or 2 bytes so in these situations
	; skip saving the start address
	cpy #3
	bcc .diskSaveL:
	; We send two bytes for the start address so adjust the first bytes to send by 2
	dey
	dey
	; Send lo and hi
	lda .diskSaveL+1
	jsr IRQDisk_computerSend
	lda .diskSaveL+2
	jsr IRQDisk_computerSend
	; Start the disk saving loop
.diskSaveL:
	lda $0000
	inc .diskSaveL + 1
	bne .diskSaveL2
	inc .diskSaveL + 2
.diskSaveL2
	jsr IRQDisk_computerSend
	dey
	bne .diskSaveL
	; Receives the next byte from the drive which might be the number of bytes to send next or
	; an error code which exits this loop by popping the stack.
	jsr IRQDisk_computerRecv
	; We are told how many bytes to transfer next
	tay
	jmp .diskSaveL
} ;< !ifndef IRQDisk_NoCode_Save {

	; Used by the sending and receiving code
.tempStore !by 0,0,0

; C: When writing a byte to the drive
; C: Writes carry set as C0D1 or carry clear as C1D0
; C: Waits for C1D1, the ACK
; C: Send C1D1
; C: Wait for C0D0 (which is the default state for the C64)
; C: Loop for the rest of the bits
;***************************************
	; Writes a byte to the drive
IRQDisk_computerSend:
	sta .tempStore
	stx .tempStore+1
	sty .tempStore+2
	; Counter for 8 bits to send
	ldx #8
.writeBit1:
	; Get the low bit into the carry
	lsr .tempStore
	; Send the data, either carry clear = C0D1 or CS = C1D0
	lda .serialOut
	and #255 - .serialDataOut - .serialClockOut
	ora #.serialClockOut
	bcc .noInvert2
	eor #.serialDataOut | .serialClockOut
.noInvert2:
	sta .serialOut

	ldy #0
	; Now wait for a C1D1, the ACK
	lda #.serialDataIn | .serialClockIn
.waitACK1:
	dey
	beq .timeOut1
	bit .serialIn
	; If C0 or D0 then loop
	bne .waitACK1

	; Now send C1D1 to signal the end of the bit sent
	lda .serialOut
	and #255 - .serialDataOut - .serialClockOut
	sta .serialOut

	; Wait for the C0D0
	ldy #0
.waitACK2:
	dey
	beq .timeOut1
	lda .serialIn
	and #.serialDataIn | .serialClockIn
	eor #.serialDataIn | .serialClockIn
	; If C1 or D1 then loop
	bne .waitACK2

	; Loop until we have sent all the bits
	dex
	bne .writeBit1
	clc
	ldx .tempStore+1
	ldy .tempStore+2
	rts

.timeOut1
	sec
	ldx .tempStore+1
	ldy .tempStore+2
	rts

; When getting bits
; Wait while getting C0D0
; Then .serialDataIn = actual bit, the clock is actually the opposite of the data bit. It is the clock
; change combined with the data change that signals the data bit is ready.
; If we got 1 then ACK by sending C0D1 else send C1D0
; Shift carry into data
; Wait while C1D1
; Send C1D1
; Loop for the other bits
;***************************************
!ifdef IRQDisk_UpdateRegisterOnIdle {
.tempDelay !by 0
}

	; Gets a byte from the drive without escape byte parsing
IRQDisk_computerRecvBits:
	; Counter for 8 bits to receive
	ldx #8
.waitIdle1:
!ifdef IRQDisk_UpdateRegisterOnIdle {
	inc .tempDelay
	bne .tempDelayo1
	inc IRQDisk_UpdateRegisterOnIdle
	sta IRQDisk_UpdateRegisterOnIdle
.tempDelayo1
}
	; Wait while C0D0
	lda .serialIn
	and #.serialDataIn | .serialClockIn
	eor #.serialDataIn | .serialClockIn
	beq .waitIdle1

	; Choose the best code to get carry from the serial data in bit
!if .serialDataIn = 128 {
	asl
} else {
!if .serialDataIn < .serialClockIn {
	and #.serialDataIn
}
	cmp #.serialDataIn
}

	; Send the opposite of the received data to ACK, so if carry set send C0D1 else send C1D0
	; Due to the way the CIA works this ends up sending C1D1 to the drive
	lda .serialOut
	and #255 - .serialDataOut - .serialClockOut
	ora #.serialClockOut
	bcs .noInvert
	eor #.serialDataOut | .serialClockOut
.noInvert:
	sta .serialOut

	; Shift in the data bit
	ror .tempStore

	; Wait while C1D1
	lda #.serialDataIn | .serialClockIn
.waitACK3:
	bit .serialIn
	; If C1 and D1 then loop
	beq .waitACK3

	; Send C1D1 to signal the next bit should be sent
	lda .serialOut
	and #255 - .serialDataOut - .serialClockOut
	sta .serialOut

	; Loop around getting the rest of the bits
	dex
	bne .waitIdle1	; loop until all bits are received

	; Enable the following line to show border changes for each byte received
;	inc VIC2BorderColour

	lda .tempStore

!ifdef IRQDisk_UpdateRegisterOnData {
	inc IRQDisk_UpdateRegisterOnData
	sta IRQDisk_UpdateRegisterOnData
}

	rts

!ifdef IRQDisk_TestClockedTransfer {

IRQDisk_SendClockedRecv:
	lda #.diskCommandSendClockedData
	jsr IRQDisk_computerSend
	rts


IRQDisk_ClockedRecv:
	; Counter for 8 bits to receive
	ldx #8
.waitClock1:
	; Wait while C1
	lda .serialIn
	sta .smbit1
	and #.serialClockIn
	bne .waitClock1

.smbit1=*+1
	lda #0

	; Choose the best code to get carry from the serial data in bit
!if .serialDataIn = 128 {
	asl
} else {
!if .serialDataIn < .serialClockIn {
	and #.serialDataIn
}
	cmp #.serialDataIn
}

	; Shift in the data bit
	ror .tempStore

	; Wait while C0
	lda #.serialClockIn
.waitClock0:
	bit .serialIn
	beq .waitClock0

	; Loop around getting the rest of the bits
	dex
	bne .waitClock1	; loop until all bits are received


	lda .tempStore

!ifdef IRQDisk_UpdateRegisterOnData {
	; Debug timing
	sta IRQDisk_UpdateRegisterOnData
}
	rts

}

!ifdef IRQDisk_UseATN {

; Table of flags for which raster lines are going to be safe for the ATN 2-bit transfer to begin on. This avoids bad line timing issues.
; If there are any stable rasters, or sprites, these can also be removed from this table.
IRQDisk_MarkUnsafeRaster
!ifndef IRQDisk_NoScreenNoIRQ {
	lda #1
	ldy #IRQDisk_SafeRasterGuard
.sl1
	sta IRQDisk_SafeRasters,x
	dex
	dey
	bne .sl1
}
	rts

!ifndef IRQDisk_NoScreenNoIRQ {
IRQDisk_SafeRasterGuard = 3
; 0 = safe, 1 = not safe
IRQDisk_SafeRasters
	!fill 48 , 0
!for .i , VIC2ScreenCharsHeight {
	; 0, 3, 4, 5, 6, 7 are "safe". Empirically tested.
	; 0 is interesting, if a bad line happens during the last bit pair decode, it doesn't matter if it is delayed as long as the serial read is OK
	!by 0,1,1,0,0,0,0,0
}
	!fill 16 , 0
}

.serialBitPairToRealBitPair
!for .ii , 256 {
	!set .i = .ii -1
	!set .val1 = 0
	!set .val2 = 0
	!if (.i & .serialClockIn) > 0 {
		!set .val1 = $40
	}
	!if (.i & .serialDataIn) > 0 {
		!set .val2 = $80
	}
	!by .val1 | .val2
}

IRQDisk_computerRecvBitsATNBurst:
!ifndef IRQDisk_NoScreenNoIRQ {
	lda #kVIC2ScreenControlVBits_RasterHi
	bit VIC2ScreenControlV
	bne .okGet

.waitRaster
	ldx VIC2Raster
	lda IRQDisk_SafeRasters,x
	bne .waitRaster
.okGet
}

	; Stop IRQs from messing with our timings
	sei

	; The drive sits in a very tight loop when in burst mode and with the C64 slower than the drive we only wait a short while.

	; Strobe ATN to signal the drive to send four pairs of two bits
	lda .serialOut
	ora #.serialATNOut
	sta .serialOut
!ifdef IRQDisk_UseATNACK {
	; Wait for ACK from drive
	lda #.serialDataIn
.wl1	bit .serialIn
	beq .wl1
}
	lda .serialOut
	and #!.serialATNOut
	sta .serialOut

	; Debug test read for serial cycle comms visualisation
!if 0 {
.testRead
!for .i ,256 {
	lda .serialIn
}
	rts
}

!macro MC64DecodeBitPair .first , .serialIn , .tempStore , .serialBitPairToRealBitPair {
	; Decode two bits using the table and shift them in
	ldx .serialIn
!if .first > 0 {
	lda .serialBitPairToRealBitPair,x
} else {
	lsr
	lsr
	ora .serialBitPairToRealBitPair,x
}
}

!ifndef IRQDisk_UseATNACK {
	; This delay ensures the first serial read is going to be after the drive, regardless of the slight wobble after its wait
	+DelayFor IRQDisk_C64FirstBurstReadDelay
}

	; The drive is calculating the 2-bit pattern to send here
	+DelayFor IRQDisk_DriveSendBurstDriveCalculationTimeFirst
	+MC64DecodeBitPair 1 , .serialIn , .tempStore , .serialBitPairToRealBitPair
	+DelayFor IRQDisk_DriveSendBurstDriveCalculationTimeRest
	+MC64DecodeBitPair 0 , .serialIn , .tempStore , .serialBitPairToRealBitPair
	+DelayFor IRQDisk_DriveSendBurstDriveCalculationTimeRest
	+MC64DecodeBitPair 0 , .serialIn , .tempStore , .serialBitPairToRealBitPair
	+DelayFor IRQDisk_DriveSendBurstDriveCalculationTimeLast
	+MC64DecodeBitPair 0 , .serialIn , .tempStore , .serialBitPairToRealBitPair

	; Allow IRQs again
	cli

	rts
}

IRQDiskCodeEnd
IRQDiskCodeSize = IRQDiskCodeEnd - IRQDiskCodeStart
