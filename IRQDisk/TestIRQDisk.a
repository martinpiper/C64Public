;IRQDisk test code

; Run BuildIt.bat
; Run the test.d64 as the first file is the assembled TestIRQDisk.a
; Observe the black screen and white border
; Press fire - Note the drive LED pulses and the black raster bar in the middle of the screen border.
; Press fire - Note the file "SCREEN1" loads
; After loading, note red border white raster bar
; Press fire - Note the file "SCREEN2" loads
; After loading, note cyan border red raster bar
; Press fire - Screen goes white, file is saved to "TESTSAVE"
; After saving, note purple border and cyan raster
; Press fire - Note "formula too complex" error, indicating a RTS back to BASIC(ish)

; A good way to develop or optimise code is to enable "IRQDisk_NoScreenNoIRQ" first. Make sure optimisations work without worrying about instability.
; Then disable "IRQDisk_NoScreenNoIRQ" then tweak IRQDisk_SafeRasters to make the code stable again.

; NOTE: These timings wil be different due to the TestIRQ raster bar effect being wider than before
; Current using IRQDisk_DebugElapsedTime no IRQDisk_DebugRepeatLoads, time from .repeatLoad to JAM:
; break .repeatLoad then sw reset, then when JAM, use sw
; 1 bit screen on:								2872209
; IRQDisk_UseATN with screen and IRQ enabled:	2707479
; IRQDisk_UseATN no screen:						2299032
; 1-bit minus 2-bit screen on:	164730
; 2-bit screen on div 1-bit:		0.9426469313340359
; 2-bit screen off div 1-bit:		0.8004403579265994


!source "../stdlib/stdlib.a"
!to "TestIRQDisk.prg", cbm
!sal
!sl "TestIRQDisk.map"
!svl "TestIRQDisk.lbl"
!pdb "TestIRQDisk.pdb"
!cpu 6510
!ct pet

!source "IRQDiskVars.a"
IRQDisk_MachineTarget = IRQDisk_MachineTypeC64
IRQDisk_Retries = 5
IRQDisk_LEDFlash = 15
IRQDisk_UseATN = 1
;IRQDisk_UseATNACK = 1

TheRasterBarPosition = 148

; Enable this to disable the screen
;IRQDisk_NoScreenNoIRQ = 1

; Enable this to cause timing debug code to run instead. It helps show timings for 2 bit transfer.
;IRQDisk_DebugTimings = 1

; Enable this to use the JAM opcode and remove joystick fire waits. Stop the save from happening. Useful for timing the loading speed.
; Remember to use this Vice command line option to stop random delays on boot: -drive8wobble 0 +autostart-delay-random
IRQDisk_DebugElapsedTime = 1

; Enable this to repeatedly execute the loads, removes the JAM from IRQDisk_DebugElapsedTime, easier to debug with IRQDisk_DebugElapsedTime
; Also good for soak tests
IRQDisk_DebugRepeatLoads = 1

; This enables a test of data transfer on the rising edge of the clock line. It can be clocked twice as fast as the normal transfer when the screen and IRQs are disabled.
; Rising egde of the clock means the timing on the C64 side is not so tight and can cope with some wobble.
;IRQDisk_TestClockedTransfer = 1


; Choose border effects
IRQDisk_UpdateRegisterOnIdle = VIC2BorderColour
IRQDisk_UpdateRegisterOnData = VIC2BorderColour
IRQDisk_UpdateRegisterOnDataStore = VIC2BorderColour


TestIteration = $200
TestIterationBreakAt = $2b2

* = $500
ThisIsSomeOverlappingCode
.bph
	nop
	lda #1
	lda #2
	lda #3
	lda #4
	rts



* = $8000
	lda #ProcessorPortKERNALWithIO
	jsr InitialiseMachine
	jsr ThisIsSomeOverlappingCode
	+InitKERNALIO_AXY
	+SetDefaultScreen_A
	lda #1
	sta VIC2BorderColour
!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	lda ZPCurrentFileDeviceNumber
	jsr IRQDisk_Init

!ifdef IRQDisk_TestClockedTransfer {
	; Code to test clocked transfer, perhaps useful when IRQ and screen are off
	lda #0
	sta VIC2ScreenControlV
	sei
	+MACROWaitForRaster 0
	jsr IRQDisk_SendClockedRecv
	ldy #0
.ll1
	jsr IRQDisk_ClockedRecv
	; Validate the values and jam when they do not match
	sta .smt1
	tya
.smt1=*+1
	cmp #0
	bne .dojam
	sta SCREENRAM,y
	iny
	jmp .ll1
.dojam jam
	!tx "error in clock"
}

	; Make sure there are no bad lines, needed for testing highly synchronised drive code
!ifdef IRQDisk_NoScreenNoIRQ {
	lda #0
	sta VIC2ScreenControlV
}

	+MWordValueToAddress_A 0 , TestIteration

!ifdef IRQDisk_DebugTimings {
.l1
	lda .serialIn
	lsr
	lsr
	lsr
	lsr
	sta VIC2BorderColour
	jmp .l1
}

	lda #8
	jsr IRQDisk_SetPulseSpeed

	; Debugging drive bytes, useful for testing patterns to/from the CIA/VIA
!if 0 {
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	sei	; Stop any IRQs from messing with our test

.testL1
	; C0D0
	lda #55
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C0D1
	lda #23
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C1D0
	lda #39
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C1D1
	lda #7
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	jmp .testL1

.waitAWhile
	ldx #0
.waw1
	dex
	bne .waw1
	rts
}

!ifndef IRQDisk_NoScreenNoIRQ {
	jsr InitIRQ
}

.repeatLoad
!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	; If things go wrong, this helps repeat the test iteration
	+MIncAddr16 TestIteration , TestIteration+1

!ifdef TestIterationBreakAt {
	lda TestIteration
	cmp #<TestIterationBreakAt
	bne .nope1
	lda TestIteration+1
	cmp #>TestIterationBreakAt
	bne .nope1
.bph1
	nop
.nope1
}

	lda #.nameTestEnd-.nameTest
	ldx #<.nameTest
	ldy #>.nameTest
	jsr IRQDisk_Load
	jsr ValidateScreenWithExpected1

	inc VIC2BorderColour

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	; If things go wrong, this helps repeat the test iteration
	+MIncAddr16 TestIteration , TestIteration+1

!ifdef TestIterationBreakAt {
	lda TestIteration
	cmp #<TestIterationBreakAt
	bne .nope2
	lda TestIteration+1
	cmp #>TestIterationBreakAt
	bne .nope2
.bph2
	nop
.nope2
}

	lda #.nameTest2End-.nameTest2
	ldx #<.nameTest2
	ldy #>.nameTest2
	jsr IRQDisk_Load
	jsr ValidateScreenWithExpected2

	inc VIC2BorderColour

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	; If things go wrong, this helps repeat the test iteration
	+MIncAddr16 TestIteration , TestIteration+1

!ifdef TestIterationBreakAt {
	lda TestIteration
	cmp #<TestIterationBreakAt
	bne .nope3
	lda TestIteration+1
	cmp #>TestIterationBreakAt
	bne .nope3
.bph3
	nop
.nope3
}

	lda #.nameTest3End-.nameTest3
	ldx #<.nameTest3
	ldy #>.nameTest3
	jsr IRQDisk_Load
	jsr ValidateScreenWithExpected3

	inc VIC2BorderColour

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

!ifdef IRQDisk_DebugRepeatLoads {
	jmp .repeatLoad
}

!ifdef IRQDisk_DebugElapsedTime {
	jam
	!tx "ok"
}

!if 1 {
	; Now try saving the just loaded data to another file of the same length.
	inc VIC2ScreenColour
	lda #.nameTestSaveEnd-.nameTestSave
	ldx #<.nameTestSave
	ldy #>.nameTestSave
	jsr IRQDisk_WriteSetName
	; The drive is in the process of finding the directory entry here.
	ldx #<BASICSTART
	ldy #>BASICSTART
	jsr IRQDisk_WriteData
}

	inc VIC2BorderColour

	+WaitForFire_A
	
	rts

	; Note, the ct raw is used here
.nameTest !raw "SCREEN1"
.nameTestEnd = *
.nameTest2 !raw "SCREEN2"
.nameTest2End = *
.nameTest3 !raw "SCREEN3"
.nameTest3End = *

.nameTestSave !raw "TESTSAVE"
.nameTestSaveEnd = *

TestIRQ
	pha
	txa
	pha

	; Raster bar effect demo
	+MACRODelay_X 1
	+MByteValueToAddress_A VIC2Colour_White , VIC2ScreenColour
	+MAlsoToAddress_A VIC2BorderColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_LightGrey , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_Grey , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_DarkGrey , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour

	+MACRODelay_X 130
	+MByteValueToAddress_A VIC2Colour_Grey , VIC2ScreenColour
	+MAlsoToAddress_A VIC2BorderColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_LightGrey , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_White , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour
	+MACRODelay_X 11
	+MByteValueToAddress_A VIC2Colour_Black , VIC2BorderColour
	+MAlsoToAddress_A VIC2ScreenColour

	+MACROAckRasterIRQ_A
	pla
	tax
	pla
	jmp MinimalIRQServiceRoutine

InitIRQ
	sei
	; Stop the timers generating IRQs
	lda #$7f
	sta CIA1InterruptControl
	sta CIA2InterruptControl
	; Grab the IRQ
	lda #<TestIRQ
	sta IRQServiceRoutineLo
	lda #>TestIRQ
	sta IRQServiceRoutineHi
	; Raster position
	ldx #TheRasterBarPosition
	stx VIC2Raster
!ifdef IRQDisk_UseATN {
	jsr IRQDisk_MarkUnsafeRaster
}

	lda VIC2ScreenControlV
	and #$7f
	sta VIC2ScreenControlV
	; VIC IRQ control
	lda #1
	sta VIC2InteruptControl
	+MACROAckRasterIRQ_A
	cli
	rts

; This block of code includes the IRQ disk libs, note the !zn is here instead of in the libs.
;!zn {
; Include the private code for each machine type
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeVIC20 {
!source "IRQDiskVIC20.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC16 {
!source "IRQDiskC16.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC64 {
!source "IRQDiskC64.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC128 {
!source "IRQDiskC128.a"
}
!source "IRQDisk.a"
!source "stdlib1541.a"
!source "IRQDiskDriveCode.a"
;}

!source "../stdlib/Initialise.a"


ExpectedData1
	!bin "screen1.prg",,2

ExpectedData2
	!bin "screen1.prg",$132,2
	!bin "screen2.prg",,2
	!bin "screen1.prg",,2 + $366

!zn
ValidateScreenWithExpected1
	ldx #0
.cl1
	lda SCREENRAM+$000,x
	cmp ExpectedData1+$000,x
	bne .error
	lda SCREENRAM+$100,x
	cmp ExpectedData1+$100,x
	bne .error
	lda SCREENRAM+$200,x
	cmp ExpectedData1+$200,x
	bne .error
	lda SCREENRAM+$2e8,x
	cmp ExpectedData1+$2e8,x
	bne .error
	inx
	bne .cl1
	rts

ValidateScreenWithExpected2
	ldx #0
.cl2
	lda SCREENRAM+$000,x
	cmp ExpectedData2+$000,x
	bne .error
	lda SCREENRAM+$100,x
	cmp ExpectedData2+$100,x
	bne .error
	lda SCREENRAM+$200,x
	cmp ExpectedData2+$200,x
	bne .error
	lda SCREENRAM+$2e8,x
	cmp ExpectedData2+$2e8,x
	bne .error
	inx
	bne .cl2
	rts

ValidateScreenWithExpected3
	+MWordValueToAddressLoHi_A SCREENRAM , .sm1+1 , .sm1+2
	ldx #0
.cl3
	; Should be this repeating pattern
	txa
.sm1	cmp SCREENRAM,x
	bne .error
	inx
	bne .cl3
	inc .sm1+2
	lda .sm1+2
	cmp #$74
	bne .cl3
	rts

.error
	jam
	!tx "error in data"

;!if * >= VIC {
!if * >= BASICROM {
	!error "Code too large"
}



!pseudopc $500 {
ThisIsSomeOverlappingCode2
.bph2
	bit $1234
	ldx #1
	ldx #2
	ldx #3
	ldx #4
	rts
}
