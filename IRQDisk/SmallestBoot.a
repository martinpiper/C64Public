!source "../stdlib/stdlib.a"

; Smallest disk file boot code
; Because the disk store byte at $f51c quickly calls the STOP vector at $328 which usually points to $f6ed
; we can alter the low byte to point to a brk instruction at $f616
; Since no other vectors from $316 (BRK) to $328 (STOP) are accessed during a disk load, we can put code there.

!ifndef CodeStart {
CodeStart = $c000
}

; Claim the BRK vector
*=BRKServiceRoutineLo
	!word start

; This overwrites the NMI vector onwards, but they are not called during a load...
start
	jsr KERNALSerialBus_ReceiveData
.sm1 sta CodeStart
	inc .sm1+1
	bne start
	jmp CodeStart
*=STOPVectorLo
	!by $16	; Point STOP vector to $f616 instead of the default $f6ed

!labelredefine

!pseudopc CodeStart {
RelocStart
.start = *
	+MStopInitStack_X
	jsr KERNALRestoreIOVectors

	jsr CLRSCR

	lda #0
	sta VIC2ScreenColour
	jsr SETMSG

	lda #<StopKeyCheck
	sta STOPVectorLo
	lda #>StopKeyCheck
	sta STOPVectorHi

	lda #8
	ldx ZPCurrentFileDeviceNumber
	ldy #1
	jsr SETLFS
	lda #.fileNameEnd-.fileNameStart
	ldx #<.fileNameStart
	ldy #>.fileNameStart
	jsr SETNAM
	lda #0
	ldx #$ff
	ldy #$ff
	jsr LOAD
;	stx ZPStartVariableLo
;	sty ZPStartVariableHi

	jmp $80d

StopKeyCheck
	; This flashes the border during loading because the load routine checks the stop key.
	lda #1
	sta VIC2BorderColour
	dec VIC2BorderColour
	; Tell the kernal we are not pressing the stop key, honest
	lda #$ff
	rts

.fileNameStart !pet "testirqdisk"
.fileNameEnd

RelocEnd
}

!if RelocEnd > VIC {
!error "Code too large"
}

CodeStart = VIC - (RelocEnd - RelocStart)

!labelredefineend
