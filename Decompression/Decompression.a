; Implements LZMPi decompression for 6502. Most of the lengths and offsets for the PC version use 32 bits, this version uses 16 bits.
; To use:
; 	ldx #<decompressTo
; 	ldy #>decompressTo
; 	jsr RNXPCompressionDecompress_InitStore
; 	ldx #<CompressedData
; 	ldy #>CompressedData
; 	jsr RNXPCompressionDecompress
; The macro RNXPCompressionIncBorder_A will need to be defined before including this file. This macro can be useful for changing the border colour during decompression.
; For example:
;!macro RNXPCompressionIncBorder_A {
;	lda ZPProcessorPort
;	pha
;	lda #ProcessorPortAllRAMWithIO
;	sta ZPProcessorPort
;	inc VIC2BorderColour
;	pla
;	sta ZPProcessorPort
;}


;To use these options define the labels below before including this source file.
;To optimise the code for one escape bit then define the below label below.
;Decompression_OptimiseForOneEscapeBit = 1

;To optimise the code to remove the changing escape check define the label below.
;Decompression_OptimiseNoChangingEscape = 1

;To optimise the code to remove the store stub function define the label below.
;Decompression_OptimiseNoStoreStub = 1

;To allow the decompressor to be split into two sections (useful for low memory linkers) define the label below.
;Decompression_TwoParts = 1

;To support RNZip style files define this
;Decompress_RNZip = 1

!ifdef Decompress_RNZip {
; The RNZip method has not escape bit set nor changing escape
Decompression_OptimiseForOneEscapeBit = 1
Decompression_OptimiseNoChangingEscape = 1
}


!zn

; Decompress function
; Right at the end we reserve space but we don't allocate it in memory
!ifndef Decompress_RNZip {
.historyBufferLenL = CompressionStartOfHistoryBufferTables
.historyBufferLenH = .historyBufferLenL + $10
.historyBufferOffsetL = .historyBufferLenH + $10
.historyBufferOffsetH = .historyBufferOffsetL + $10
CompressionEndOFHistoryBufferTables = .historyBufferOffsetH + $10
}

!ifdef Decompression_OptimiseNoStoreStub { } else {
RNXPCompressionDecompress_InitStore
	stx RNXPCompressionDecompress_WriteBytesmAddr+0
	sty RNXPCompressionDecompress_WriteBytesmAddr+1
	rts
}

!ifdef Decompress_RNZip {
.GetNextBitIntoCarryKillA
	cpx #$80
	beq .notGotBitsC
	txa
	asl
	tax
	rts
.notGotBitsC
	jsr RNXPCompressionDecompress_GetByte
	; Get carry
	sec
	; Set lower flag bit that eventually becomes $80 while getting the upper bit at the same time
	rol
	tax
	rts
}

.GetNextBitIntoCarry
	pha
	cpx #$80
	beq .notGotBitsC2
	txa
	asl
	tax
	pla
	rts
.notGotBitsC2
	jsr RNXPCompressionDecompress_GetByte
	; Get carry
	sec
	; Set lower flag bit that eventually becomes $80 while getting the upper bit at the same time
	rol
	tax
	pla
	rts

!ifdef Decompression_UseZPVars {
.lastWorkOffset !by 0,0
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
.numEscapeBits !by 0
}
!ifdef Decompression_OptimiseNoChangingEscape {} else {
.changingEscape !by 0
}
.potentialLiteral !by 0
!ifndef Decompress_RNZip {
.historyIndex !by 0
}

.workOffset !by 0,0
.workLen !by 0
.tempLoopVal !by 0

!if .tempLoopVal > $ff { !error ".tempLoopVal is out of range" }

} else {
; Only needs two bytes here for the length and offset related values
.lastWorkOffset = $02
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
.numEscapeBits = $04
}
!ifdef Decompression_OptimiseNoChangingEscape {} else {
.changingEscape = $05
}
.potentialLiteral = $08
!ifndef Decompress_RNZip {
.historyIndex = $09
}

!ifdef RNXPCompressionDecompress_LowZP {
.workOffset = $0b
.workLen = $0d
.tempLoopVal = $0f
}
!ifndef RNXPCompressionDecompress_LowZP {
.workOffset = $fb
.workLen = $fd
.tempLoopVal = $ff
}

}

RNXPCompressionDecompress
!ifdef Decompression_OptimiseNoStoreStub { } else {
	stx RNXPCompressionDecompress_GetByte+1
	sty RNXPCompressionDecompress_GetByte+2
}
	; From here on in:
	; y = free general purpose register
	; x = currentBits

	ldx #$80	; Flag to say, get next byte and bit

	; lastWorkOffset = 1
	ldy #1
	sty .lastWorkOffset
	dey
	sty .lastWorkOffset+1

!ifndef Decompress_RNZip {
	sty .historyIndex
!ifdef Decompression_UseZPVars {
	sty+1 .smTheEscape+1
} else {
	sty+2 .smTheEscape+1
}
} ;< !ifndef Decompress_RNZip {

!ifdef Decompression_OptimiseNoChangingEscape {} else {
	sty .changingEscape
}
	tya
!ifndef Decompress_RNZip {
	;numEscapeBits = MGetNextBit();
	;numEscapeBits = (numEscapeBits<<1) + MGetNextBit();
	jsr .GetNextBitIntoCarry
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	rol
}
	jsr .GetNextBitIntoCarry
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	rol
}
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	sta .numEscapeBits
}

	; if (numEscapeBits)
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	beq .l1
	lda #8
	sec
	sbc .numEscapeBits
	sta .smRemainingBitCounts+1
}

	; changingEscape = MGetNextBit()?true:false;
	jsr .GetNextBitIntoCarry
!ifdef Decompression_OptimiseNoChangingEscape {} else {
	rol .changingEscape
}

	;	theEscape = 0;
	;	for (i=0;i<numEscapeBits;i++)
	;	{
	;		theEscape = (theEscape<<1) + MGetNextBit();
	;	}
	;	escapeMask = (1<<numEscapeBits)-1;
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	ldy .numEscapeBits
.ge1
}
	jsr .GetNextBitIntoCarry
!ifdef Decompression_UseZPVars {
	rol+1 .smTheEscape+1
} else {
	rol+2 .smTheEscape+1
}
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	dey
	bne .ge1
}
} ;< !ifndef Decompress_RNZip {

	; < if (numEscapeBits)

	; for (;;)
.l1
	; u8 potentialLiteral = 0;
	; bool isEscaped = true;
!ifndef Decompress_RNZip {
	lda #0
}
	; if (numEscapeBits)
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	ldy .numEscapeBits
	beq .noEscapeBits1
}
	; for (i=0;i<numEscapeBits;i++)
.gpl1
!ifdef Decompress_RNZip {
	jsr .GetNextBitIntoCarryKillA
	bcc .processOldWorkOffset
	jsr RNXPCompressionDecompress_GetByte
	jsr RNXPCompressionDecompress_WriteByte
	jmp .l1
.processOldWorkOffset
	lda #1
	sta .workOffset
	lda #0
	sta .workOffset+1
.powo1
	jsr .GetNextBitIntoCarryKillA
	rol .workOffset
	rol .workOffset+1
	bcs .gotVeryLongLength
	jsr .GetNextBitIntoCarryKillA
	bcc .powo1

	lda .workOffset+1
	bne .workOffsetIsNot2
	lda .workOffset
	cmp #2
	bne .workOffsetIsNot2
	lda .lastWorkOffset
	sta .workOffset
	lda .lastWorkOffset+1
	sta .workOffset+1
	jmp .workOffsetWas2
.workOffsetIsNot2
	lda .workOffset
	sec
	sbc #3
	sta .workOffset
	bcs .noBorrow
	dec .workOffset+1
.noBorrow
;workOffset = ((workOffset-3)<<8) + source[curLen];
	lda .workOffset
	sta .workOffset+1

	jsr RNXPCompressionDecompress_GetByte	
	sta .workOffset

	inc .workOffset
	bne .noWrap
	inc .workOffset+1
.noWrap
	lda .workOffset
	sta .lastWorkOffset
	lda .workOffset+1
	sta .lastWorkOffset+1

.workOffsetWas2
;		u32 workLen = GetNextBit(currentBits,bitCnt,source,curLen);
;		workLen = (workLen<<1) + GetNextBit(currentBits,bitCnt,source,curLen);

	lda #0
	sta .workLen
	sta .workLen+1

	jsr .GetNextBitIntoCarryKillA
	rol .workLen
	jsr .GetNextBitIntoCarryKillA
	rol .workLen

	lda .workLen
	ora .workLen+1
	bne .not0

	lda #1
	sta .workLen

.longerWorklLen
	jsr .GetNextBitIntoCarryKillA
	rol .workLen
	rol .workLen+1
	jsr .GetNextBitIntoCarryKillA
	bcc .longerWorklLen
	lda .workLen
	clc
	adc #2
	sta .workLen
	bcc .not0
	inc .workLen+1
.not0
	lda .workOffset+1
	jmp .checkForEndingOffset

} else {
	jsr .GetNextBitIntoCarry
	rol
}
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	dey
	bne .gpl1
}

	;		if ((potentialLiteral & escapeMask) != theEscape)
	;		{
	;			isEscaped = false;
	;		}
!ifndef Decompress_RNZip {
.smTheEscape	cmp #0
	bne .getRemainingLiteralBits
}
;.isEscaped1
	; < if (numEscapeBits)
.noEscapeBits1

	;	if (isEscaped)
	;	{
	;		if (MGetNextBit())
	;		{
!ifndef Decompress_RNZip {
	jsr .GetNextBitIntoCarry
	bcc .processMatchBlock
}
	;			// If escapes are flagged as changing then read in the new escape
	;			if (changingEscape)
	;			{
!ifdef Decompression_OptimiseNoChangingEscape {} else {
	ldy .changingEscape
	beq .noChangingEscape
	;				int i;
	;				theEscape = 0;
	ldy #0
	sty .smTheEscape+1
	;				for (i=0;i<numEscapeBits;i++)
	;				{
	;					theEscape = (theEscape<<1) + MGetNextBit();
	;				}
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	ldy .numEscapeBits
.ge2
}
	jsr .GetNextBitIntoCarry
	rol .smTheEscape+1
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	dey
	bne .ge2
}
	;			}
.noChangingEscape
}
	;			if (numEscapeBits)
	;			{
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
	ldy .numEscapeBits
	beq .justGetByte
}
	;				int i;
	;				for (i=0;i<8 - numEscapeBits;i++)
	;				{
!ifndef Decompress_RNZip {
.getRemainingLiteralBits
.smRemainingBitCounts ldy #7
	;					potentialLiteral = (potentialLiteral<<1) + MGetNextBit();
.gpl2
	jsr .GetNextBitIntoCarry
	rol
	dey
	bne .gpl2
	;				}
	;				dest[outLen++] = potentialLiteral;
	jsr RNXPCompressionDecompress_WriteByte
	jmp .l1
} ;< !ifndef Decompress_RNZip {

	;				continue;
	;			}
	;			else
	;			{
!ifdef Decompression_OptimiseForOneEscapeBit {} else {
.justGetByte
	;				dest[outLen++] = source[curLen++];
	;				continue;
	;			}
	jsr RNXPCompressionDecompress_GetByte
	jsr RNXPCompressionDecompress_WriteByte
	jmp .l1
}

!ifndef Decompress_RNZip {
.processMatchBlock
	;	// The dictionary match is processed here
	;	u32 workLen = MGetNextBit();
	;	workLen = (workLen<<1) + MGetNextBit();
	;	u32 workOffset = 0;
	lda #0
	sta .workLen+1
;	sta .workOffset	; Not needed due to logic changes below with the history match and work offset
	sta .workOffset+1
	; RegA holds the workLen LSB
	jsr .GetNextBitIntoCarry
	rol
	jsr .GetNextBitIntoCarry
	rol
	beq .processHistoryMatch
	;	// History match check
	;	if (workLen == 1)
	;	{
	cmp #1
	bne .justLenDec
	;		u8 matchIndex = 0;
	;		int i;
	;		for (i=0;i<4;i++)
	;		{
	;			matchIndex = (matchIndex<<1) + MGetNextBit();
	;		}
	lda #0
	ldy #4
.chm1
	jsr .GetNextBitIntoCarry
	rol
	dey
	bne .chm1
	tay
	lda .historyBufferLenL,y
	sta .workLen
	lda .historyBufferLenH,y
	sta .workLen+1
	lda .historyBufferOffsetL,y
	sta .workOffset
	lda .historyBufferOffsetH,y
	sta .workOffset+1
	jmp .alreadyGotOffset
} ;< !ifndef Decompress_RNZip {

.gotVeryLongLength
!ifdef RNXPCompressionDecompress_ExitCodeDefined {
+RNXPCompressionDecompress_ExitCode
} else {
	ldx RNXPCompressionDecompress_WriteBytesmAddr+0
	ldy RNXPCompressionDecompress_WriteBytesmAddr+1
	rts
}

!ifndef Decompress_RNZip {
	;	else if (workLen == 0)
	;	{
.processHistoryMatch
	;		// Escape code for the special case
	;		workLen = 1;
	lda #1
	sta .workLen
	; Upper byte already set to 0
	;		do
	;		{
.gesc1
	;			workLen = (workLen<<1) + MGetNextBit();
	jsr .GetNextBitIntoCarry
	rol .workLen
	rol .workLen+1
	; If a carry is detected this indicates a long series of shifts that is encoding the large value which
	; signals the end of the encrypted stream. This logic is different to the C routine but works
	; well with this 6502 version because we don't have shifts for lengths that are over 64K.
	bcs .gotVeryLongLength
	;		} while (!MGetNextBit());
	jsr .GetNextBitIntoCarry
	bcc .gesc1
	;		workLen += 1;
	inc .workLen
	bne .iwl1
	inc .workLen+1
.iwl1
	jmp .doLengthCheck
	;	}

	;	else
	;	{
.justLenDec
	;		workLen--;
	;	}
	; Only eight bits needed here
	sta .workLen
	dec .workLen

	; Fall through
} ;< !ifndef Decompress_RNZip {

!ifdef Decompression_TwoParts {
	jmp RNXPCompressionDecompress_SecondPart
}
