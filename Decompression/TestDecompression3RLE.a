;Decompression test code. Demonstrates how to create self extracting code.
;..\acme.exe -v4 --msvc TestDecompression3RLE.a

; This decompression code will typically kill data in locations:
; $d0 to $1ff

;To compress
;..\bin\LZMPi.exe -cr Scroller.bin Scroller.rle
;..\bin\LZMPi.exe -cr ..\Scroller\Scroller.prg ..\Scroller\Scroller.rle 2
;..\bin\LZMPi.exe -cr ..\CityGame\OriginalData.prg ..\CityGame\OriginalData.rle 2
;..\bin\LZMPi.exe -cr ..\RacingGame\OriginalData.prg ..\RacingGame\OriginalData.rle 2
;..\bin\LZMPi.exe -cr ..\Berzerk\Berzerk.prg ..\Berzerk\OriginalData.rle 2

!source "../stdlib/stdlib.a"
!to "TestDecompression.prg", cbm
!sal
!sl "TestDecompression.map"
!svl "TestDecompression.lbl"
!cpu 6510
!ct pet

; TODO: Disable screen. Use hi byte change during load to set new border colour from lookup table.

!source "../stdlib/BASICEntry80d.a"

!ifndef EndOfMemory {
EndOfMemory = $10000
}

; The contents of this macro can be used to cause the border colour to change while decompressing.
!macro RNXPCompressionIncBorder_A {
!ifdef DoBorderEffect {
	!source "BorderEffectCommon.a"
}
}


*=BASICEntry
	sei
	; Due to being started with a BASIC SYS:
	; Assume the DDR is correct
;	lda #ProcessorPortAllRAMWithIO
;	sta ZPProcessorPort
;	lda #ProcessorPortDDRDefault
;	sta ZPProcessorPortDDR

	ldx #$ff
	txs

!if 0 {
	lda #0
	sta VIC2ScreenControlV
}

	lda #ProcessorPortAllRAM
	sta ZPProcessorPort

	; Copy the decompression code to lower memory. The size of the code varies depending on the
	; features activated in the code.
	ldx #0
.cp1
	; Copy the ZP code first
	lda RNXPCompressionDecompress_ZPStart,x
	sta+2 RNXPCompressionDecompress_ZPStartReal,x
	dex
	bne .cp1

	jmp ContinueZPCode

Decompression_UseZPVars = 1
RNXPCompressionDecompress_ExitCodeDefined = 1
!macro RNXPCompressionDecompress_ExitCode {
NOTE_CompressedDataExecute	jmp CompressedDataExecute
}

!set RNXPCompressionDecompress_WriteByteAddr = CompressedDataStore
!set RNXPCompressionDecompress_GetByteAddr = EndOfMemory - CompressedDataEnd + CompressedDataStart
Decompression_OptimiseNoStoreStub = 1

!zn
RNXPCompressionDecompress_ZPStart
RNXPCompressionDecompress_Part1Start
!pseudopc $d0 {
RNXPCompressionDecompress_ZPStartReal
Decompression_Part1Addr
!source "DecompressRLEVars.a"

ContinueZPCode
	!source "CommonDataCopy.a"

	jmp RNXPCompressionDecompressRLE

	; Include the decompression code in the middle of this code to get the actual decompression
	; code size for the copying phase below.

!source "DecompressRLE.a"

!if RNXPCompressionDecompressRLE >= $100 {
!error "RNXPCompressionDecompressRLE starts too late to use ZP optimisation, move !pseudopc $e0 earlier in memory"
}

!if * > $1f0 {
!error "The ZP code has grown into the stack space, which is being used by the decompressor"
}
RNXPCompressionDecompress_ZPEndReal
}
RNXPCompressionDecompress_ZPEnd

Test1Len = RNXPCompressionDecompress_ZPEnd - RNXPCompressionDecompress_ZPStart

!if Test1Len >= 256 {
!error "Test1Len is too large for 'Copy the ZP code first' to succeed"
}

; These variable declarations are to setup the storage used for this stub.

; In this test the data is defined by the assembler however this data could also be added by
; appending the data to the end of the file and tweaking the values in the code (Labels start
; with "SM_") for the start, length and execute lo/hi.
; This means it would be very simple to use the stub with any compressed data saved by LZMPi.exe

!ifdef DoCheckMemory {
CompressedDataStore		= $400
CompressedDataExecute	= $400
CompressedDataStart
!bin "target\CheckMemory.cmp"
CompressedDataEnd
} else {

!if 1 {
CompressedDataStore		= $0801
CompressedDataExecute	= 2304
CompressedDataStart
!bin "Scroller.rle"
CompressedDataEnd
}
}


!source "LauncherAddressCalc.a"
