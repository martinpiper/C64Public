;Decompression test code. Demonstrates how to create self extracting code.
;..\acme.exe -v4 --msvc TestDecompression4U.a

; This decompression code will typically kill data in locations:
; $f8 to $1ff

;To compress
;..\bin\LZMPi.exe -cu Scroller.bin Scroller.cmp4

!source "../stdlib/stdlib.a"
!to "TestDecompression.prg", cbm
!sal
!sl "TestDecompression.map"
!svl "TestDecompression.lbl"
!pdb "TestDecompression.pdb"
!cpu 6510
!ct pet

!source "../stdlib/BASICEntry80d.a"
!source "../stdlib/LongBranches.a"

!ifndef EndOfMemory {
EndOfMemory = $10000
}

; The contents of this macro can be used to cause the border colour to change while decompressing.
!macro RNXPCompressionIncBorder_A {
!ifdef DoBorderEffect {
	!source "BorderEffectCommon.a"
}
}
!macro RNXPCompressionDecompress_WriteByteAddrHi {}

*=BASICEntry
	sei
	ldx #$ff
	txs

	; Due to being started with a BASIC SYS:
	; Assume the DDR is correct
	lda #ProcessorPortAllRAM
	sta ZPProcessorPort

	; Copy the decompression code to lower memory. The size of the code varies depending on the
	; features activated in the code.
.cp1
	; Copy the ZP code first
	lda RNXPCompressionDecompress_ZPStart-1,x
	sta+2 RNXPCompressionDecompress_ZPStartReal-1,x
	dex
	bne .cp1

	jmp ContinueZPCode

Decompression_UseZPVars = 1
!source "CommonExitCode.a"
RNXPCompressionDecompressU_avoidTempInit = 1

!set RNXPCompressionDecompress_WriteByteAddr = CompressedDataStore
!set RNXPCompressionDecompress_GetByteAddr = EndOfMemory - CompressedDataEnd + CompressedDataStart

!zn
RNXPCompressionDecompress_ZPStart
RNXPCompressionDecompress_Part1Start
!pseudopc $f8 {
RNXPCompressionDecompress_ZPStartReal
Decompression_Part1Addr

!source "DecompressionUVars.a"


ContinueZPCode
	; Assumes X = 0
	!source "CommonDataCopy.a"

	; No need for this since the entry is at the start of the included code
;	jmp RNXPCompressionDecompressU
Decomp_assumedStart

	; Include the decompression code in the middle of this code to get the actual decompression
	; code size for the copying phase below.

!source "DecompressionU.a"
;!source "DecompressionUReferenceLongOffset.a"

!if RNXPCompressionDecompressU != Decomp_assumedStart {
	!error "Will need to enable the jmp RNXPCompressionDecompressU above"
}

RNXPCompressionDecompress_ZPEndReal
!if * >= $1f7 {
!error "The ZP code has grown into the stack space, which is being used by the decompressor"
}

}
RNXPCompressionDecompress_ZPEnd

Test1Len = RNXPCompressionDecompress_ZPEnd - RNXPCompressionDecompress_ZPStart

!if Test1Len >= 255 {
!error "Test1Len is too large for 'Copy the ZP code first' to succeed"
}

; These variable declarations are to setup the storage used for this stub.

; In this test the data is defined by the assembler however this data could also be added by
; appending the data to the end of the file and tweaking the values in the code (Labels start
; with "SM_") for the start, length and execute lo/hi.
; This means it would be very simple to use the stub with any compressed data saved by LZMPi.exe

!ifdef DoCheckMemory {
CompressedDataStore		= $400
CompressedDataExecute	= $400
CompressedDataStart
!bin "target\CheckMemory.cmp",,2	; Skip the original file size
CompressedDataEnd
} else {

!if 0 {
CompressedDataStore		= $0801
CompressedDataExecute	= 2304
CompressedDataStart
!bin "Scroller.cmp4",,2	; Skip the original file size
CompressedDataEnd
}

!if 1 {
CompressedDataStore		= $0400
CompressedDataExecute	= $6389
CompressedDataStart
!bin "c:\temp\t.cmp4",,2	; Skip the original file size
CompressedDataEnd
}


}


!source "LauncherAddressCalc.a"
