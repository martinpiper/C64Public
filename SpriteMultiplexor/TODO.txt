; TODO

* To facilitate a sprite score panel display at the top of the screen, allow the multiplexor to start its IRQs on a different VIC sprite index.
	The initial sprite setup would also need to reduce the number of sprites initially copied over.
	For example, score panel is initialised into VIC sprite index 0/1. The multiplexor initial copy then copies into VIC sprite index 2/3/4/5/6/7
	The next IRQ would then trigger just below sprite 0 (and then 1)
	> The sprite store order would need to be taken into account.
	* If the score panel sprites are expanded, or hires, an optional macro would be needed to set the expansion or hires bits appropriately.




* Consider using the stdlib sort routines. Only a few bits of extra code, notably using Multiplex_MaxSpr/MultiplexSort_MaxSprSorted and Multiplexor_UseShiftedYPos and Multiplex_EnableEarlyOut
	Then add in options for other stdlib sort routines





* Add optional check that will "reserve" sprite0 or sprite7 within a certain Y position range.
	This would be useful to ensure the player is always infront or behind other sprites, or ensure a hires/expanded overlay for the player, etc
	If the sprite0/7 update would happen for that position then instead jsr to a specific update routine and then progress to the next sprite1/6 in the list instead.
	Avoid this sprite0/7 in the initial copy if needed.
	Also for the last update IRQ if the position hasn't been reached then jsr to the specific update routine.
	




* Precise raster beam tracing in C64DebugGUI reveals the first IRQ is copying the sprites backwards, not top down, which could result in the top most sprite not quite getting its update completed in time?!! Investigate more fully.





* MACROMultiplex_SpriteChunk might be more optimal if the MSB and potentially other flags are not calculated all at the same time.




* For very busy sprite displays have a mode where sprites are automatically alternated between frames to display as many of them as possible.
	Potentially useful for shooters and explosion effects. Flag certain sprites as being allowed to do this or not.

	If not rendered, increase a value. Then prioritise that sprite next submission and 0xff out the previous .




* Going to need some feature files to very carefully track expected cycle timings for the various optimisations



* Compression tests: c:\work\c64\bin\LZMPi.exe -c64mbu c:\work\c64\SpriteMultiplexor\TestMultiplexor.prg c:\temp\t.prg $900
	Multiplex_itemsSecondPart	= 48
		* Without music, without unrolled sort, compressed size -c64mbu : $079e
		* Without music, with unrolled sort, compressed size -c64mbu : $098b
	Multiplex_itemsSecondPart	= 16
		* Without music, with unrolled sort, compressed size -c64mbu : $08e5




* Crazy idea for the multiplexor. The best way to use it is to include the source into a larger assembly project.
	But how about also providing several binary versions that load at c000 and have hooks for BASIC to use it.
	>> https://www.c64-wiki.com/wiki/SYS
	BuildBASICDemo.bat && BASICDemo.d64
	> Need way to set the sprite pointers...
