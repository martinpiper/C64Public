; TODO

* To facilitate a sprite score panel display at the top of the screen, allow the multiplexor to start its IRQs on a different VIC sprite index.
	The initial sprite setup would also need to reduce the number of sprites initially copied over.
	For example, score panel is initialised into VIC sprite index 0/1. The multiplexor initial copy then copies into VIC sprite index 2/3/4/5/6/7
	The next IRQ would then trigger just below sprite 0 (and then 1)
	> The sprite store order would need to be taken into account.
	* If the score panel sprites are expanded, or hires, an optional macro would be needed to set the expansion or hires bits appropriately.





* Add optional check that will "reserve" sprite0 or sprite7 within a certain Y position range.
	This would be useful to ensure the player is always infront or behind other sprites, or ensure a hires/expanded overlay for the player, etc
	If the sprite0/7 update would happen for that position then instead jsr to a specific update routine and then progress to the next sprite1/6 in the list instead.
	Avoid this sprite0/7 in the initial copy if needed.
	Also for the last update IRQ if the position hasn't been reached then jsr to the specific update routine.
	




* Precise raster beam tracing in C64DebugGUI reveals the first IRQ is copying the sprites backwards, not top down, which could result in the top most sprite not quite getting its update completed in time?!! Investigate more fully.




* It should be possible to have other tables (don't use a bitfield, it's slower to extract) to contain multicolour enable and X/Y expansion flags and sprite background priority.
	The calculation involving Multiplex_spriteHeightTweak will need to be tweaked for Y expanded sprites.
	Make the code beneath "lda Multiplex_XPosHi,y" generic and able to optionally update the other bitfields for x/y expansion, multicolour and background priority.
	The code after ".over	sta VIC2SpriteXMSB" would need updating to also include any extra bitfield flags for x/y expansion, multicolour and background priority.
	* It would be possible to have an array for the currently used hardware sprites that contains the size from the Y expansion flag.
		Similar to how the collision code maintains the active hardware sprites to multiplexor index lookups.

	Maintain an array of eight height values.
	Map this to the next physical sprite choice code. Double the value for y expansion.
		However the above method has issues where sprites will no longer be used sequentially depending on their sorted Y position
	* An alternative would be to just read the sprite Y expansion register
		Then when is NE 0 then use double the height for the sprite height.
		When the byte EQ 0 then use the normal sprite height
			This is less efficient

	Make it a large value to reserve the sprite
	>> Multiplexor_UseMulticolour
	>> Multiplexor_UsePriority
	>> Multiplexor_UseDoubleWidth




* MACROMultiplex_SpriteChunk might be more optimal if the MSB and potentially other flags are not calculated all at the same time.




* For very busy sprite displays have a mode where sprites are automatically alternated between frames to display as many of them as possible.
	Potentially useful for shooters and explosion effects. Flag certain sprites as being allowed to do this or not.

	If not rendered, increase a value. Then prioritise that sprite next submission and 0xff out the previous .




* Going to need some feature files to very carefully track expected cycle timings for the various optimisations



* Compression tests: c:\work\c64\bin\LZMPi.exe -c64mbu c:\work\c64\SpriteMultiplexor\TestMultiplexor.prg c:\temp\t.prg $900
	Multiplex_itemsSecondPart	= 48
		* Without music, without unrolled sort, compressed size -c64mbu : $079e
		* Without music, with unrolled sort, compressed size -c64mbu : $098b
	Multiplex_itemsSecondPart	= 16
		* Without music, with unrolled sort, compressed size -c64mbu : $08e5
