; Change list
; Original code from http://codebase64.org/doku.php?id=base:flexible_32_sprite_multiplexer
; 25th October 2007 - Martin Piper
; Conversion to ACME plus various tweaks, bug fix (the interrupt was not always saving X for the RTI in all execution paths) and optimisations mostly shown by the "MPi:" comments.
; 26th October 2007 - Martin Piper
; Fixed a slight bug where if one particular sprite was the very last one to be drawn it wouldn't end the IRQ chain correctly.
; Added a test for sprite Y pos = $ff and then it then finishes rendering all further sprites. This is a quick way to disable a sprite from being rendered.
; Added some extra documentation comments.
; 27th October 2007 - Martin Piper
; Tidied this so the multiplexor is in a separate file and made it a bit more modular.
; 28th October 2007 - Martin Piper
; Updated to 48 sprites.
; 3 November 2007 - Martin Piper
; Tidied up some magic numbers to use constants
; 4 November 2007 - Martin Piper
; Added Multiplex_DiscardSpritesYPos
; Added Multiplex_StartTopInterrupt to enable better interrupt flexibility.
; 6 September 2008 - Martin Piper
; Added Multiplex_EnableEarlyOut
; Added Multiplex_OverflowRasterCheck1/Multiplex_OverflowRasterCheck2
; Used macros for the main sprite drawing and sort routines.
; 27 October 2008 - Martin Piper
; Added Multiplex_LeanAndMean to stop the code from allocating memory for the tables.
; 3 May 2009 - Martin Piper
; Added Multiplex_LogCollisions to log VIC collision information.
; 20 June 2009 - Martin Piper
; Added Multiplex_LogCollisionsBackground to include the VIC background sprite collision register.
; 7 June 2014 - Martin Piper
; Added Multiplex_MaintainPriority to enable stricter sprite priority ordering depending on the sprite Y position.
; This is to be compatible with multiplexors found in games like Commando where sprite ordering is important to maintain a sense of perspective.
; Only if the multiplexor detects a horrible sprite formation will ordering be abused and in which case the other tightly packed method will be used.
; 12 June 2014 - Martin Piper
; Added Multiplex_ReverseOrder to reverse the order that sprites are used, 7 to 0 instead of 0 to 7
; 30 May 2016 - Martin Piper
; Added Multiplex_DiscardSpritesYPosUseLocation to allow the discard position to be dynamically updated with Multiplex_SetDiscardPosition


* In Multiplex_intNextSpr0Reset for "lda Multiplex_XPosLo,y" if Multiplex_XPosLo is in ZP then this would benefit from swapping X and Y for the ZP instead of absolute addressing mode



* Added a demo TestMultiplexorOpenBorders define, which enables (currently) 64 sprites with the Y border open and a different tightly packed formation



* Added Multiplex_DiscardSpritesYPosForSort option to allow better control of when sprites get discarded in situations where the IRQ safety margins are larger



* Test runner to validate assembled code with options
	c:\work\c64\bin\LZMPi.exe -c64mbu C:\work\c64\SpriteMultiplexor\target\TestMultiplexor.prg c:\temp\t.prg $80d
	>> features\CheckForBinaryDifferences.feature




* It should be possible to have other tables (don't use a bitfield, it's slower to extract) to contain multicolour enable and X/Y expansion flags and sprite background priority.
	The calculation involving Multiplex_spriteHeightTweak will need to be tweaked for Y expanded sprites.
	Make the code beneath "lda Multiplex_XPosHi,y" generic and able to optionally update the other bitfields for x/y expansion, multicolour and background priority.
	The code after ".over	sta VIC2SpriteXMSB" would need updating to also include any extra bitfield flags for x/y expansion, multicolour and background priority.
	* It would be possible to have an array for the currently used hardware sprites that contains the size from the Y expansion flag.
		Similar to how the collision code maintains the active hardware sprites to multiplexor index lookups.

	Maintain an array of eight height values.
	Map this to the next physical sprite choice code. Double the value for y expansion.
		However the above method has issues where sprites will no longer be used sequentially depending on their sorted Y position
	* An alternative would be to just read the sprite Y expansion register
		Then when is NE 0 then use double the height for the sprite height.
		When the byte EQ 0 then use the normal sprite height
			This is less efficient

	Make it a large value to reserve the sprite
	>> Multiplexor_UseMulticolour
	>> Multiplexor_UsePriority
	>> Multiplexor_UseDoubleWidth
	> Sprite height is trickier, these references will need some dynamic code...
		Multiplex_spriteHeightTweak
		VIC2SpriteSizeY
	>> Multiplexor_UseDoubleHeight
