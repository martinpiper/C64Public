!source "../stdlib/stdlib.a"
!to "TestMultiplexor.prg", cbm
!sal
!sl "TestMultiplexor.map"
!svl "TestMultiplexor.lbl"
!pdb "TestMultiplexor.pdb"
!cpu 6510
!ct pet

; Define what the multiplexor can use
Multiplex_spritepointer	= SPRITEFRAME
Multiplex_IRQServiceRoutineLo = KERNALIRQServiceRoutineLo;
Multiplex_IRQServiceRoutineHi = KERNALIRQServiceRoutineHi;
Multiplex_DiscardSpritesYPos=255

;Multiplex_ReverseOrder = 1

; Uncomment this to allow colision logging to be turned on and update into the screen area
;Multiplex_LogCollisions = 1
Multiplex_CollisionCounter		= SCREENRAM + (16*40)
Multiplex_CollisionHistory		= SCREENRAM + (18*40)
Multiplex_CollisionIndexes		= SCREENRAM + (19*40)

;Multiplexor_UseShiftedYPos = 1

;Multiplex_MaintainPriority = 1
!ifdef Multiplex_LogCollisions {
	!ifdef Multiplex_MaintainPriority {
	Multiplex_itemsSecondPart	= 16
	} else {
	Multiplex_itemsSecondPart	= 24
	}
} else {
	!ifdef Multiplex_MaintainPriority {
	Multiplex_itemsSecondPart	= 16
	} else {
	Multiplex_itemsSecondPart	= 48
;	Multiplex_itemsSecondPart	= 20
;	Multiplex_itemsSecondPart	= 16
	}
}

;TestMultiplexorOpenBorders = 1
!ifdef TestMultiplexorOpenBorders {
	Multiplex_items = 64

defined_Multiplex_YPos			= 1
Multiplex_YPos+1			= $02
Multiplex_VarBase	= Multiplex_YPos + Multiplex_items

} else {
	Multiplex_items = Multiplex_itemsSecondPart

!if 1 {
; This will move the sprite information into zeropage. With the maximum number of sprites there won't be enough space in zeropage for all of them
defined_Multiplex_YPos			= 1
defined_Multiplex_XPosLo		= 1
defined_Multiplex_XPosHi		= 1
;defined_Multiplex_Colour		= 1
;defined_Multiplex_SpriteFrame	= 1
Multiplex_YPos+1			= $02
Multiplex_XPosLo+1		= Multiplex_YPos + Multiplex_items
Multiplex_XPosHi+1		= Multiplex_XPosLo + Multiplex_items
;Multiplex_Colour		= Multiplex_XPosHi + Multiplex_items
;Multiplex_SpriteFrame	= Multiplex_Colour + Multiplex_items


;Multiplex_VarBase	= Multiplex_YPos + Multiplex_items
Multiplex_VarBase	= Multiplex_XPosHi + Multiplex_items
;Multiplex_VarBase	= Multiplex_SpriteFrame + Multiplex_items

} else {
Multiplex_VarBase	= $02
}

}


!source "SpriteMultiplexorVars.a"

; Uncomment this to enable debug borders to be drawn
Multiplexor_DebugBorder = 1

; Uncomment this to enable the music
;EnableMusic = 1

; Uncomment this to allow the sprite sort to use a bit more time but save using an extra exit interrupt
Multiplex_EnableEarlyOut = 1

; Uncomment this to test the bunching check code
;Multiplex_BunchingCheck = 1


; Unit test zero page variables
counterx1	= Multiplex_endVars+$00
counterx2	= Multiplex_endVars+$01

countery1	= Multiplex_endVars+$02
countery2	= Multiplex_endVars+$03

xdif		= Multiplex_endVars+$04
ydif		= Multiplex_endVars+$05

xspeed	= Multiplex_endVars+$06
yspeed	= Multiplex_endVars+$07

xoffset	= Multiplex_endVars+$08
yoffset	= Multiplex_endVars+$09

!if yoffset+1 >= $fb {
!error "Cannot use EnableMusic with most of the zeropage used for the multiplexor"
}

!source "../stdlib/BASICEntry900.a"

; Some sprite data high up in memory
*=$3e00
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255
!by 255,255,255,255,255,255,255,255

+SpriteLine %........................
+SpriteLine %.#......................
+SpriteLine %.##.....................
+SpriteLine %.###....................
+SpriteLine %.####...................
+SpriteLine %.#####..................
+SpriteLine %.######.................
+SpriteLine %.#######................
+SpriteLine %.########...............
+SpriteLine %.#########..............
+SpriteLine %.########...............
+SpriteLine %.######.................
+SpriteLine %.######.................
+SpriteLine %.##..##.................
+SpriteLine %.#....##................
+SpriteLine %......##................
+SpriteLine %.......##...............
+SpriteLine %.......##...............
+SpriteLine %........##..............
+SpriteLine %........##..............
+SpriteLine %........................
!byte 0

+SpriteLine %########################
+SpriteLine %########################
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###.......###........###
+SpriteLine %###......#####.......###
+SpriteLine %###......#####.......###
+SpriteLine %###......#####.......###
+SpriteLine %###.......###........###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %###..................###
+SpriteLine %########################
+SpriteLine %########################
!byte 0

+SpriteLine %########################
+SpriteLine %########################
+SpriteLine %####.......##.......####
+SpriteLine %###.#......##......#.###
+SpriteLine %###..#.....##.....#..###
+SpriteLine %###...#....##....#...###
+SpriteLine %###....#...##...#....###
+SpriteLine %###.....#..##..#.....###
+SpriteLine %###......######......###
+SpriteLine %###......#####.......###
+SpriteLine %########################
+SpriteLine %###......#####.......###
+SpriteLine %###......#####.......###
+SpriteLine %###.....#..#..#......###
+SpriteLine %###....#...#...#.....###
+SpriteLine %###...#....#....#....###
+SpriteLine %###..#.....#.....#...###
+SpriteLine %###.#......#......#..###
+SpriteLine %####.......#.......#.###
+SpriteLine %########################
+SpriteLine %########################
!byte 0

*=BASICEntry
jmp Start

*=$0c00
;--------------------------------------
!zn {
Start	
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine

	lda #0
	sta VIC2SpriteDoubleWidth
	sta VIC2SpriteDoubleHeight
	sta VIC2SpritePriority
	sta VIC2SpriteMulticolour

	lda #<Multiplex_maininter
	sta KERNALIRQServiceRoutineLo
	lda #>Multiplex_maininter
	sta KERNALIRQServiceRoutineHi

	lda #%00011011
	sta VIC2ScreenControlV

!ifdef TestMultiplexorOpenBorders {
	lda #<NMIRet
	sta KERNALNMIServiceRoutineLo
	lda #>NMIRet
	sta KERNALNMIServiceRoutineHi

	; For open borders NMI timing
	+MACROWaitForRaster VIC2SpriteYBorderBottom-3
	lda #$7f
	sta CIA2InterruptControl
	lda CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl
	+MWordValueToAddress_A (CyclesPerRasterPALC64 * RasterLinesPALC64)-1, CIA2TimerALo
	lda #%00010001
	sta CIA2TimerAControl
	lda #$81
	sta CIA2InterruptControl
}

	; Some frames worth of static 48 sprites
!ifdef Multiplex_MaintainPriority { } else {
	lda #100
	sta countDown
	lda #210
	sta countDown2
	lda #210
	sta countDown3
}

	; Clear zero page to something we know so that we can display it later on to check none of the variables are out of range.
	ldx #$02
	lda #$80
.3	sta $00,x
	inx
	bne .3

!ifdef TestMultiplexorOpenBorders {
	ldx #Multiplex_items
	stx Multiplex_MaxSpr
	jsr Multiplex_Default_Init
	ldx #0
	lda #8
.spf1
	sta Multiplex_YPos,x
	clc
	adc #4
	inx
	cpx #Multiplex_items
	bne .spf1

	ldx #0
.spf2
.smxl1	lda #VIC2SpriteXBorderLeft
	sta Multiplex_XPosLo,x
.smxh1	lda #0
	sta Multiplex_XPosHi,x
	lda .smxl1+1
	clc
	adc #16
	sta .smxl1+1
	lda .smxh1+1
	adc #0
	and #1
	sta .smxh1+1
	beq .notMSB1
	lda .smxl1+1
	cmp #<(VIC2SpriteXBorderRight-VIC2SpriteSizeX)
	bcc .notMSB1
	lda #VIC2SpriteXBorderLeft
	sta .smxl1+1
	lda #0
	sta .smxh1+1
.notMSB1
	txa
	and #$f
	tay
	lda Multiplex_Default_Colour,y
	sta Multiplex_Colour,x

	lda Multiplex_Default_SpriteFrame,y
	sta Multiplex_SpriteFrame,x
	inx
	cpx #Multiplex_items
	bne .spf2
	
} else {
	ldx #Multiplex_itemsSecondPart
	stx Multiplex_MaxSpr
	jsr Multiplex_Default_Init
}

	lda #$40
	sta xoffset

	lda #$00
	sta yoffset

	lda #$ff
	sta xspeed

	lda #$01
	sta yspeed

	lda #$0a
	sta xdif
	lda #$10
	sta ydif

	jsr Multiplex_InitSort

	lda #1
	sta VIC2InteruptControl
	lda #0
	sta VIC2Raster
	; Ack any interrupts that might have happened so we get a clean start
	lda #1
	sta VIC2InteruptStatus

!ifdef Multiplex_MaintainPriority {
	jsr move
	jsr Multiplex_Sort
}
	cli

!ifdef EnableMusic {
	lda #0
	jsr MusicPlayerStart
}

	; MPi: Just to prove all IRQs save all registers. These characters should never flicker or change from ABC in the top left of the screen.
	lda #1
	ldx #2
	ldy #3
.2
	sta SCREENRAM
	stx SCREENRAM+1
	sty SCREENRAM+2
	; MPi: Inc'ing these three store variables should not alter the "ABC" printed by the bit above.
	; In the previous version this code block would show how reg X was not being preserved by the IRQ because the middle character ("B") would update.
	; This is because as the IRQ exits it would sometimes do an extra "ldx Multiplex_xreg" without always doing the corresponding "stx Multiplex_xreg" on entry.
	; *Will not work if EnableMusic is defined since it doesn't save the registers*
	inc Multiplex_areg
	inc Multiplex_xreg
	inc Multiplex_yreg

!ifdef EnableMusic {
	; Try playing some music from the music editor
	lda countDown
	bne .2
	lda countDown2
	bne .2
.notYet	lda Multiplex_BottomTriggered
	beq .notYet
	lda #0
	sta Multiplex_BottomTriggered
!ifdef Multiplexor_DebugBorder {
	inc VIC2BorderColour
}
	jsr MusicPlayerPlay
!ifdef Multiplexor_DebugBorder {
	dec VIC2BorderColour
}
!ifdef Multiplex_LogCollisions {
	; Automatically update this if the Multiplex_EnableEarlyOut is not defined since the IRQ will
	; be after the last sprite.
	jsr Multiplexor_UpdateCollisionDetails
	; Just blank out the extra entries on the screen to make it easier to see
	lda #' '
	ldy Multiplex_CollisionCounter
	sta Multiplex_CollisionIndexes,y
	sta Multiplex_CollisionIndexes+1,y
	sta Multiplex_CollisionIndexes+2,y
	sta Multiplex_CollisionIndexes+3,y
	sta Multiplex_CollisionIndexes+4,y
	sta Multiplex_CollisionIndexes+5,y


}
}

	jmp .2
}

!zn {
NMIRet
!if 1 {
	sta .smna+1
	inc VIC2BorderColour
	; Step 1 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	and #$7f
	sta VIC2ScreenControlV

	lda #%10000000
.notYet2
	bit VIC2ScreenControlV
	beq .notYet2

	; Step 2 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	and #$7f
	sta VIC2ScreenControlV

;	dec VIC2BorderColour
	lda CIA2InterruptControl
.smna	lda #0
}
	rti
}

!align 255, 0
;--------------------------------------
; This function is defined before including "SpriteMultiplexor.a" which then causes the last IRQ to call this
!zn {
MultiplexExt_LastIRQ
!if Multiplex_itemsSecondPart <= 24 {
	lda #255
	sta VIC2Raster
	lda #<MultiplexExt_LastIRQ2
	sta Multiplex_IRQServiceRoutineLo
	lda #>MultiplexExt_LastIRQ2
	sta Multiplex_IRQServiceRoutineHi
	jmp Multiplex_AckExitInterrupt

; The IRQ at the bottom of the screen
MultiplexExt_LastIRQ2
	sta Multiplex_areg
	stx Multiplex_xreg
	sty Multiplex_yreg
}

!ifdef Multiplex_LogCollisions {
	lda VIC2SpriteSpriteCollision
	jsr Multiplexor_UpdateCollisionDetails
}

	lda #$ef
	cmp CIA1KeyboardRowsJoystickB
	beq .over

	ldx countDown
	beq .skipToSecond
	dex
	stx countDown
	jmp .over

.skipToSecond
	ldx countDown2
	beq .skipToThird
	dex
	stx countDown2
	bne .notYet
	; Switch to animating a maximum of 44 sprites with sin tables
!if Multiplex_itemsSecondPart >= 44 {
	lda #44
	sta Multiplex_MaxSpr
}
	jsr Multiplex_InitSort
	jmp .over
.notYet
	ldx Multiplex_MaxSpr
	dex
	bmi .over

	; Turn off any open borders
!ifdef TestMultiplexorOpenBorders {
	lda #$7f
	sta CIA2InterruptControl
}

.off1
	lda Multiplex_YPos,x
	cmp #255
	beq .skipOff1
	clc
	adc #1
	sta Multiplex_YPos,x
.skipOff1
	dex
	bpl .off1
	jmp .over

.skipToThird
	ldx countDown3
	beq .skipToFourth
	dex
	stx countDown3

.skipToFourth
!ifdef Multiplexor_DebugBorder {
	lda #VIC2Colour_White
	sta VIC2BorderColour
}
	; Because we are exiting the current screen of sprites to display we can move the sprites and sort them.
	jsr move

	ldy countDown3
	beq .over
	ldx Multiplex_MaxSpr
	dex
	bmi .over
.fiddle
	tya
	clc
	adc Multiplex_YPos,x
	bcc .fiddle2
	lda #255
.fiddle2
	sta Multiplex_YPos,x
	dex
	bpl .fiddle

.over
!ifdef Multiplexor_DebugBorder {
	lda #VIC2Colour_Red
	sta VIC2BorderColour
}
	; MPi: Even without any sprite move being called this still calls the sort to demonstrate just how quick the sort is.
	; The sort (red border area at the bottom of the screen) is actually on average much quicker than the move loop (the white area above the red).
	; This runs the sort using the previous results of the sort as a starting point to work from.
	; It's called the "Ocean method" since it was commonly used in Ocean games.
	jsr Multiplex_Sort
!ifdef Multiplexor_DebugBorder {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	jsr Multiplex_StartTopInterrupt
	jmp Multiplex_AckExitInterrupt
}

!source "SpriteMultiplexor.a"
!source "SpriteMultiplexorDefaultPattern.a"

countDown	!by 0
countDown2	!by 0
countDown3	!by 0

!macro MSetSprite .sprite , .xpos , .ypos {
	lda #(.xpos & 0xff)
	sta Multiplex_XPosLo + .sprite
	!if .xpos >= 256 {
		sty Multiplex_XPosHi + .sprite
	} else {
		stx Multiplex_XPosHi + .sprite
	}
	lda #.ypos
	sta Multiplex_YPos + .sprite
	lda #$f8
	sta Multiplex_SpriteFrame + .sprite
}

!zn {
move	
!ifdef Multiplex_MaintainPriority {
;!if 1 {
	ldx #0
	ldy #1

	+MSetSprite  0 , 50 , 50
	+MSetSprite  1 , 55 , 51
	+MSetSprite  2 , 160 , 52
	+MSetSprite  3 , 165 , 53

	+MSetSprite  4 , 100 , 120
	+MSetSprite  5 , 105 , 121
	+MSetSprite  6 , 210 , 122
	+MSetSprite  7 , 215 , 123

	+MSetSprite  8 , 150 , 180
	+MSetSprite  9 , 155 , 181
	+MSetSprite 10 , 60 , 182
	+MSetSprite 11 , 65 , 183

	+MSetSprite 12 , 255 , 230
	+MSetSprite 13 , 260 , 231
	+MSetSprite 14 , 310 , 232
	+MSetSprite 15 , 315 , 233

!if 1 {
	lda counterx1
	sta Multiplex_YPos + 12
	clc
	adc #5
	sta Multiplex_YPos + 13
	lda counterx1
	eor #$ff
	adc #1
;	sta Multiplex_YPos + 14
	adc #1
;	sta Multiplex_YPos + 15
}
.static
} else {
	; Update the first "Multiplex_MaxSpr" sprites
	ldy Multiplex_MaxSpr
	dey
	bmi .exit

.1	lda counterx2
	clc
	adc xdif
	sta counterx2
	clc
	adc counterx1
	tax
	lda sinx,x
	sta+2 Multiplex_XPosLo,y
	lda sinxhi,x
	sta+2 Multiplex_XPosHi,y

	lda countery2
	clc
	adc ydif
	sta countery2
	clc
	adc countery1
	tax
	lda siny,x
	sta+2 Multiplex_YPos,y

	dey
	bpl .1

	lda #90
	sta Multiplex_YPos + 0
	sta Multiplex_YPos + 1
	lda #109
	sta Multiplex_YPos + 2
	sta Multiplex_YPos + 3
	lda #128
	sta Multiplex_YPos + 4
	sta Multiplex_YPos + 5
	lda #147
	sta Multiplex_YPos + 6
	sta Multiplex_YPos + 7
	lda #166
	sta Multiplex_YPos + 8
	sta Multiplex_YPos + 9
	lda #185
	sta Multiplex_YPos + 10
	sta Multiplex_YPos + 11
}

.exit

	; MPi: When uncommented this demonstrates that when a sprite has a Y coord of $ff then the multiplexor will sort them to the end of the list and will stop plotting sprites.
!if 0 {
	lda #$ff
	sta Multiplex_YPos + 7
	sta Multiplex_YPos + 17
	sta Multiplex_YPos + 27
	sta Multiplex_YPos + 18
	sta Multiplex_YPos + 19
	sta Multiplex_YPos + 20
	sta Multiplex_YPos + 21
	sta Multiplex_YPos + 22
	sta Multiplex_YPos + 23
}

!if 0 {
	; MPi: When uncommented demonstrate how only modifying some sprite Y values each frame and keeping others constant results in a faster sort time.
	lda #50
	sta Multiplex_YPos + 4
	sta Multiplex_YPos + 5
	sta Multiplex_YPos + 6
	sta Multiplex_YPos + 7
	lda #80
	sta Multiplex_YPos + 16
	sta Multiplex_YPos + 17
	sta Multiplex_YPos + 18
	sta Multiplex_YPos + 19
	lda #110
	sta Multiplex_YPos + 20
	sta Multiplex_YPos + 21
	sta Multiplex_YPos + 22
	sta Multiplex_YPos + 23
	lda #140
	sta Multiplex_YPos + 24
	sta Multiplex_YPos + 25
	sta Multiplex_YPos + 26
	sta Multiplex_YPos + 27
	lda #170
	sta Multiplex_YPos + 0
	sta Multiplex_YPos + 1
	sta Multiplex_YPos + 2
	sta Multiplex_YPos + 3
	lda #200
	sta Multiplex_YPos + 8
	sta Multiplex_YPos + 9
	sta Multiplex_YPos + 10
	sta Multiplex_YPos + 11
	lda #230
	sta Multiplex_YPos + 12
	sta Multiplex_YPos + 13
	sta Multiplex_YPos + 14
	sta Multiplex_YPos + 15
}


	lda xoffset
	sta counterx2
	lda yoffset
	sta countery2

	lda counterx1
	clc
	adc xspeed
	sta counterx1

	lda countery1
	clc
	adc yspeed
	sta countery1

	rts
}

!source "../stdlib/Initialise.a"

!align 255, 0
sinx
 !by $af,$b2,$b6,$b9,$bd,$c1,$c4,$c8,$cb,$cf,$d2,$d6,$d9,$dd,$e0,$e3
 !by $e7,$ea,$ed,$f1,$f4,$f7,$fa,$fd,$00,$03,$06,$09,$0b,$0e,$11,$13
 !by $16,$18,$1b,$1d,$1f,$21,$24,$26,$28,$2a,$2b,$2d,$2f,$30,$32,$33
 !by $35,$36,$37,$38,$39,$3a,$3b,$3c,$3c,$3d,$3d,$3e,$3e,$3e,$3e,$3e
 !by $3e,$3e,$3e,$3e,$3d,$3d,$3c,$3c,$3b,$3a,$39,$38,$37,$36,$35,$33
 !by $32,$30,$2f,$2d,$2b,$2a,$28,$26,$24,$21,$1f,$1d,$1b,$18,$16,$13
 !by $11,$0e,$0b,$09,$06,$03,$00,$fd,$fa,$f7,$f4,$f1,$ed,$ea,$e7,$e3
 !by $e0,$dd,$d9,$d6,$d2,$cf,$cb,$c8,$c4,$c1,$bd,$b9,$b6,$b2,$af,$ab
 !by $a7,$a4,$a0,$9d,$99,$95,$92,$8e,$8b,$87,$84,$80,$7d,$79,$76,$73
 !by $6f,$6c,$69,$65,$62,$5f,$5c,$59,$56,$53,$50,$4d,$4b,$48,$45,$43
 !by $40,$3e,$3b,$39,$37,$35,$32,$30,$2e,$2c,$2b,$29,$27,$26,$24,$23
 !by $21,$20,$1f,$1e,$1d,$1c,$1b,$1a,$1a,$19,$19,$18,$18,$18,$18,$18
 !by $18,$18,$18,$18,$19,$19,$1a,$1a,$1b,$1c,$1d,$1e,$1f,$20,$21,$23
 !by $24,$26,$27,$29,$2b,$2c,$2e,$30,$32,$35,$37,$39,$3b,$3e,$40,$43
 !by $45,$48,$4b,$4d,$50,$53,$56,$59,$5c,$5f,$62,$65,$69,$6c,$6f,$73
 !by $76,$79,$7d,$80,$84,$87,$8b,$8e,$92,$95,$99,$9d,$a0,$a4,$a7,$ab

sinxhi
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
 !by $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
 !by $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
 !by $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
 !by $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
 !by $01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 !by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

siny
 !by $8d,$8f,$92,$94,$96,$98,$9a,$9c,$9f,$a1,$a3,$a5,$a7,$a9,$ab,$ad
 !by $af,$b1,$b3,$b5,$b7,$b9,$bb,$bc,$be,$c0,$c2,$c3,$c5,$c7,$c8,$ca
 !by $cb,$cd,$ce,$d0,$d1,$d2,$d4,$d5,$d6,$d7,$d8,$d9,$da,$db,$dc,$dd
 !by $de,$df,$e0,$e0,$e1,$e1,$e2,$e2,$e3,$e3,$e3,$e4,$e4,$e4,$e4,$e4
 !by $e4,$e4,$e4,$e4,$e3,$e3,$e3,$e2,$e2,$e1,$e1,$e0,$e0,$df,$de,$dd
 !by $dc,$db,$da,$d9,$d8,$d7,$d6,$d5,$d4,$d2,$d1,$d0,$ce,$cd,$cb,$ca
 !by $c8,$c7,$c5,$c3,$c2,$c0,$be,$bc,$bb,$b9,$b7,$b5,$b3,$b1,$af,$ad
 !by $ab,$a9,$a7,$a5,$a3,$a1,$9f,$9c,$9a,$98,$96,$94,$92,$8f,$8d,$8b
 !by $89,$87,$84,$82,$80,$7e,$7c,$7a,$77,$75,$73,$71,$6f,$6d,$6b,$69
 !by $67,$65,$63,$61,$5f,$5d,$5b,$5a,$58,$56,$54,$53,$51,$4f,$4e,$4c
 !by $4b,$49,$48,$46,$45,$44,$42,$41,$40,$3f,$3e,$3d,$3c,$3b,$3a,$39
 !by $38,$37,$36,$36,$35,$35,$34,$34,$33,$33,$33,$32,$32,$32,$32,$32
 !by $32,$32,$32,$32,$33,$33,$33,$34,$34,$35,$35,$36,$36,$37,$38,$39
 !by $3a,$3b,$3c,$3d,$3e,$3f,$40,$41,$42,$44,$45,$46,$48,$49,$4b,$4c
 !by $4e,$4f,$51,$53,$54,$56,$58,$5a,$5b,$5d,$5f,$61,$63,$65,$67,$69
 !by $6b,$6d,$6f,$71,$73,$75,$77,$7a,$7c,$7e,$80,$82,$84,$87,$89,$8b
 !by $ff

!ifdef EnableMusic {

track1 =$4600	; The start of the music data in memory. Must be aligned on $100 bytes.
track2 =$4700
track3 =$4800
envdata=$4900	; Also called FX table data
maxBlocks = $40
loblock =$4a00
hiblock =loblock + maxBlocks
blocks =$4b00

; Must be here at this location
; Must be aligned to $100 bytes
*=$3f00
!source "../MusicEditor/MusicPlayer.a"

; Needed to get sensible envelope values in the default options
; It also allows a bit of music to be loaded as default to test the product if the jsr clearall is commented out.
*= track1
!bin "../MusicEditor/114MUSDATA.bin"
}

