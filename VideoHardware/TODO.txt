* https://amiga.lychesis.net/applications/DeluxePaint.html




* Demo1: HardwareTest_VideoPattern0 really needs a APU reset disable
	Also mode7 init



* Demo4: .spritesPlane3 etc needs to use the newer macros for data sending




* Using the vectors layer
	Convert "Bad Apple" video, which is two colours, to RLE encoded screens
	Have black as transparent
		Add APU colour bars behind
	Frame compression could be:
		1 bit : Starting colour choice
		9 bits : RLE length
		0 = end of RLE for frame
		Then round up to the next byte obviously...
		C64 can decompress this into vector layer bytes quite quickly
	>> Using ImageToBitplane: --rgbshift 5 6 5 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 16 --image "C:\work\C64\Animation\RawFrames2\frm00001.bmp" --outputpalettes target/vectors_paletteData.bin --outputvectors 1 20 2 255 target/vectors_Data.bin --convertwritepass
	Probably will need to use cartridge video delta frame file layout to advance frames
	Add extra screen, like sprite animation, scrolling text screen etc
	Use vectors layer merged with something else for the current hardware... Once the combination board arrives
	>> Play Bad Apple mod? https://modarchive.org/index.php?request=view_player&query=178526
		
	
		




* Add 3D demo, move the code from the BDD6502 vector test
	>> Added @Demo12
	Identify code that would benefit from hardware acceleration
	Candidates are transformation, edge scanning
	* Done: 3D source in ../VectorPlotBitmap/ will need to be copied into the SDK release build
	* Add different model definitions, perhaps the letters for MEGAWANG?
	* Done: Add proper Vectors.a setup and macros using the setup from the scenario
	* Done: VectorPlot_drawSpansInternal needs to be extracted
	* Done: Add extra positition transform
	* Done: Add joystick control options:
		Fire = Stop auto rotation
		Fire+left = Do pos
		Fire+right = Do rot
		Fire+Up/down = Z pos
		Directions = pos/rot
	* Use the fast sort code, while reusing the index pointers from frame to frame, to sort the polygons?
		There is also an obvious optimisation here to use a BSP tree for polygon ordering if there is only one model, or models are not intersecting
	* Done: Add border configuration options: kVectorHardware_sideBarsSizeLeft and kVectorHardware_sideBarsColourRight
	* Wraparound the rot values correctly, not just clamp to 0, upper and lower bounds
	* Done: Consider colour offset for the "space ship" engines, since they are currently not visible with lighting enabled
		Optional lighting toggle?
			See: ; Colour bias
		Ah ha, it's because the engines are not separated from the rear ship faces. Adjust these.
			Find the rear ship faces by disabling them, then see how to remove their overdraw...
				Reorder the faces in the mesh or trace the engine edge properly...
					Note: "; Engines" and "; Rear plane"
						Note the small "triangle" engine segments flicker because of the backface cull bugging out on the "triangle"
					> Reordering "; Rear plane" to be last enables the engines to be seen. A lot easier than separating out the faces properly.
	* Done: Optimise face render function depending on backface cull and lighting options
	* Colour upper and lower bounds check config "cmp #$08" etc
		Needs lower and upper value config with current default if not set
	* Add option to increase vertical or horizontal resolution of the calculation
	* Increase accuracy of the 3D calculation, including screen edge clipping and near Z clipping
					




* HardwareTest_VideoInit needs APU stop
	Perhaps put into Video_DisableDisplay instead, since the APU is causing unstable video hardware init
		>> By running demo1 without any extra APU reset the hardware failed to start after DisableDisplay.
			However running the demo6 cartridge, then reseting the C64 on the "Loading" screen, which disables the APU
			This allowed an unmodified demo1 to execute correctly
	Or perhaps have an explicit Hardware_Init which does bus, audio, APU disable etc
		Then add this before every Video_DisableDisplay
	And also Video_InitDisplaySpritesScrollsBackground
	Update main4.a to remove extra APU disable code...
	Test the hardware still works after that...




* Update demo 1 and demo 4 for hardware
	Include music data decompress for demo 1
	Add turrican title/game music to demo 4




* Move HardwareTest_AudioInit out and create proper defines for the ebbs/address




* APU demo, possible to create entirely APU originated effects for raster bar logo colour gradient table movement animation and also screen scrolling



* Demo9
	* MCommonWorld_ViewPosZ is quite slow, it could do with just being in a lookup table. But there is a combination with World_ViewPosZ to consider
		Perhaps another set of lookup tables based on height and World_ViewPosZ?
	* Since cartridge is added, might as well add all the data initialisation into the cartridge as well. Like @Demo6C
	* Done: When going to the game, alter the sprite to display the score along the bottom of the screen
		DrawScoresSprites




* From very old dream
	Horizontally scrolling parallax landscape.
	Sky is halfway between day and sunset, rich golden red hues on the horizon.
	Clouds in background
	Desert sandstone coloured tall rock features, two layers
	Light white/grey coloured spaceship, squashed horizontal ovoid shape in two halves.
		https://www.google.com/search?q=tall+rocks+desert+sandstone&newwindow=1&rlz=1C1CHZL_enSG779SG779&sxsrf=ALiCzsb7I3AY0oLMfA2Oy1dFbrpJdpiJXw:1656857273966&source=lnms&tbm=isch&sa=X&ved=2ahUKEwioloiq8tz4AhWQ2HMBHfaEAc4Q_AUoAXoECAEQAw&biw=1280&bih=601&dpr=1.5
	
	
	


* Demo1 could use scaled sprites for the clouds, using the layer setup for Demo9
	This removes the need for the mode7 layer
	Would then need a separate mode7 demo




* Demo6: Using tiles and two chars layers, plus sprites, it should be possible to just about time the raster splits using the CPU instead of APU?
	This would make it possible to run the demo on the current built hardware
	Call it Demo6CPU
	It would be possible to have full trees, plus parallax background, plus full logos (or other trees layer behind the main trees)
		And of course the fence
	** Except that, doh, the background colour (which is a separate layer in the current demos) would need to be updated in the palettes used for each layer. *sigh*
		This is trickier than just updating the background colour... Hmph
	Done: Use the original resolution SotB logos, not the 256 horizontal squished versions
	
	



* https://www.spriters-resource.com/arcade/streetfighter2/sheet/117307/
	https://www.spriters-resource.com/arcade/streetfighter2/sheet/27200/




* main8.a created from main7.a to separate out the RaspberryPi example



* For all the raster waits, convert them into +MAPU_EmitWait
	Could also use a "raster screen edge" constant define



* Check the full user port design, that a bus reset and address setup sequence does not toggle the address write signal



* BatBall
	* Collisions with enemies make the ball bounce randomly, with a speed component
	* Different sprite shadow height (offset) can provide extra visual feeling of depth
	* Every N bounces the ball speed increases



* R-Type?
	https://www.youtube.com/watch?v=pVWtI0426mU
	https://www.spriters-resource.com/arcade/rtype/
	https://retrogamezone.co.uk/rtype.htm
	http://hol.abime.net/1288/gamemap
	Would need two tiles layers however

* Turrican?
	Clean files: https://github.com/Josef-Friedrich/turrican-clone-assets-collection/tree/master/turrican2
	The number of unique 16x16 tiles is quite large, more than 256
		cls && java -jar ..\..\..\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 5 6 5 --newpalettes --forcergb 136 170 255 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "C:\temp\1-1 trim.png" --tilewh 16 16 --imagequantize 8 --outputplanes ../tmp/background_plane --outputscrcol ../tmp/map.bin --outputpalettes ../tmp/PaletteData.bin --numbitplanes 3 --convertwritepass
* Turrican: The tiles layer runs out of tiles with the background data as is. Perhaps try the background in the chars layer and check how many chars it uses?
	Then the score could be in the tiles layer instead? :D


* Metal slug?
	https://www.spriters-resource.com/arcade/ms6/sheet/123749/
	
	
* Darius?
	https://www.spriters-resource.com/fullview/114007/?source=genre
	
* Flying Shark
	Would need two sprite layers: https://www.spriters-resource.com/sharp_x68000/hishouzameflyingshark/sheet/134119/?source=genre
	



* Using convert2.bat the black pixels in "Top down.png" seem to be coming through with transparency. Perhaps this is a palette matching problem or where the loaded palette has black in colour 0??
	This would mean the layer combination logic is detecting a lower 3 bit pixel and treating it as transparent. The converter could do with a mode where that transparent pixel is ignored in the output palette.



* Unit test:
	AnimationEngine_MutateToType
	AnimationEngine_Delete
	CharacterLogic_CheckSpawn
	CharacterLogic_Update



* Intro for the hardware. Sound effects in stereo, zooming/scaling plane plus sprites and scrolling stars?
	https://modarchive.org/index.php?request=view_player&query=182799
	https://modarchive.org/index.php?request=view_player&query=158076
	https://modarchive.org/index.php?request=view_player&query=65855
	* https://modarchive.org/index.php?request=view_player&query=102831
	https://modarchive.org/index.php?request=view_player&query=67177
	https://modarchive.org/index.php?request=view_player&query=188620
	https://modarchive.org/index.php?request=view_player&query=67475
	https://modarchive.org/index.php?request=view_player&query=160307
	https://modarchive.org/index.php?request=view_player&query=67772
	Trimmed? https://modarchive.org/index.php?request=view_player&query=159149
	* https://modarchive.org/index.php?request=view_player&query=159249
	** https://modarchive.org/index.php?request=view_player&query=46133
	https://modarchive.org/index.php?request=view_player&query=118994
	* https://modarchive.org/index.php?request=view_player&query=119262
	https://modarchive.org/index.php?request=view_player&query=119263
	https://modarchive.org/index.php?request=view_player&query=54666
	https://modarchive.org/index.php?request=view_player&query=77231
	Note drop?
	Dubstep?
	https://www.youtube.com/watch?v=_lBY-zZksGw&list=WL&index=25&t=0s
	https://www.youtube.com/watch?v=vb97JWdn82w
	https://youtu.be/LyhU7qwGuFA?t=228
	https://youtu.be/LkDImfh9LaM?t=154
	https://www.youtube.com/watch?v=cf6S-uErp2M
	https://www.youtube.com/watch?v=ljEJOYA9gMg
		https://www.youtube.com/results?search_query=sound+effect+dramtic+whoosh+impact
	https://www.youtube.com/watch?v=tMO7WKTjZbM
		effect 3 and 9
	https://www.youtube.com/watch?v=DAN6fVzc7QY
	https://www.youtube.com/watch?v=9gvwhl505-o
		More bass
	https://www.youtube.com/watch?v=3g9eJRd0cXM&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi
	https://www.youtube.com/watch?v=qBnxz7PqS6c&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi&index=6
	Braams https://www.youtube.com/watch?v=ZWoY-iEwgIU
		https://www.youtube.com/watch?v=WniOZT7FlKM
	
	Editor https://batman.no/buze/
		C:\Program Files (x86)\Buze
	C:\Users\Martin Piper\Downloads\ft2-clone-v1.34-win64\ft2-clone-win64
		https://16-bits.org/ft2.php
			<Space> for edit mode!




* Transform_transformProjectVerts
	Has an issue generating 2D Y coordinates greater than 127
		Poly2D_scanTriangle works. Note: ; This renders a full screen height triangle, which demonstrates the Poly2D_scanTriangle works for the whole screen
	>> https://www.bbcelite.com/deep_dives/drawing_ships.html
		https://www.bbcelite.com/cassette/main/subroutine/ll9_part_8_of_12.html



* Demo13: Make King Tut use four split palettes?



* Demo9: Include all relevant code in the crt.
	Run crt from test scenario like main6c




* Demo7: Bullets as scaled sprites?
	Enemies as normal multiplexed sprites.




* Streamed RLE for cart files, this would make it easier for demos onthe real C64.
	* Construct a large file consisting of one of more blocks of:
		Destination EBBS
			0 = end of file?
				Although the streamed data format should show end of file data...
		Destination address lo/hi
		Flag
			0 = Reserved... Uncompressed (not implemented)
			1 = RLE compressed
		RLE Data
			For speed, there is scope to reserve the longest RLE length (0) as an end of file marker. Instead of calculating .smEndTestL/H in C64\Decompression\DecompressRLE.a
				This would need a change to the compression util, as a new variant.
	* Use the MakeCart streamed file option to save this data
		Format:
			0	:	Next bank
			0/1	:	Next address (0 = end)
			2/3	:	End of this chunk
	* Implement the streamed RLE decompression using the start bank/address, this would need the RNXPCompressionDecompress_GetByte to handle the streamed data chunks, like the sample player for the Dragon's Lair demo did
	** Optional: In the cart boot kernal add a ROM routine that will take the start bank/address, copy itself to the start of the stack?, and run the decompression, then return obviously
		>> Optional: Display message on C64 screen, but speed would need the screen to be off...





* APU macros, could in theory, have immediate mode macros that automatically put values into the data segment for the APU.
	This would help with instructions not getting out of sync with data, making it much easier to develop and debug.
	They would need to keep track of the destination write address




* MAME sprite debugger
	https://docs.mamedev.org/usingmame/defaultkeys.html
	F4 Shows the game palette, decoded graphics tiles/characters and any tilemaps.
		Note the keys for palettes, tiles, etc
	"C:\Downloads\MAME\roms\thndrbld.zip"
	C:\Downloads\MAME\mame.exe -debug -console
	Sprite list processing: https://github.com/mamedev/mame/blob/5f54fda4daab98fd0e3ba8958b3e582e5ab67dd1/src/mame/sega/sega16sp.cpp#L1059
	Memory: Sega X-Board Sprites/:mainpcb:sprites/0/m_buffer
	Memory mapping: https://github.com/mamedev/mame/blob/5f54fda4daab98fd0e3ba8958b3e582e5ab67dd1/src/mame/sega/segaxbd.cpp#L925
	memdump
		110000 - 11ffff: sega_xboard_sprite_device::draw_write
	Doesn't work?: dump sprites.txt,0:mainpcb:sprites,32
		Specifying devices and address spaces: https://docs.mamedev.org/debugger/index.html#debugger-devicespec
	Not working: dump sprites.txt,0:mainpcb:sprites/0/m_buffer,32
	saver sprites.bin,0,1000,:mainpcb:sprites
		But doesn't seem to save the data visible in the memory debug view

	for k,v in pairs(manager.machine.memory.shares) do; print(k,v); end
	for k,v in pairs(manager.machine.memory.regions) do; print(k,v); end
	for k,v in pairs(getmetatable(manager.machine.memory.shares)) do; print(k,v); end
	for k,v in pairs(getmetatable(manager.machine.memory.shares[":mainpcb:sprites"])) do ;print(k,v); end

	manager.machine.memory.shares[":mainpcb:sprites"].read_i8(0)

	-----------------------------------------------------
	Exception at EIP=00007ff766c4b3f3 (sol::stack::unqualified_getter<sol::detail::as_value_tag<memory_share>, void>::get_no_lua_nil(lua_State*, int, sol::stack::record&)+0x0033): ACCESS VIOLATION
	While attempting to read memory at 0000000000000000

	Devices route: https://docs.mamedev.org/luascript/ref-devices.html
	for k,v in pairs(manager.machine.devices) do ;print(k,v); end
	for k,v in pairs(getmetatable(manager.machine.devices[":mainpcb:sprites"])) do ;print(k,v); end
	print(manager.machine.devices[":mainpcb:sprites"])	
	This saves a dump of the sprites mirror memory: dump sprites.txt,100000,fff
		https://github.com/mamedev/mame/blob/master/src/mame/sega/segaxbd.cpp#L924C8-L924C14
	$0b0 seems to be the helicopter body sprite
		At the VBlank break (F8), alter memory 0bc (second to last word)  for the palette, then press F10 to step one cycle, and it should render with a different palette
		0B0   0186  39E8  0952  3200  E200  005E  0000  3B4E   ..9è R2.â..^..;N
	Perhaps this has been done already?
		https://reassembler.blogspot.com/2021/04/ripping-sega-system-16-sprites-palettes.html
		https://github.com/djyt/system16_sprite_viewer/tree/main
		https://github.com/djyt/system16_sprite_viewer/releases
		cd /d C:\Users\marti\Downloads\s16_viewer_win64_v031
		s16_viewer.exe config\outrun.xml
			Palettes in the config directory to be copied to the relevant roms\directory.
	cd /d C:\Work\mame
	C:\Users\marti\Downloads\msys64-2022-01-12-mame\msys64\autorebase.bat
	https://docs.mamedev.org/initialsetup/compilingmame.html#building-with-microsoft-visual-studio
	make vs2019
		^^ Problems...
	Use WSL: https://docs.mamedev.org/initialsetup/compilingmame.html#overall-build-options
		sudo apt update
		sudo apt install gcc
		sudo apt install build-essential
		sudo apt install python3
		sudo apt-get install git build-essential python3 libsdl2-dev libsdl2-ttf-dev libfontconfig-dev libpulse-dev qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake
		cd /mnt/c/Work/mame
		make IGNORE_GIT=1 vs2019
			Lots of debug: make -d IGNORE_GIT=1 vs2019
	Project warnings as errors->No
	Add compiler options: /utf-8
	>> "C:\Users\marti\Downloads\msys64-2022-01-12-mame\msys64\msys2_shell.cmd"
	cd /c/Work/mame/
	>> https://docs.mamedev.org/initialsetup/compilingmame.html#id3
	>> Then: "C:\Users\marti\Downloads\msys64-2022-01-12-mame\msys64\win32env.bat"
	cd c:\work\mame
	make vs2019
		Still compile probolems...
	make SUBTARGET=mytest SOURCES=src/mame/sega/segaxbd.cpp
	Parallel build: make -j 16 SUBTARGET=mytest SOURCES=src/mame/sega/segaxbd.cpp
	mytest.exe -debug thndrbld
	mytest.exe -window thndrbld
	make -j 16 SUBTARGET=mytest SOURCES=src/mame/sega/segaxbd.cpp SYMBOLS=0 ARCHOPTS=/utf-8 MODERN_WIN_API=1 NOWERROR=1 vs2019
	make -j 16 SUBTARGET=mytest SOURCES=src/mame/sega/segaxbd.cpp,src/mame/sega/segaorun.cpp,src/mame/sega/model2.cpp SYMBOLS=0 ARCHOPTS=/utf-8 MODERN_WIN_API=1 NOWERROR=1 vs2019
	Then open: "C:\work\mame\build\projects\windows\mamemytest\vs2019\mamemytest.sln"
	Debugging:
		C:\Work\mame\src\mame\sega\sega16sp.cpp
			sega_outrun_sprite_device::draw
			>> Need the palette
			Stepping out of this a couple of levels gets to: C:\Work\mame\src\mame\sega\segaxbd_v.cpp
				segaxbd_state::screen_update
				+		m_paletteram	{m_bytes=0x0000000000004000 }	shared_ptr_finder<unsigned short,1>
				-		m_palette	{...}	device_finder<palette_device,1>
		From context: sega_outrun_sprite_device::draw
			Locals label search: m_paletteram and m_paletteram
-		(*((segaxbd_state*)&(*((segaxbd_fd1094_state*)(*((device_t*)&(*((sprite_device<unsigned short,bitmap_ind16>*)&(*((sega_16bit_sprite_device*)this)))))).m_owner)))).m_paletteram	{m_bytes=0x0000000000004000 }	shared_ptr_finder<unsigned short,1>
-		(*((segaxbd_state*)&(*((segaxbd_fd1094_state*)(*((device_t*)&(*((sprite_device<unsigned short,bitmap_ind16>*)&(*((sega_16bit_sprite_device*)this)))))).m_owner)))).m_palette	{...}	device_finder<palette_device,1>	
		C:\Work\mame\src\mame\sega\segaxbd.cpp
			segaxbd_state::paletteram_w
		C:\Work\mame\src\lib\util\palette.cpp
			palette_t::entry_set_color
				m_entry_color
	Converts raw data:
		del "C:\temp\thunderblade arcade\*.png" &&  C:\Downloads\ImageMagick-7.0.7-4-portable-Q16-x64\convert.exe -verbose -size "512x256" -depth 8 rgb:c:\temp\t.raw "C:\temp\thunderblade arcade\t.png"
		del "C:\temp\afterburnerarcade\*.png" &&  C:\Downloads\ImageMagick-7.0.7-4-portable-Q16-x64\convert.exe -verbose -size "512x256" -depth 8 rgb:c:\temp\t.raw "C:\temp\afterburnerarcade\t.png"
		del "C:\temp\outrun arcade\*.png" &&  C:\Downloads\ImageMagick-7.0.7-4-portable-Q16-x64\convert.exe -verbose -size "512x256" -depth 8 rgb:c:\temp\t.raw "C:\temp\outrun arcade\t.png"
	Works really well!
	* To help extraction, make the palette change code optional. Also have the option of filtering out any flips and only saving unflipped data.

	>> How to spot and remove pulsating or flashing dynamic palette colours, especialyl those in After Burner
		Use convert.exe (as above) to extract all sprite frames from a playthrough in mame
			"C:\work\mame\mytest.exe"
				DIP Switches -> Easy
				The mame analogue controls X/Y speed can be set to 64 each which will help cause barrel rolls and extract more sprite frames
			Insert coin: 5
			Throttle down: A
			Every second alternate left/right to roll and use as many rotations as possible
			It is safe to use "DIP Switches -> Reset System" to capture several passes through the opening of the game
		
		Examine output sprites, look for sprites with changing engine colours, not the sprite number. For example sprite t-7 or t-10
		In "C:\temp\t.pal" look for :s00000006 or :s00000010 for sprite index 6 or 10 respectively.
		Note their palette number: p00000f20
			Notepad++->Edit->Line operation->sort...
			Look for p00000f20 again
			Note the palette colour index entries that change, in this case they are 1,2,4 (0 based)
		In C:\Work\mame\src\mame\sega\sega16sp.cpp update CheckPaleteAndForceColour() and update with RGB mask colours like 200,0,200, 150,0,150 , 100,0,100 etc

	>> Processing image files:
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --transparentRGB 255 0 255 --shiftTopLeft --minimiseArea --processNow C:\Work\C64\VideoHardware\assets\Demo14\ToUse\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --removeDuplicates C:\Work\C64\VideoHardware\assets\Demo14\ToUse\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --transparentRGB 255 0 255 --shiftTopLeft --minimiseArea --processNow C:\temp\afterburnerarcade\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --removeDuplicates C:\temp\afterburnerarcade\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --removeDuplicates C:\Work\C64\VideoHardware\assets\Demo14\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --removeDuplicates C:\work\c64\VideoHardware\assets\Demo14\PlayerAirplane\*.png
		java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --removeDuplicates C:\work\c64\VideoHardware\assets\Demo14\EnemyPlaneGreen\*.png

	>> For the new scaled sprites, since they are variable in size, will need image conversion changes to take entire batches of sprite files and convert them for best fit palettes
		For example this needs batch processing: java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 5 6 5 --newpalettes --palettesize 16 --forcergb 255 0 255 --forcergb 200 0 200 --forcergb 150 0 150 --forcergb 100 0 100 --image "C:\Work\C64\VideoHardware\assets\Demo14\t-6.png" --imagequantize 16 --outputpalettes c:\temp\t.pal --convertwritepass
		New batch format for palettes: --rgbshift 5 6 5 --newpalettes --palettesize 16 --forcergb 255 0 255 --forcergb 200 0 200 --forcergb 150 0 150 --forcergb 100 0 100 --batchimagequantize 16 --batchimages "C:\Work\C64\VideoHardware\assets\Demo14\t-6.png" "C:\Work\C64\VideoHardware\assets\Demo14\t-10.png" "C:\Work\C64\VideoHardware\assets\Demo14\t-787.png" --outputpalettes c:\temp\t.pal --writepass
			Note: preserveData = true is implied during --batchimages
		This calculates palettes and writes data: java -jar c:\work\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 5 6 5 --newpalettes --palettesize 16 --forcergb 255 0 255 --forcergb 200 0 200 --forcergb 150 0 150 --forcergb 100 0 100 --nostacking --outputscaled4 c:\temp\TScaledSprites4 --outputsprites c:\temp\TScaledSprites4Sheet.txt --outputpalettes c:\temp\t.pal --batchimagequantize 16 --batchimages "C:\Work\C64\VideoHardware\assets\Demo14\t-6.png" "C:\Work\C64\VideoHardware\assets\Demo14\t-10.png" --resetforcergb --forcergb 255 0 255 --batchimages "C:\Work\C64\VideoHardware\assets\Demo14\t-787.png" --writepass

	>> Analysis of "C:\Users\marti\Videos\Captures\After Burner II [aburner2] - MAME 0.270 (LLP64) 2025-01-19 11-08-34.mp4"
		At 30 fps, and the slowest speed, it takes 5 frames for an object to approximately move "a row" towards the camera.
		At 60 fps that gives approximately 8-10 smooth steps for each row.
		The closest row is 3.5 objects wide (a bush)
		The farthest row is approximately 14 objects wide
		There are approximately 8 rows
		This could be represetned by a 14x8 table of entries: sprite frame index (into a 16x8 grid that contains "scrolled" map data), X and Y screen position (0-255 that can be multiplied by 2 for a full screen), Z scale/position for table lookup for sprite sizes.
		Might also need a delta X/Y per sprite (or Z table based)
	>> Landscape is on average 85 sprites, 4 bytes per sprite, 24 rotation steps, each 8 frames for Z movement
		> For X movement, it does not have to be independant of the Z movement, there could be an optional "X and Y position addition" bytes for each sprite that gets ignroed or or added/subbed depending on if needed
		> Then each 8 steps, like the existing LandscapeMapRowOffset update, it steps +1 or -1
		Done: >> Perhaps only certain rotations have X movement baked into the landscape data? Then a separate landscape rotation table can contain the required add value (15/16/17) for LandscapeMapRowOffset
	>> Done: It should be possible to store these landscape rotation tables into either cartridge banks, or external RAM car data.
		>> External RAM would theoretically allow faster sequential access since it can automatically increment the address pointer without the CPU
		> See C64\VideoHardware\asm\AfterBurner\LargeTables.a
			And the comments at the top of the file for label extraction
		> If the number of rotations is to be increased, there doesnt need to be any padding and instead a table of pointers produced
		> Perhaps landscapeRotations can be in RAM
		> As well as mode7 rotation addresses
			To avoid too much external RAM double lookups
		>> Bus20To32Bit1_Init added
		>> Updated code to read from the external RAM
	>> Done: Horizon (sky/land) that rotates can use the mode7 layer
		> Done: The only issue is that the mode7 rotation is updated on the vsync, and the scales sprites need a full frame to actually show the new position, so the mode7 is one frame ahead of the scaled sprites.
			To fix this, the mode7 update would need to update in the vsync area a frame *after* during the processing of the next frame of scaled sprite data
			This is problematic, since the 24bit address bus would need to handle the restart since there would be two separate sources accessing the 24 bit address bus.
			* The APU could handle this, the simplest solution would be to disable the APU, have a very simple wait for a frame, then write the stored mode7 data, then stop (or loop).
				This is because the APU has its own internal 24 bit address independant of the userport 24 bit address bus.
	>> Done: If I want rotations in more detail than 15 degree steps, or more frames, then using source files and acme will not work since Demo14LargeTables.bin has already reached the 64K limit
		The binary file will need to be output by the python tool directly. Which is doable.
		See: binaryDataFile and dataOffsetsFile
			Worked first time! :)
		> Used 24 bit values in the binary file
		> Added the text at the start, for later data checking: MW2000-AfterBurner
		> ScreenLandscapeNumRollSteps now equals 72
	>> The large intro aircraft carrier can be sprites, as long as the sea sprites behind are not rendered. Special case empty sprite draw will skip the landscape table entry.
	>> Animated intro balls could be pre-sorted sprite animations, stored in RAM/cart bank
	>> For enemy movement, each rotation angle could have a position up and to the left/right at several Z positions. This could be accumulated with other position, as vectors, to provide variation in position.
		>> Done: Works, but the rotation tables need moving to external RAM because the current range limits in C64 RAM (0-15) are too small
			The "+MAddU8ToAddr16 32" can be replaced with a latch add, or perhaps it is more optimal to store the values as pairs and asl landscapeRotationsFrame and handle the hi bit?
		>> ; Quick 3D position rotation test
		> ; Individual tests
		> ; Combined transform
		>> UpdateEnemyObjects
		> Done: rotationVectorTableAddrs and rotationVectorTableAddrsNext can be 16 bit because they are always $100 bytes aligned
		> ; TODO: Hack scale, will probably need a Z pos to scale table
			>> realZToHardwareScale
			>> defaultNeutralScaleIs is technically the Z position of the player
			Returned scale of 0 in the width/height ScaleTab means the sprite is too large, so skip it
				>> MGenerateSprite4ScaleTable updated
			> return partial X/Y perspective for the rotation stage, around 0,0 origin still
				> 128 in X or Y means the point clipped outside the visible range, so reject it
				> This could be a large 256 x 256 table in external RAM
	> When selecting player airplaner graphics keep the ones with more engine colours. There appear to be some "dark" versions.
	>> Done: Need to use playerYPositionOffsetForHorizon in the horizon lookup...
		Adjust MMode7RotationOffset
	>> Done: Adjust the sprite4 extents so that the left hand and top part of the screen are on the border edges, this should allow the hardware sprite culling to work better
	>> Done: While there seems to be Demo14\PlayerAirplane\Left3 with one "up" frame missing, there also seem to be all the "up" frames missing from "Left4" starting with t-149.png
		> See missing frame for RenderSpritePlayerRL3YU1 and RenderSpritePlayerRL3YU2
			Found new frame: bt-823.png
	>> Done: Change to introduce a roll check...
	>> Done: Improve bcs .noMSBX2 kBus24Bit_Sprites2_MSBX and kBus24Bit_Sprites2_MSBY checks by incrementing a zeropage location and testing the result without stacking etc
		No need for this. The entire screen is 0-255 X and Y coordinate base, until the final shift left
	>> Done: ; TODO: Bake in this adjustment
	>> Done: With improved Y clipping, playerYPositionOffsetForLandscape could be twice as large now.
	>> Check (and wait for with on screen display) the external RAM for expected binary header: MW2000-AfterBurner
		> ; TODO: Check for RAM contents
	>> Done: Write out MSBX for the sprite and include full resolution position, avoid extra shifts.
		> Due to "sbc zeroPage_Temp7" which uses TweakScaleTab and relies on LandscapeMapXTweak, this means it is tricky...
			It might be better instead to store out two X+MSBX for each entry...
		> .someTweakX
	>> Done: Move landscapeRotationHorizonOffsetTab referenced data into external RAM
		> landscapeRotationHorizonOffsetTab swizzled
		Currently: Saving 35244 ($89ac) bytes ($200 - $8bac exclusive).
		Now: Saving 24019 ($5dd3) bytes ($200 - $5fd3 exclusive).
	>> Done: Automate ScaleTab output
		> maxHardwareScaleTabValue and Demo14ScaledSprites4Sheet.txtTables.a
	>> Done: Use macros for latch setting, not jsr
		Improved framerate and code size
	>> Enemy airplane rotation frames, for its own roll and also landscape rotation
		; TODO: Plane animation frames are not equally spaced out across the range of angles
		; Expanding this table would allow the angles to be placed closer to their desired angles. Perhaps measure the angle of the wings?
		> The animation angles for the green plane look a bit wrong, the nose points in the wrong direction probably due to flips, consider the EnemyPlaneHarrier instead
			> Or capture many more frames and extract
		> EnemyPlaneWhite
	>> Add more _UsingState in enemy draw
	>> Animate and draw multiple enemy objects
	>> Make player and enemy objects sort with Z value
	>> Animated takeoff and landing sequence can be added as extra landscape frames, while horizontal (like the arcade)
	>> The lower down canyon left/right movement can also be added as extra horizontal frames




* After Burner audio
	GAME( 1987, aburner2, 0,        sega_aburner2,       aburner2, segaxbd_new_state, init_aburner2, ROT0,"Sega", "After Burner II", 0 )
	segaxbd_new_state::sega_aburner2
		>> SEGA_XBD_ABURNER2_DEVICE
			?? segaxbd_aburner2_state
	src/mame/sega/segaxbd.cpp
		Uses #include "sound/segapcm.h"
			#include "sound/ymopm.h"
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm2", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
			ym2151_device &ymsnd(YM2151(config, "ymsnd", SOUND_CLOCK/4));
			segapcm_device &pcm(SEGAPCM(config, "pcm", SOUND_CLOCK/4));
		> Whereas Daytona uses multipcm_device sWriteData etc
		>> segapcm_device::sound_stream_update
			Documents 16 channels and the registers
		> Commenting out both ymsnd.add_route allows just the PCM music to be heard
