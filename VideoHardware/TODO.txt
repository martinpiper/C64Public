* https://amiga.lychesis.net/applications/DeluxePaint.html




* Demo1: HardwareTest_VideoPattern0 really needs a APU reset disable
	Also mode7 init



* Demo4: .spritesPlane3 etc needs to use the newer macros for data sending




* Using the vectors layer
	Convert "Bad Apple" video, which is two colours, to RLE encoded screens
	Have black as transparent
		Add APU colour bars behind
	Frame compression could be:
		1 bit : Starting colour choice
		9 bits : RLE length
		0 = end of RLE for frame
		Then round up to the next byte obviously...
		C64 can decompress this into vector layer bytes quite quickly
	>> Using ImageToBitplane: --rgbshift 5 6 5 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 16 --image "C:\work\C64\Animation\RawFrames2\frm00001.bmp" --outputpalettes target/vectors_paletteData.bin --outputvectors 1 20 2 255 target/vectors_Data.bin --convertwritepass
	Probably will need to use cartridge video delta frame file layout to advance frames
	Add extra screen, like sprite animation, scrolling text screen etc
	Use vectors layer merged with something else for the current hardware... Once the combination board arrives
	>> Play Bad Apple mod? https://modarchive.org/index.php?request=view_player&query=178526
		
	
		




* Add 3D demo, move the code from the BDD6502 vector test
	>> Added @Demo12
	Identify code that would benefit from hardware acceleration
	Candidates are transformation, edge scanning
	* Done: 3D source in ../VectorPlotBitmap/ will need to be copied into the SDK release build
	* Add different model definitions, perhaps the letters for MEGAWANG?
	* Done: Add proper Vectors.a setup and macros using the setup from the scenario
	* Done: VectorPlot_drawSpansInternal needs to be extracted
	* Done: Add extra positition transform
	* Done: Add joystick control options:
		Fire = Stop auto rotation
		Fire+left = Do pos
		Fire+right = Do rot
		Fire+Up/down = Z pos
		Directions = pos/rot
	* Use the fast sort code, while reusing the index pointers from frame to frame, to sort the polygons?
		There is also an obvious optimisation here to use a BSP tree for polygon ordering if there is only one model, or models are not intersecting
	* Done: Add border configuration options: kVectorHardware_sideBarsSizeLeft and kVectorHardware_sideBarsColourRight
	* Wraparound the rot values correctly, not just clamp to 0, upper and lower bounds
	* Done: Consider colour offset for the "space ship" engines, since they are currently not visible with lighting enabled
		Optional lighting toggle?
			See: ; Colour bias
		Ah ha, it's because the engines are not separated from the rear ship faces. Adjust these.
			Find the rear ship faces by disabling them, then see how to remove their overdraw...
				Reorder the faces in the mesh or trace the engine edge properly...
					Note: "; Engines" and "; Rear plane"
						Note the small "triangle" engine segments flicker because of the backface cull bugging out on the "triangle"
					> Reordering "; Rear plane" to be last enables the engines to be seen. A lot easier than separating out the faces properly.
	* Done: Optimise face render function depending on backface cull and lighting options
	* Colour upper and lower bounds check config "cmp #$08" etc
		Needs lower and upper value config with current default if not set
	* Add option to increase vertical or horizontal resolution of the calculation
	* Increase accuracy of the 3D calculation, including screen edge clipping and near Z clipping
					




* HardwareTest_VideoInit needs APU stop
	Perhaps put into Video_DisableDisplay instead, since the APU is causing unstable video hardware init
		>> By running demo1 without any extra APU reset the hardware failed to start after DisableDisplay.
			However running the demo6 cartridge, then reseting the C64 on the "Loading" screen, which disables the APU
			This allowed an unmodified demo1 to execute correctly
	Or perhaps have an explicit Hardware_Init which does bus, audio, APU disable etc
		Then add this before every Video_DisableDisplay
	And also Video_InitDisplaySpritesScrollsBackground
	Update main4.a to remove extra APU disable code...
	Test the hardware still works after that...




* Update demo 1 and demo 4 for hardware
	Include music data decompress for demo 1
	Add turrican title/game music to demo 4




* Move HardwareTest_AudioInit out and create proper defines for the ebbs/address




* APU demo, possible to create entirely APU originated effects for raster bar logo colour gradient table movement animation and also screen scrolling



* Demo9
	* MCommonWorld_ViewPosZ is quite slow, it could do with just being in a lookup table. But there is a combination with World_ViewPosZ to consider
		Perhaps another set of lookup tables based on height and World_ViewPosZ?
	* Since cartridge is added, might as well add all the data initialisation into the cartridge as well. Like @Demo6C
	* Done: When going to the game, alter the sprite to display the score along the bottom of the screen
		DrawScoresSprites




* From very old dream
	Horizontally scrolling parallax landscape.
	Sky is halfway between day and sunset, rich golden red hues on the horizon.
	Clouds in background
	Desert sandstone coloured tall rock features, two layers
	Light white/grey coloured spaceship, squashed horizontal ovoid shape in two halves.
		https://www.google.com/search?q=tall+rocks+desert+sandstone&newwindow=1&rlz=1C1CHZL_enSG779SG779&sxsrf=ALiCzsb7I3AY0oLMfA2Oy1dFbrpJdpiJXw:1656857273966&source=lnms&tbm=isch&sa=X&ved=2ahUKEwioloiq8tz4AhWQ2HMBHfaEAc4Q_AUoAXoECAEQAw&biw=1280&bih=601&dpr=1.5
	
	
	


* Demo1 could use scaled sprites for the clouds, using the layer setup for Demo9
	This removes the need for the mode7 layer
	Would then need a separate mode7 demo




* Demo6: Using tiles and two chars layers, plus sprites, it should be possible to just about time the raster splits using the CPU instead of APU?
	This would make it possible to run the demo on the current built hardware
	Call it Demo6CPU
	It would be possible to have full trees, plus parallax background, plus full logos (or other trees layer behind the main trees)
		And of course the fence
	** Except that, doh, the background colour (which is a separate layer in the current demos) would need to be updated in the palettes used for each layer. *sigh*
		This is trickier than just updating the background colour... Hmph
	Done: Use the original resolution SotB logos, not the 256 horizontal squished versions
	
	



* https://www.spriters-resource.com/arcade/streetfighter2/sheet/117307/
	https://www.spriters-resource.com/arcade/streetfighter2/sheet/27200/




* main8.a created from main7.a to separate out the RaspberryPi example



* For all the raster waits, convert them into +MAPU_EmitWait
	Could also use a "raster screen edge" constant define



* Check the full user port design, that a bus reset and address setup sequence does not toggle the address write signal



* BatBall
	* Collisions with enemies make the ball bounce randomly, with a speed component
	* Different sprite shadow height (offset) can provide extra visual feeling of depth
	* Every N bounces the ball speed increases



* R-Type?
	https://www.youtube.com/watch?v=pVWtI0426mU
	https://www.spriters-resource.com/arcade/rtype/
	https://retrogamezone.co.uk/rtype.htm
	http://hol.abime.net/1288/gamemap
	Would need two tiles layers however

* Turrican?
	Clean files: https://github.com/Josef-Friedrich/turrican-clone-assets-collection/tree/master/turrican2
	The number of unique 16x16 tiles is quite large, more than 256
		cls && java -jar ..\..\..\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 5 6 5 --newpalettes --forcergb 136 170 255 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "C:\temp\1-1 trim.png" --tilewh 16 16 --imagequantize 8 --outputplanes ../tmp/background_plane --outputscrcol ../tmp/map.bin --outputpalettes ../tmp/PaletteData.bin --numbitplanes 3 --convertwritepass
* Turrican: The tiles layer runs out of tiles with the background data as is. Perhaps try the background in the chars layer and check how many chars it uses?
	Then the score could be in the tiles layer instead? :D


* Metal slug?
	https://www.spriters-resource.com/arcade/ms6/sheet/123749/
	
	
* Darius?
	https://www.spriters-resource.com/fullview/114007/?source=genre
	
* Flying Shark
	Would need two sprite layers: https://www.spriters-resource.com/sharp_x68000/hishouzameflyingshark/sheet/134119/?source=genre
	



* Using convert2.bat the black pixels in "Top down.png" seem to be coming through with transparency. Perhaps this is a palette matching problem or where the loaded palette has black in colour 0??
	This would mean the layer combination logic is detecting a lower 3 bit pixel and treating it as transparent. The converter could do with a mode where that transparent pixel is ignored in the output palette.



* Unit test:
	AnimationEngine_MutateToType
	AnimationEngine_Delete
	CharacterLogic_CheckSpawn
	CharacterLogic_Update



* Intro for the hardware. Sound effects in stereo, zooming/scaling plane plus sprites and scrolling stars?
	https://modarchive.org/index.php?request=view_player&query=182799
	https://modarchive.org/index.php?request=view_player&query=158076
	https://modarchive.org/index.php?request=view_player&query=65855
	* https://modarchive.org/index.php?request=view_player&query=102831
	https://modarchive.org/index.php?request=view_player&query=67177
	https://modarchive.org/index.php?request=view_player&query=188620
	https://modarchive.org/index.php?request=view_player&query=67475
	https://modarchive.org/index.php?request=view_player&query=160307
	https://modarchive.org/index.php?request=view_player&query=67772
	Trimmed? https://modarchive.org/index.php?request=view_player&query=159149
	* https://modarchive.org/index.php?request=view_player&query=159249
	** https://modarchive.org/index.php?request=view_player&query=46133
	https://modarchive.org/index.php?request=view_player&query=118994
	* https://modarchive.org/index.php?request=view_player&query=119262
	https://modarchive.org/index.php?request=view_player&query=119263
	https://modarchive.org/index.php?request=view_player&query=54666
	https://modarchive.org/index.php?request=view_player&query=77231
	Note drop?
	Dubstep?
	https://www.youtube.com/watch?v=_lBY-zZksGw&list=WL&index=25&t=0s
	https://www.youtube.com/watch?v=vb97JWdn82w
	https://youtu.be/LyhU7qwGuFA?t=228
	https://youtu.be/LkDImfh9LaM?t=154
	https://www.youtube.com/watch?v=cf6S-uErp2M
	https://www.youtube.com/watch?v=ljEJOYA9gMg
		https://www.youtube.com/results?search_query=sound+effect+dramtic+whoosh+impact
	https://www.youtube.com/watch?v=tMO7WKTjZbM
		effect 3 and 9
	https://www.youtube.com/watch?v=DAN6fVzc7QY
	https://www.youtube.com/watch?v=9gvwhl505-o
		More bass
	https://www.youtube.com/watch?v=3g9eJRd0cXM&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi
	https://www.youtube.com/watch?v=qBnxz7PqS6c&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi&index=6
	Braams https://www.youtube.com/watch?v=ZWoY-iEwgIU
		https://www.youtube.com/watch?v=WniOZT7FlKM
	
	Editor https://batman.no/buze/
		C:\Program Files (x86)\Buze
	C:\Users\Martin Piper\Downloads\ft2-clone-v1.34-win64\ft2-clone-win64
		https://16-bits.org/ft2.php
			<Space> for edit mode!




* Transform_transformProjectVerts
	Has an issue generating 2D Y coordinates greater than 127
		Poly2D_scanTriangle works. Note: ; This renders a full screen height triangle, which demonstrates the Poly2D_scanTriangle works for the whole screen
	>> https://www.bbcelite.com/deep_dives/drawing_ships.html
		https://www.bbcelite.com/cassette/main/subroutine/ll9_part_8_of_12.html



* Demo13: Make King Tut use four split palettes?



* Demo9: Include all relevant code in the crt.
	Run crt from test scenario like main6c




* Demo7: Bullets as scaled sprites?
	Enemies as normal multiplexed sprites.




* Streamed RLE for cart files, this would make it easier for demos onthe real C64.
	* Construct a large file consisting of one of more blocks of:
		Destination EBBS
			0 = end of file?
				Although the streamed data format should show end of file data...
		Destination address lo/hi
		Flag
			0 = Reserved... Uncompressed (not implemented)
			1 = RLE compressed
		RLE Data
			For speed, there is scope to reserve the longest RLE length (0) as an end of file marker. Instead of calculating .smEndTestL/H in C64\Decompression\DecompressRLE.a
				This would need a change to the compression util, as a new variant.
	* Use the MakeCart streamed file option to save this data
		Format:
			0	:	Next bank
			0/1	:	Next address (0 = end)
			2/3	:	End of this chunk
	* Implement the streamed RLE decompression using the start bank/address, this would need the RNXPCompressionDecompress_GetByte to handle the streamed data chunks, like the sample player for the Dragon's Lair demo did
	** Optional: In the cart boot kernal add a ROM routine that will take the start bank/address, copy itself to the start of the stack?, and run the decompression, then return obviously
		>> Optional: Display message on C64 screen, but speed would need the screen to be off...





* APU macros, could in theory, have immediate mode macros that automatically put values into the data segment for the APU.
	This would help with instructions not getting out of sync with data, making it much easier to develop and debug.
	They would need to keep track of the destination write address




* USB File send needs start end range, useful for checksum issues identified by the above memory check
		




* After Burner audio
	GAME( 1987, aburner2, 0,        sega_aburner2,       aburner2, segaxbd_new_state, init_aburner2, ROT0,"Sega", "After Burner II", 0 )
	segaxbd_new_state::sega_aburner2
		>> SEGA_XBD_ABURNER2_DEVICE
			?? segaxbd_aburner2_state
	src/mame/sega/segaxbd.cpp
		Uses #include "sound/segapcm.h"
			#include "sound/ymopm.h"
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm2", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
			ym2151_device &ymsnd(YM2151(config, "ymsnd", SOUND_CLOCK/4));
			segapcm_device &pcm(SEGAPCM(config, "pcm", SOUND_CLOCK/4));
		> Whereas Daytona uses multipcm_device sWriteData etc
		>> segapcm_device::sound_stream_update
			Documents 16 channels and the registers
		> Commenting out both ymsnd.add_route allows just the PCM music to be heard
	> Both segapcm_device and seem to use class sound_stream which can be a useful common way to get the time: m_stream->sample_time().as_double()
	> Will need to extract common functions for creating and updating SoundEvent
	>> segapcm_device::sound_stream_update seems to be the logical place for event recording
		> m_ram.get() with loop ch < 16
	> sSamplesUsed update method needed
		>> sSamples
			This primes the whole sample btyes buffer when it encounters a new sample:
				if (!sSamplesUsed[mSampleAddressOffset + slot.m_sample.m_start])
			Equivalent place in segapcm.cpp : v = read_byte(offset + (addr >> 8)) - 0x80;
	>> multipcm.cpp and gew.cpp use signed eight bit data
	>> segapcm.cpp uses signed eight bit data after conversion: v = read_byte(offset + (addr >> 8)) - 0x80;
	> segapcm.cpp when does it start to play a note?
		Check: regs[0x86]&1 : 0x86     bit 0: channel disable?
		Is the channel always disabled before updating any of the addresses?
			>> 		Seems to, yes
		segapcm_device::write : m_ram._Mypair._Myval2[offset]
		Register write log:
			0020 = 07   with mask 00
			0022 = 16   with mask 02
			0023 = 1b   with mask 03
			0024 = 00   with mask 04
			00a4 = 00   with mask 84
			0025 = 20   with mask 05
			00a5 = 20   with mask 85
			0026 = 23   with mask 06
			0027 = 70   with mask 07
			00a6 = c2   with mask 86
	>> How is sample pitch calculated?
		regs[7] is the amount added to the sample address, which is related to the pitch
			> In multipcm.cpp this comes from slot.m_pitchForStep, need to find the equivalent
			Perhaps this is useful: segapcm_device::segapcm_device uint32_t clock
				> device_t:m_clock and m_clock_scale
	> Trying to find the music start and "process command" code in the Z80 sound CPU
		Using trace c:\temp\startplay.txt etc
			Then removing duplicate lines, empty lines, sorting, saving to a new file like c:\temp\startplayT.txt then comparing
	> Comparing C:\temp\playingT.txt with C:\temp\startplayT.txt
		Shows different addresses being accessed...
		Studying each block and where their execution path differs...
		:mainpcb:soundcpu     0A31 seems to trigger when the Z80 is told to start playing the title 0 tune...
		> After start play
			0734: jp   (hl)
			0A31: ld   d,$91
		> There is an unusual one time only execution path:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
			0F42: ld   (iy+$00),c
			0F45: ld   a,(hl)
		Compared to commands that go to $ba7:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			>>> 0F3C: res  6,a
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
		Compared to commands before the start play that go to $ba7:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
		So when bp a31 is it then bp f35...


	




* With bitmap display, Motif SGI GUI example




* Demo14: The title screen to game intro (or game) palette change is visible for a couple of frames.
	> The entire screen should be initialised to disable the sprites etc, render a couple of frame, then start the game display



* Demo14: The palettes can be computed to go into night mode




* Demo14:
	Stage 10 in the debug menu has stone pillars with rotation frames?
	It also seems to have nice rocks?
	* Also the rocks seem to have height, could be extra objects with rotated/scaled offsets using the same graphics
	The emulator crashes during this stage?
	>> del "C:\temp\afterburnerarcade\*.png" &&  C:\Downloads\ImageMagick-7.0.7-4-portable-Q16-x64\convert.exe -verbose -size "512x256" -depth 8 rgb:c:\temp\t.raw "C:\temp\afterburnerarcade\stage10a.png"
	>> "C:\Users\marti\Videos\Captures\After Burner II [aburner2] - MAME 0.270 (LLP64) 2025-07-27 10-37-42.mp4"
	>> To generate the hills use the strandard random distribution code, then with a "hills" flag render over the just calculated landscape row.
		The hills can be a fixed pattern at a paricular X position in the row, which gets bigger and smaller depending on the row, this will give the hills detailed height map resolution.
		And different landscape types using the same sprite, just dufferent offsets based on the type
		Could reuse the render code, just use some maths (shifts)
	>> ObjectDraw27 yellow column
	>> ObjectDraw28 black column
	>> kLandscapeMapRowsData_flags_doHills and LandscapeMapAddHill using objects 29 to 36
	* Need to adjust the position MAdjustObjectYBy (and need X) based on "ldy landscapeRotationsFrame"
	* Need to add object 1 as well as 29 to 36, since 1 is the base height
	>> $cc48-$cfff:$03b8	Yes it is quite expensive for all the rotation position adjustments
		 ; Note divide by 2: So now $caea-$cfff:$0516, slightly better



* Demo14: Stage 13
	Seems to have a car during the landing
	Motorbike?





* Demo14: Extra ground sprites, the buildings, transmission towers
	>> t-3081.png ObjectDraw8 Autumn tree
	* Definitely need an editor for rotated sprite frames
	>> See: ObjectDraw6_355 +MObjectDrawWithScaleFlips + jmp ObjectDrawReturn and Render_EnemyPlaneWhite175 +MRender_EntityObject
		> Create MObjectDrawWithScaleFlips with paramter for ObjectDrawReturn
	>> Done: Carrier could be separated to a new palette, it does use one palette so the save is worth it





* Demo14: Palette change for the ground can now be gradual
	By lerping to the new ground colours at runtime




* Demo14: During canyon, swiftly remove entities
	Stop missiles




* Rotate move ObjectDraw16 and ObjectDraw17 so they appear a bit above the other landscape objects. Like the canyon but include rotation/position offset for the specific frames.






* Demo14: Turn off the tiles layer when not in runway mode





* HardwareTest_VideoPattern0 needs mode7 and APU options
	Mode7 : Just a partially rotated and scaled screen
	APU : Very simple colour palette split, perhaps two or three areas
		This will make it easier to see if the APU is working on bootup.




* Demo14: Canyon: When colliding with the canyon walls, use a comparison with LandscapeMapRowOffset/CanyonOffsetStart and .mvLeft/.mvRight to move the player back to the "middle"
	Do this for the last portion of GamePlayerExplode_ExplodeFrame. Create a kGamePlayerExplode_ExplodeFramesMax = 100 for tweaking of "cmp #100"



* Demo14: Frame flickering might be due to entity far clip cull causing hardware draw state to be wrong.




* Demo14: Move EntitySort and EntitySortInit to under the IO space ~$2e0 bytes
	Maybe even EntityUpdateObjects
	And any associated code that is run by: EntityStateHi
	All such code must not touch any IO, of course.



* Image conversion: Option to round up sprite width and/or height to X with transparent pixels
	This would reduce the number of width/height lookup tables, but increase draw time a little bit
	>> Test code: "int newWidth = (img.getWidth()+1)/2;"
	>> Before:
		$190-$1ff:$70
		$cf1a-$cfff:$e6
		$d4b9-$dfff:$b47
		$fb81-$ffff:$47f
	>> After:
		$190-$1ff:$70
		$c939-$cfff:$6c7
		$d4b9-$dfff:$b47
		$fb81-$ffff:$47f
	>> Currently disabled code option




* Demo14: Animated hand for title screen game demo
	In the arcade, it's a tilemap, scrolled around a bit
	https://wiki.mamedev.org/index.php/Using_the_GFX/TileMap_viewer_(F4)
	C:\Downloads\MAME\mame.exe -debug -console aburner2
	* Any other keys? Save image without zoom etc?
		Look for this in the code: "Zoom =
			C:\Work\mame\src\frontend\mame\ui\viewgfx.cpp
				IPT_UI_ZOOM_OUT
	* C:\Downloads\MAME\mame.exe -window aburner2
		>> For RGB purple transparency use: c:\work\mame\mytest.exe -window -debug aburner2
		Use F4 to open the debug graphics view
		Press return twice to get to the tilemap view
		Use [ and ] to switch the tilemaps
		Use F5 to pause and unpause to get the correct animation frames
	* During the game pressing F12 saves whole frame images into C:\Downloads\MAME\snap\aburner2
		* Maybe use IPT_UI_SNAPSHOT in viewgfx.cpp to save raw images?
			gfx_viewer::handle_tilemap >> handle_general_keys
			Perhaps just save the entire frame buffer to a large binary file, when it changes?, a bit like the sprites?
			Then use the imagemagick command to split the file?
		* Might want to consider two chars layers with a combiner?
	* C:\Downloads\MAME\mame.exe -debug -console aburner2
		C:\Work\mame\src\mame\sega\segaxbd.cpp
		segaxbd_state::main_map
		segaxbd_state::sub_map
			map(0x0c0000, 0x0cffff).rw("segaic16vid", FUNC(segaic16_video_device::tileram_r), FUNC(segaic16_video_device::tileram_w)).share("tileram");
			map(0x0d0000, 0x0d0fff).mirror(0x00f000).rw("segaic16vid", FUNC(segaic16_video_device::textram_r), FUNC(segaic16_video_device::textram_w)).share("textram");
		>> Look for mame code changes starting with "// MPi: Debug: When wanting to save out the graphics with transparency"
		>> Seem to be 0-1fff tiles in total, in the gfx viewer
		>> This sets data into the two tile maps (second and first)
			fill c0430,101,w.41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,50,51,52,53,54,55,56,57,58,59,5a,5b,5c,5d,5e,5f
			fill d0130,101,w.41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,50,51,52,53,54,55,56,57,58,59,5a,5b,5c,5d,5e,5f
			Might be useful for setting text to display?
		>> Writes to d0000 go to segaic16_video_device::textram_w
		>> Using: fill c0830,101,w.41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,50,51,52,53,54,55,56,57,58,59,5a,5b,5c,5d,5e,5f,30,31,32,33,34,35,36,37,38,39
			Will show in the debug tilemap2 view when paused in the debugger, but only when the zoom level changed or view is generally refreshed
			When the hand/glove/stick animation is active it shows the screen has a minimal bounding box update in the tilemap screen
			Also it shows the text scrolling around with the hand/glove/etc
		>> fill c0000 to cffff in steps of 1000 seems to fill the tilemap screens 2-17
			Each screen is 64x32 tiles/chars, with two bytes per tile
				>> This fills the top line of the first (2) tilemap: fill c0000,80,w.41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,50,51,52,53,54,55,56,57,58,59,5a,5b,5c,5d,5e,5f,30,31,32,33,34,35,36,37,38,39
		>> Note how fills to d0000 are mirrored in 1000 byte chunks, because the address range in segaxbd.cpp is only d0000-d0fff, so this is only one tilemap screen
			Also the d0000 tilemap (1) writes seems to only have tiles 0-1ff (not 1fff) and the bits >= 200 seem to pick colour palettes for the mostly text tiles that are in the range 0-1ff
		>> For debug graphics purposes:
			>> 8x8 charset:
			fill d0000,56,w.40,41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,50,51,52,53,54,55,56,57,58,59,5a,5b,5c,5d,5e,5f,30,31,32,33,34,35,36,37,38,39
			>> 8x16 charset:
			fill d0100,56,w.160,162,164,166,168,16a,16c,16e,170,172,174,176,178,17a,17c,17e,182,184,186,188,18a,18c,18e,190,192,194,196,198,19a,19c,19e,1a0,1a2,1a4,1a6,1a8,1aa,1ac,1ae,1b0,1b2,1b4,1b6
			fill d0180,56,w.161,163,165,167,169,16b,16d,16f,171,173,175,177,179,17b,17d,17f,183,185,187,189,18b,18d,18f,191,193,195,197,199,19b,19d,19f,1a1,1a3,1a5,1a7,1a9,1ab,1ad,1af,1b1,1b3,1b5,1b7
		>> Text colours:
			Blue: 0,181,247
			Pink: 247,181,247
			Red: 247,0,0
			Yellow: 247,247,148
			>> Going to need a few charset palettes with the charset colour is in the second non-transparent colour (first is black, transparent is purple) so that the duplicate character detection works
			>> Going to need a "--createpalette r1 g1 b1 r2 g2 b2 r3 g3 b3 ..." that first uses the current forcergb and adds to it
			>> --preservedata to append tiles...
			>> Added: ImageToBitplane --concath for stitching the screen together
			>> Added: --paletteaddrgbs
			>> Need sometimes to nuke the screen/colour data and allow the current tiles to be used
			>> The differently coloured text in "C:\work\c64\VideoHardware\assets\Demo14\chars title.png" (with the exception of some of the chars that are special case) should be converted into the palettes...
			>> Put "C:\work\c64\VideoHardware\assets\Demo14\chars charset.png" first, to get most of the chars ready for use in game
			>> Include "C:\work\c64\VideoHardware\assets\Demo14\chars game.png"
			>> Concat to ..\tmp\demo14chars2.png and convert, update title and game to show the screens
				* Need to include charset palettes...
					Before:
						2,072,384 Demo14FinalData.bin
						96 Demo14ScaledSprites4TitleScreen.pal
						num palettes=3\
						palette size=16
						palette size=16
						palette size=11
						num tiles=106
					After:
						2,072,896 Demo14FinalData.bin
						160 Demo14ScaledSprites4TitleScreen.pal
						num palettes=5
						palette size=16
						palette size=16
						palette size=8
						palette size=7
						palette size=3
						num tiles=106
			>> Hmm problem, note the "num tiles" is the same, when the tiles should be finding reused tiles using the palettes...
				>> This demonstrates the tile matching works with the forced colour palettes first...
					> cls && java -jar ..\..\..\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --splitmaps --chars --rgbshift 5 6 5 --newpalettes --palettesize 16 --forcergb 255 0 255 --paletteaddrgbs 0 0 0   0 181 247 --paletteaddrgbs 0 0 0   247 181 247 --paletteaddrgbs 0 0 0   247 0 0  --paletteaddrgbs 0 0 0   247 247 148   --image "..\tmp\demo14chars2.png" --tilewh 8 8 --outputplanes ../tmp/Demo14TitleChars_plane --outputscrcol ../tmp/Demo14TitleChars_map.bin --numbitplanes 4 --convertwritepass
					> num tiles=99
				>> Perhaps the colours are being matched by a previous palette forcing the generated tile to actually be not exact?
					> TileConvert()
					> Specifically 32,480 "credits" text does not match
					>> Fixed in image convertor, problem loading raw palette with repeated black entries.
					>> num tiles=99
		>> Top left radar: 264x40
		>> Note: ; Debug: Text display test
		>> Done: This takes a long time, it is huge! !source "tmp\Demo14TitleChars_map.bin.debug.txt"
			Use sed to pull out specific entries during asset conversion and save an optimised file for source include
			>> !source "tmp\Demo14TitleChars_map.bin.debug.optimised.txt"
		>> Done: Very wrong tile: kTileScreenDebug____tmp_Demo14TitleChars_map_bin_x256_y0_tile = 15
			kTileScreenDebug____tmp_Demo14TitleChars_map_bin_x256_y0_colour = 1
			kTileScreenDebug____tmp_Demo14TitleChars_map_bin_x256_y0_reused = 1
			kTileScreenDebug____tmp_Demo14TitleChars_map_bin_x256_y0_flipx = 0
			kTileScreenDebug____tmp_Demo14TitleChars_map_bin_x256_y0_flipy = 0
			>> Actually it is correct, the 0 reuses the O. Convtab changed to import the binary data from the converted screen.




* Demo14: All the data combined is near the 2MB limit, but there is still lots of free memory for the Sprites4 layer and other graphics, like the animated hand in the intro and the end game sequence and the other intro screens.
	> There is potential to split the data into two 2MB chunks by having the boot upload all graphics data first, then run the actual title/game parts from a new 2MB chunk to be oploaded after the graphics data push
		The graphics data upload can wait for the second chunk of data with a different gameDataIdentifier chunk
		The test scenario can use the syntax for running until CPU PC = then swap the 2MB of dat chunk, then let the execution continue
		The C64 code can just test for the second gameDataIdentifier chunk in memory after the upload
	>> ExternalMemory_C64CheckMemory entry parameters
	>> ExternalMemory_C64SendResourceData entry parameters
	* Done: Need to add "checksum address" function and entry params
		checksumsCount
		checksumsStart
		checksumsNumBytes
		checksumsSize
	* ResourceGenerator checksum mode will need a label postfix




* Demo14: sbc #100 and lda #50 used in .isComingFromBehindCamera and related to lda GamePlayerExplode_ExplodeFrame need to have magic numbers removed




* Demo14: Shoot enemy and ground objects score
	Increment the hit counter




* Demo14: Make sure every vblank increments the border colour to make it easy to see if the C64 has crashed
	Perhaps include a border change while waiting for the vblank signal to make it obvious what is waiting for signal time and to show if the APU hardware has likely crashed




* Demo14: Decrement guns ammo and missiles
	>> Done: Observing: "C:\Users\marti\Videos\Captures\After Burner II [aburner2] - MAME 0.270 (LLP64) 2025-07-12 17-40-41.mp4"
		> Game start: 00:20: Light pink 8x16 "stage 1" flashes 4 times, 1 is algined with the 8x8 "stage 1"
			>> VBlankUpdateText Text_Stage_Flash_changed Text_Stage_Flash
		>> jsr StageNumber_Increase




* Demo14: Can I move the landscape render access for _tileWidthScaleTab and _tileHeightScaleTab to the external RAM?
	Is it going to be as fast?
	It would save a lot of memory
	A large divide lookup... Like the perspective divide?
	If the table was in the next higher 64KB chunk, the Z value can be setup once, and the width/height values read by a simple one byte setup?
	It would also free up a X/Y index register...
	The ScaleTab optimiser would then remove a lot, not all, the references. The entiy draw would still reference some.
	Probably not because the landscape data is being streamed from external RAM
		Unless the RAM interface is expanded to have two current address latches, where one set is active and the other is not...
	*** However, the landscape draw code routines, along with their rotation to jump tables, could be in cartridge banks...
		The reference for the rotation to jump table can include a cartridge bank number
		$6a5f:0:ObjectDrawLo:1:1:0
		$6aa5:0:ObjectDraw1:1:1:0
		$8fe6:2989:genericObjectDrawAdjust_5:0:1:0
		>> Which is currently $2541 bytes for draw and rotation to jump tables
		>> kBus24Bit_VideoLayer_VBlankUseNMI would need to handle nernal being banked in (for example if rendering code is in cart ROM banks) as well as RAM being used...
		>> All .sm* labels in LandscapeObjectDraw.a will need to be made indirect
		>> All .sm* in macros will need to be removed




* Demo14: Consider a huge 8MB C64 cartridge, which can initialise and send data to the external RAM for fast DMA to hardware access later on.
	Or rather during startup it can upload most of the audio/graphics without need to use DMA, since it doesn't need to send to the external RAM
	Only the data needed for the external RAM, the landscape data and any dynamic chars (mission complete DMA) need to be in the external RAM
	Emulation would need to include this improved cartridge banking...




* Demo14: Map data can probably remove " , kEntity_MaxZPos" from LandscapeMapRowsData_Formation_WhenTypePos
	Or rather remove the byte, since it's not used...



* Demo14: Title screen, animated screens...
	>> Intro screens are displayed 
		>> c64\VideoHardware\assets\Demo14\IntroScreens
		>> These use two layers. In theory two chars layers would be useful. Or maybe the background clouds/mountains could be in the tiles (road/runway) layer?

		


* Demo14: Mission complete uses DMA to transfer the extra picture data to the chars layer
	The layer is disabled, but if on real hardware the DMA has corruption then time the transfer in chunks during the vblank...
		>> ExternalMemory_C64SendResourceData can be improved to include an optional chunked vlbank wait !ifdef ExternalMemory_VBlankChunks {}



* Demo15: Outrun?
	https://reassembler.blogspot.com/2010/12/road-layer-and-slave-cpu-code-converted.html
	"The entire code for the slave 68k CPU has been ported. This CPU solely controls road generation and interfacing with the road hardware."
	https://www.youtube.com/watch?v=wU1kXWuO6JM
	https://eab.abime.net/showthread.php?t=116656
	https://github.com/djyt/cannonball/wiki
	https://github.com/djyt/cannonball/releases
	
	
* Demo14: Score needs to be cleared in the screen on game start



* Demo15: Given add a BitmapRGB background with registers at '0xa300' and addressEx '0x03'



* Demo14: What is the frame judder? When does it happen?
