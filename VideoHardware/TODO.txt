* https://amiga.lychesis.net/applications/DeluxePaint.html




* Demo1: HardwareTest_VideoPattern0 really needs a APU reset disable
	Also mode7 init



* Demo4: .spritesPlane3 etc needs to use the newer macros for data sending




* Using the vectors layer
	Convert "Bad Apple" video, which is two colours, to RLE encoded screens
	Have black as transparent
		Add APU colour bars behind
	Frame compression could be:
		1 bit : Starting colour choice
		9 bits : RLE length
		0 = end of RLE for frame
		Then round up to the next byte obviously...
		C64 can decompress this into vector layer bytes quite quickly
	>> Using ImageToBitplane: --rgbshift 5 6 5 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 16 --image "C:\work\C64\Animation\RawFrames2\frm00001.bmp" --outputpalettes target/vectors_paletteData.bin --outputvectors 1 20 2 255 target/vectors_Data.bin --convertwritepass
	Probably will need to use cartridge video delta frame file layout to advance frames
	Add extra screen, like sprite animation, scrolling text screen etc
	Use vectors layer merged with something else for the current hardware... Once the combination board arrives
	>> Play Bad Apple mod? https://modarchive.org/index.php?request=view_player&query=178526
		
	
		




* Add 3D demo, move the code from the BDD6502 vector test
	>> Added @Demo12
	Identify code that would benefit from hardware acceleration
	Candidates are transformation, edge scanning
	* Done: 3D source in ../VectorPlotBitmap/ will need to be copied into the SDK release build
	* Add different model definitions, perhaps the letters for MEGAWANG?
	* Done: Add proper Vectors.a setup and macros using the setup from the scenario
	* Done: VectorPlot_drawSpansInternal needs to be extracted
	* Done: Add extra positition transform
	* Done: Add joystick control options:
		Fire = Stop auto rotation
		Fire+left = Do pos
		Fire+right = Do rot
		Fire+Up/down = Z pos
		Directions = pos/rot
	* Use the fast sort code, while reusing the index pointers from frame to frame, to sort the polygons?
		There is also an obvious optimisation here to use a BSP tree for polygon ordering if there is only one model, or models are not intersecting
	* Done: Add border configuration options: kVectorHardware_sideBarsSizeLeft and kVectorHardware_sideBarsColourRight
	* Wraparound the rot values correctly, not just clamp to 0, upper and lower bounds
	* Done: Consider colour offset for the "space ship" engines, since they are currently not visible with lighting enabled
		Optional lighting toggle?
			See: ; Colour bias
		Ah ha, it's because the engines are not separated from the rear ship faces. Adjust these.
			Find the rear ship faces by disabling them, then see how to remove their overdraw...
				Reorder the faces in the mesh or trace the engine edge properly...
					Note: "; Engines" and "; Rear plane"
						Note the small "triangle" engine segments flicker because of the backface cull bugging out on the "triangle"
					> Reordering "; Rear plane" to be last enables the engines to be seen. A lot easier than separating out the faces properly.
	* Done: Optimise face render function depending on backface cull and lighting options
	* Colour upper and lower bounds check config "cmp #$08" etc
		Needs lower and upper value config with current default if not set
	* Add option to increase vertical or horizontal resolution of the calculation
	* Increase accuracy of the 3D calculation, including screen edge clipping and near Z clipping
					




* HardwareTest_VideoInit needs APU stop
	Perhaps put into Video_DisableDisplay instead, since the APU is causing unstable video hardware init
		>> By running demo1 without any extra APU reset the hardware failed to start after DisableDisplay.
			However running the demo6 cartridge, then reseting the C64 on the "Loading" screen, which disables the APU
			This allowed an unmodified demo1 to execute correctly
	Or perhaps have an explicit Hardware_Init which does bus, audio, APU disable etc
		Then add this before every Video_DisableDisplay
	And also Video_InitDisplaySpritesScrollsBackground
	Update main4.a to remove extra APU disable code...
	Test the hardware still works after that...




* Update demo 1 and demo 4 for hardware
	Include music data decompress for demo 1
	Add turrican title/game music to demo 4




* Move HardwareTest_AudioInit out and create proper defines for the ebbs/address




* APU demo, possible to create entirely APU originated effects for raster bar logo colour gradient table movement animation and also screen scrolling



* Demo9
	* MCommonWorld_ViewPosZ is quite slow, it could do with just being in a lookup table. But there is a combination with World_ViewPosZ to consider
		Perhaps another set of lookup tables based on height and World_ViewPosZ?
	* Since cartridge is added, might as well add all the data initialisation into the cartridge as well. Like @Demo6C
	* Done: When going to the game, alter the sprite to display the score along the bottom of the screen
		DrawScoresSprites




* From very old dream
	Horizontally scrolling parallax landscape.
	Sky is halfway between day and sunset, rich golden red hues on the horizon.
	Clouds in background
	Desert sandstone coloured tall rock features, two layers
	Light white/grey coloured spaceship, squashed horizontal ovoid shape in two halves.
		https://www.google.com/search?q=tall+rocks+desert+sandstone&newwindow=1&rlz=1C1CHZL_enSG779SG779&sxsrf=ALiCzsb7I3AY0oLMfA2Oy1dFbrpJdpiJXw:1656857273966&source=lnms&tbm=isch&sa=X&ved=2ahUKEwioloiq8tz4AhWQ2HMBHfaEAc4Q_AUoAXoECAEQAw&biw=1280&bih=601&dpr=1.5
	
	
	


* Demo1 could use scaled sprites for the clouds, using the layer setup for Demo9
	This removes the need for the mode7 layer
	Would then need a separate mode7 demo




* Demo6: Using tiles and two chars layers, plus sprites, it should be possible to just about time the raster splits using the CPU instead of APU?
	This would make it possible to run the demo on the current built hardware
	Call it Demo6CPU
	It would be possible to have full trees, plus parallax background, plus full logos (or other trees layer behind the main trees)
		And of course the fence
	** Except that, doh, the background colour (which is a separate layer in the current demos) would need to be updated in the palettes used for each layer. *sigh*
		This is trickier than just updating the background colour... Hmph
	Done: Use the original resolution SotB logos, not the 256 horizontal squished versions
	
	



* https://www.spriters-resource.com/arcade/streetfighter2/sheet/117307/
	https://www.spriters-resource.com/arcade/streetfighter2/sheet/27200/




* main8.a created from main7.a to separate out the RaspberryPi example



* For all the raster waits, convert them into +MAPU_EmitWait
	Could also use a "raster screen edge" constant define



* Check the full user port design, that a bus reset and address setup sequence does not toggle the address write signal



* BatBall
	* Collisions with enemies make the ball bounce randomly, with a speed component
	* Different sprite shadow height (offset) can provide extra visual feeling of depth
	* Every N bounces the ball speed increases



* R-Type?
	https://www.youtube.com/watch?v=pVWtI0426mU
	https://www.spriters-resource.com/arcade/rtype/
	https://retrogamezone.co.uk/rtype.htm
	http://hol.abime.net/1288/gamemap
	Would need two tiles layers however

* Turrican?
	Clean files: https://github.com/Josef-Friedrich/turrican-clone-assets-collection/tree/master/turrican2
	The number of unique 16x16 tiles is quite large, more than 256
		cls && java -jar ..\..\..\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 5 6 5 --newpalettes --forcergb 136 170 255 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "C:\temp\1-1 trim.png" --tilewh 16 16 --imagequantize 8 --outputplanes ../tmp/background_plane --outputscrcol ../tmp/map.bin --outputpalettes ../tmp/PaletteData.bin --numbitplanes 3 --convertwritepass
* Turrican: The tiles layer runs out of tiles with the background data as is. Perhaps try the background in the chars layer and check how many chars it uses?
	Then the score could be in the tiles layer instead? :D


* Metal slug?
	https://www.spriters-resource.com/arcade/ms6/sheet/123749/
	
	
* Darius?
	https://www.spriters-resource.com/fullview/114007/?source=genre
	
* Flying Shark
	Would need two sprite layers: https://www.spriters-resource.com/sharp_x68000/hishouzameflyingshark/sheet/134119/?source=genre
	



* Using convert2.bat the black pixels in "Top down.png" seem to be coming through with transparency. Perhaps this is a palette matching problem or where the loaded palette has black in colour 0??
	This would mean the layer combination logic is detecting a lower 3 bit pixel and treating it as transparent. The converter could do with a mode where that transparent pixel is ignored in the output palette.



* Unit test:
	AnimationEngine_MutateToType
	AnimationEngine_Delete
	CharacterLogic_CheckSpawn
	CharacterLogic_Update



* Intro for the hardware. Sound effects in stereo, zooming/scaling plane plus sprites and scrolling stars?
	https://modarchive.org/index.php?request=view_player&query=182799
	https://modarchive.org/index.php?request=view_player&query=158076
	https://modarchive.org/index.php?request=view_player&query=65855
	* https://modarchive.org/index.php?request=view_player&query=102831
	https://modarchive.org/index.php?request=view_player&query=67177
	https://modarchive.org/index.php?request=view_player&query=188620
	https://modarchive.org/index.php?request=view_player&query=67475
	https://modarchive.org/index.php?request=view_player&query=160307
	https://modarchive.org/index.php?request=view_player&query=67772
	Trimmed? https://modarchive.org/index.php?request=view_player&query=159149
	* https://modarchive.org/index.php?request=view_player&query=159249
	** https://modarchive.org/index.php?request=view_player&query=46133
	https://modarchive.org/index.php?request=view_player&query=118994
	* https://modarchive.org/index.php?request=view_player&query=119262
	https://modarchive.org/index.php?request=view_player&query=119263
	https://modarchive.org/index.php?request=view_player&query=54666
	https://modarchive.org/index.php?request=view_player&query=77231
	Note drop?
	Dubstep?
	https://www.youtube.com/watch?v=_lBY-zZksGw&list=WL&index=25&t=0s
	https://www.youtube.com/watch?v=vb97JWdn82w
	https://youtu.be/LyhU7qwGuFA?t=228
	https://youtu.be/LkDImfh9LaM?t=154
	https://www.youtube.com/watch?v=cf6S-uErp2M
	https://www.youtube.com/watch?v=ljEJOYA9gMg
		https://www.youtube.com/results?search_query=sound+effect+dramtic+whoosh+impact
	https://www.youtube.com/watch?v=tMO7WKTjZbM
		effect 3 and 9
	https://www.youtube.com/watch?v=DAN6fVzc7QY
	https://www.youtube.com/watch?v=9gvwhl505-o
		More bass
	https://www.youtube.com/watch?v=3g9eJRd0cXM&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi
	https://www.youtube.com/watch?v=qBnxz7PqS6c&list=PLCHQYDMF4Ne-GZ9kel4cji1GJFwQzsbKi&index=6
	Braams https://www.youtube.com/watch?v=ZWoY-iEwgIU
		https://www.youtube.com/watch?v=WniOZT7FlKM
	
	Editor https://batman.no/buze/
		C:\Program Files (x86)\Buze
	C:\Users\Martin Piper\Downloads\ft2-clone-v1.34-win64\ft2-clone-win64
		https://16-bits.org/ft2.php
			<Space> for edit mode!




* Transform_transformProjectVerts
	Has an issue generating 2D Y coordinates greater than 127
		Poly2D_scanTriangle works. Note: ; This renders a full screen height triangle, which demonstrates the Poly2D_scanTriangle works for the whole screen
	>> https://www.bbcelite.com/deep_dives/drawing_ships.html
		https://www.bbcelite.com/cassette/main/subroutine/ll9_part_8_of_12.html



* Demo13: Make King Tut use four split palettes?



* Demo9: Include all relevant code in the crt.
	Run crt from test scenario like main6c




* Demo7: Bullets as scaled sprites?
	Enemies as normal multiplexed sprites.




* Streamed RLE for cart files, this would make it easier for demos onthe real C64.
	* Construct a large file consisting of one of more blocks of:
		Destination EBBS
			0 = end of file?
				Although the streamed data format should show end of file data...
		Destination address lo/hi
		Flag
			0 = Reserved... Uncompressed (not implemented)
			1 = RLE compressed
		RLE Data
			For speed, there is scope to reserve the longest RLE length (0) as an end of file marker. Instead of calculating .smEndTestL/H in C64\Decompression\DecompressRLE.a
				This would need a change to the compression util, as a new variant.
	* Use the MakeCart streamed file option to save this data
		Format:
			0	:	Next bank
			0/1	:	Next address (0 = end)
			2/3	:	End of this chunk
	* Implement the streamed RLE decompression using the start bank/address, this would need the RNXPCompressionDecompress_GetByte to handle the streamed data chunks, like the sample player for the Dragon's Lair demo did
	** Optional: In the cart boot kernal add a ROM routine that will take the start bank/address, copy itself to the start of the stack?, and run the decompression, then return obviously
		>> Optional: Display message on C64 screen, but speed would need the screen to be off...





* APU macros, could in theory, have immediate mode macros that automatically put values into the data segment for the APU.
	This would help with instructions not getting out of sync with data, making it much easier to develop and debug.
	They would need to keep track of the destination write address




* USB File send needs start end range, useful for checksum issues identified by the above memory check
		




* After Burner audio
	GAME( 1987, aburner2, 0,        sega_aburner2,       aburner2, segaxbd_new_state, init_aburner2, ROT0,"Sega", "After Burner II", 0 )
	segaxbd_new_state::sega_aburner2
		>> SEGA_XBD_ABURNER2_DEVICE
			?? segaxbd_aburner2_state
	src/mame/sega/segaxbd.cpp
		Uses #include "sound/segapcm.h"
			#include "sound/ymopm.h"
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
		map(0xf000, 0xf0ff).mirror(0x0700).rw("pcm2", FUNC(segapcm_device::read), FUNC(segapcm_device::write));
			ym2151_device &ymsnd(YM2151(config, "ymsnd", SOUND_CLOCK/4));
			segapcm_device &pcm(SEGAPCM(config, "pcm", SOUND_CLOCK/4));
		> Whereas Daytona uses multipcm_device sWriteData etc
		>> segapcm_device::sound_stream_update
			Documents 16 channels and the registers
		> Commenting out both ymsnd.add_route allows just the PCM music to be heard
	> Both segapcm_device and seem to use class sound_stream which can be a useful common way to get the time: m_stream->sample_time().as_double()
	> Will need to extract common functions for creating and updating SoundEvent
	>> segapcm_device::sound_stream_update seems to be the logical place for event recording
		> m_ram.get() with loop ch < 16
	> sSamplesUsed update method needed
		>> sSamples
			This primes the whole sample btyes buffer when it encounters a new sample:
				if (!sSamplesUsed[mSampleAddressOffset + slot.m_sample.m_start])
			Equivalent place in segapcm.cpp : v = read_byte(offset + (addr >> 8)) - 0x80;
	>> multipcm.cpp and gew.cpp use signed eight bit data
	>> segapcm.cpp uses signed eight bit data after conversion: v = read_byte(offset + (addr >> 8)) - 0x80;
	> segapcm.cpp when does it start to play a note?
		Check: regs[0x86]&1 : 0x86     bit 0: channel disable?
		Is the channel always disabled before updating any of the addresses?
			>> 		Seems to, yes
		segapcm_device::write : m_ram._Mypair._Myval2[offset]
		Register write log:
			0020 = 07   with mask 00
			0022 = 16   with mask 02
			0023 = 1b   with mask 03
			0024 = 00   with mask 04
			00a4 = 00   with mask 84
			0025 = 20   with mask 05
			00a5 = 20   with mask 85
			0026 = 23   with mask 06
			0027 = 70   with mask 07
			00a6 = c2   with mask 86
	>> How is sample pitch calculated?
		regs[7] is the amount added to the sample address, which is related to the pitch
			> In multipcm.cpp this comes from slot.m_pitchForStep, need to find the equivalent
			Perhaps this is useful: segapcm_device::segapcm_device uint32_t clock
				> device_t:m_clock and m_clock_scale
	> Trying to find the music start and "process command" code in the Z80 sound CPU
		Using trace c:\temp\startplay.txt etc
			Then removing duplicate lines, empty lines, sorting, saving to a new file like c:\temp\startplayT.txt then comparing
	> Comparing C:\temp\playingT.txt with C:\temp\startplayT.txt
		Shows different addresses being accessed...
		Studying each block and where their execution path differs...
		:mainpcb:soundcpu     0A31 seems to trigger when the Z80 is told to start playing the title 0 tune...
		> After start play
			0734: jp   (hl)
			0A31: ld   d,$91
		> There is an unusual one time only execution path:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
			0F42: ld   (iy+$00),c
			0F45: ld   a,(hl)
		Compared to commands that go to $ba7:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			>>> 0F3C: res  6,a
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
		Compared to commands before the start play that go to $ba7:
			0734: jp   (hl)
			0BA7: ld   hl,$0BEC
			0BAA: ld   iy,$FEB0
			0BAE: jp   $0F30
			0F30: ld   de,$0010
			0F33: ld   a,(hl)
			0F34: inc  hl
			0F35: bit  7,(iy+$00)
			0F39: jp   z,$0F3E
			0F3E: ld   c,a
			0F3F: ld   a,(hl)
			0F40: inc  hl
			0F41: ld   b,a
		So when bp a31 is it then bp f35...


	




* With bitmap display, Motif SGI GUI example




* Demo14: The title screen to game intro (or game) palette change is visible for a couple of frames.
	> The entire screen should be initialised to disable the sprites etc, render a couple of frame, then start the game display



* Demo14: The palettes can be computed to go into night mode




* Demo14:
	Stage 10 in the debug menu has stone pillars with rotation frames?
	It also seems to have nice rocks?
	* Also the rocks seem to have height, could be extra objects with rotated/scaled offsets using the same graphics
	The emulator crashes during this stage?




* Demo14: Stage 13
	Seems to have a car during the landing
	Motorbike?





* Demo14: Extra ground sprites, the buildings, transmission towers
	>> t-1145.png ObjectDraw7 Small buildings
	>> t-3081.png ObjectDraw8 Autumn tree
	* Definitely need an editor for rotated sprite frames
	>> See: ObjectDraw6_355 +MObjectDrawWithScaleFlips + jmp ObjectDrawReturn and Render_EnemyPlaneWhite175 +MRender_EntityObject
		> Create MObjectDrawWithScaleFlips with paramter for ObjectDrawReturn
	>> Done: Carrier could be separated to a new palette, it does use one palette so the save is worth it





* Demo14: Palette change for the ground can now be gradual
	By lerping to the new ground colours at runtime




* Demo14: During canyon, swiftly remove entities
	Stop missiles




* Rotate move ObjectDraw16 and ObjectDraw17 so they appear a bit above the other landscape objects. Like the canyon but include rotation/position offset for the specific frames.






* Demo14: Shooting the landscape should cause explosions
	Bullets done, certains buildings could do with larger explosions. There are animation frames for this available in assets\Demo14\BulletsExplosions
		>> .largeExplosion ObjectDraw19 ObjectDraw20 ObjectDraw21
	The canyon large vertical explosions, for the radio towers, (Canyon\t-1850 etc) currently use an extra palette, this would need some enemies removed from the common palettes
		>> ObjectDraw22 - ObjectDraw26
			>> .noCanyonCheckRadioTower
	The player and other landscape explosions also cause extra palettes, these will need some common palette savings, as above.




* Demo14: Turn off the tiles layer when not in runway mode





* HardwareTest_VideoPattern0 needs mode7 and APU options
	Mode7 : Just a partially rotated and scaled screen
	APU : Very simple colour palette split, perhaps two or three areas
		This will make it easier to see if the APU is working on bootup.




* Demo14: Canyon wall collide
	* Explode the player
		Yes: "Demo14\BulletsExplosions\t-731.png" "Demo14\BulletsExplosions\t-300.png" 
		No: "Demo14\BulletsExplosions\t-509.png"  "Demo14\BulletsExplosions\t-514.png" "Demo14\Bull "Demo14\BulletsExplosions\t-528.png"etsExplosions\t-523.png" "Demo14\BulletsExplosions\t-365.png"
			Palette 1 and 4 are problems
		* Maybe reduce colours in the mode7 sky?
		* Maybe upgrade the video board to have a palette or value per layer?
			This would allow 256 colours, per layer, without raster based effects
			* Last two bits of the palete bank as xor value using 74ls86
			Two bits per layer, 8 bits in a new register, probably after the palette bank register
			>> Two options, source layer pass through these bits via the layer priority selector, more logic updates...
			>> Or other option use the final layer priority after the priority selector and use the bits from the register, much less logic...
				> Given we know the layer priority select, do we get much benefit from adding more logic to pass through these bits?
			* This would allow the sprites4 layer to use the upper 16 palettes, and the chars/tiles/mode7 to use the lower 16 palettes, basically by toggling the upper bit for sprites4
				>> A test conversion with game palette 1 (16 entries), by removing the --onlyloadwholepalettes ..\tmp\Demo14ScaledSprites4Clouds.pal and --loadpaletteraw ..\tmp\Demo14TitleChars.pal  and --loadpalettebestfit ..\tmp\Demo14ScaledSprites4Clouds.pal results in 14 palettes. This would be enough to include extra explosions.
			* This is more complex than first thought
				* The background register, if active, would assume top two bits as always the palette bank, or have its own two-xor bits register (or values elsewhere)
				* The PALBANK register will need to be selected without modification when writing, but can use the selected value when reading
		* Done: @TC-14 would need updating to support Sprites4 and Sprites V9.5, it supports Sprites2 at the moment
			>> Perfect: c:\work\BombJack\output\compareimagesForTestCase.bat 42 TC-14
		* @TC-14  Needs some background register checks, changing colours
			>> Given the display has palette layer expansion
			>> Video: PALLAYERA0/1 PALLAYERB0/1 PALLAYERC0/1 PALLAYERD0/1 PALLAYERZ0/1 (for background)
			>> c:\work\BombJack\output\compareimagesForTestCase.bat 67 TC-14
				Looks good
			>> kBus24Bit_VideoLayer_ExpandedPaletteLayer kBus24Bit_VideoLayer_PaletteLayers
			>> Video_SetAddressVideoPaletteLayersRegister
			>> Updated VBlankUpdatePaletteColours
			>> Checked game emulation with simulation, seems OK, including the engine colour changes
		* Done: Need to remove the extra chars/mode7 palette loads from the sprites conversions and save separate palettes
			Before:
				01/06/2025  08:17 pm                48 Demo14ScaledSprites4Clouds.pal
				01/06/2025  08:17 pm               480 Demo14ScaledSprites4Game0.pal
				01/06/2025  08:17 pm               512 Demo14ScaledSprites4Game1.pal
				01/06/2025  08:17 pm               512 Demo14ScaledSprites4Game2.pal
				01/06/2025  08:17 pm               480 Demo14ScaledSprites4Game3.pal
				01/06/2025  08:17 pm               512 Demo14ScaledSprites4Game4.pal
				01/06/2025  08:17 pm               288 Demo14ScaledSprites4TitleScreen.pal
				01/06/2025  08:17 pm                20 Demo14TitleChars.pal
			After:
				03/06/2025  11:10 am                48 Demo14ScaledSprites4Clouds.pal
				03/06/2025  11:10 am               416 Demo14ScaledSprites4Game0.pal
				03/06/2025  11:11 am               448 Demo14ScaledSprites4Game1.pal
				03/06/2025  11:11 am               448 Demo14ScaledSprites4Game2.pal
				03/06/2025  11:11 am               416 Demo14ScaledSprites4Game3.pal
				03/06/2025  11:11 am               448 Demo14ScaledSprites4Game4.pal
				03/06/2025  11:10 am                96 Demo14ScaledSprites4TitleScreen.pal
				03/06/2025  11:10 am               480 Demo14ScaledSprites4TitleScreenSprites.pal
	* Reset the canyon walls to make them wide while exploding the player, to avoid the player escaping the canyon
		+MByteValueToAddress_A 0 , CanyonOffset
		+MByteValueToAddress_A 10 , CanyonWidth
	* Player next life sequence, scale in player from large to normal and flash the player
