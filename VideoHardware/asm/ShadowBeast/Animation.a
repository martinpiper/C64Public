!zn
AnimationFramesOriginalLo
	!by <SpriteAnimation_PlayerRunLeft0
	!by <SpriteAnimation_PlayerRunLeft1
	!by <SpriteAnimation_PlayerRunLeft2
	!by <SpriteAnimation_PlayerRunLeft3
	!by <SpriteAnimation_PlayerRunLeft4
	!by <SpriteAnimation_PlayerRunLeft5
	!by <SpriteAnimation_PlayerRunLeft6
	!by <SpriteAnimation_PlayerRunLeft7
	!fill kMaxSprites , 0

AnimationFramesOriginalHi
	!by >SpriteAnimation_PlayerRunLeft0
	!by >SpriteAnimation_PlayerRunLeft1
	!by >SpriteAnimation_PlayerRunLeft2
	!by >SpriteAnimation_PlayerRunLeft3
	!by >SpriteAnimation_PlayerRunLeft4
	!by >SpriteAnimation_PlayerRunLeft5
	!by >SpriteAnimation_PlayerRunLeft6
	!by >SpriteAnimation_PlayerRunLeft7
	!fill kMaxSprites , 0

AnimationFramesLo
	!by <SpriteAnimation_PlayerRunLeft0
	!by <SpriteAnimation_PlayerRunLeft1
	!by <SpriteAnimation_PlayerRunLeft2
	!by <SpriteAnimation_PlayerRunLeft3
	!by <SpriteAnimation_PlayerRunLeft4
	!by <SpriteAnimation_PlayerRunLeft5
	!by <SpriteAnimation_PlayerRunLeft6
	!by <SpriteAnimation_PlayerRunLeft7
	!fill kMaxSprites , 0

AnimationFramesHi
	!by >SpriteAnimation_PlayerRunLeft0
	!by >SpriteAnimation_PlayerRunLeft1
	!by >SpriteAnimation_PlayerRunLeft2
	!by >SpriteAnimation_PlayerRunLeft3
	!by >SpriteAnimation_PlayerRunLeft4
	!by >SpriteAnimation_PlayerRunLeft5
	!by >SpriteAnimation_PlayerRunLeft6
	!by >SpriteAnimation_PlayerRunLeft7
	!fill kMaxSprites , 0

!macro MAniToSlot .ani , .slot {
	lda #<.ani
	sta AnimationFramesOriginalLo + .slot
	sta AnimationFramesLo + .slot
	lda #>.ani
	sta AnimationFramesOriginalHi + .slot
	sta AnimationFramesHi + .slot
}

!zn
AnimationFrames_Process

	ldx #kMaxSprites-1
.l1
	+MAnimation_Pre .noAnim

	+MAnimation_Post

.noAnim
	dex
	+lbpl .l1


	; Handle any player movement updates
	lda #JoystickBits_Left
	bit CIA1KeyboardColumnJoystickA
	+lbne .notLeft

	jsr .testForRunAnim

;	+MSubU8FromAddrS16 PlayerPositionX , 2

	+MSubU8FromAddr16 1 , APU_Scroll0Chars , APU_Scroll0Chars + 1
	+MSubU8FromAddr16 6 , APU_Scroll1Chars , APU_Scroll1Chars+1

	+MSubU8FromAddr16 4 , APU_Scroll0 , APU_Scroll0 + 1
	+MSubU8FromAddr16 3 , APU_Scroll1 , APU_Scroll1 + 1
	+MSubU8FromAddr16 2 , APU_Scroll2 , APU_Scroll2 + 1
	+MSubU8FromAddr16 1 , APU_Scroll3 , APU_Scroll3 + 1
.alternate2l lda #1
	inc .alternate2l+1
	and #1
	bne .o2l
	+MSubU8FromAddr16 1 , APU_Scroll3 , APU_Scroll3 + 1
	+MSubU8FromAddr16 1 , APU_Scroll4 , APU_Scroll4 + 1
	+MSubU8FromAddr16 1 , APU_Scroll6 , APU_Scroll6 + 1
.o2l
.alternate1l lda #1
	inc .alternate1l+1
	and #3
	bne .o1l
	+MSubU8FromAddr16 1 , APU_Scroll5 , APU_Scroll5 + 1
.o1l

	+MSubU8FromAddr16 1 , APU_Scroll7 , APU_Scroll7 + 1
	+MSubU8FromAddr16 2 , APU_Scroll8 , APU_Scroll8 + 1
	+MSubU8FromAddr16 3 , APU_Scroll9 , APU_Scroll9 + 1
	+MSubU8FromAddr16 4 , APU_Scroll10 , APU_Scroll10 + 1
	+MSubU8FromAddr16 5 , APU_Scroll11 , APU_Scroll11 + 1


	lda #0
	sta PlayerFlip
	jmp .doneMove
.notLeft

	lda #JoystickBits_Right
	bit CIA1KeyboardColumnJoystickA
	+lbne .notRight

	jsr .testForRunAnim

;	+MAddU8ToAddr16 2 , PlayerPositionX , PlayerPositionX+1

	+MAddU8ToAddr16 1 , APU_Scroll0Chars , APU_Scroll0Chars + 1
	+MAddU8ToAddr16 6 , APU_Scroll1Chars , APU_Scroll1Chars+1

	+MAddU8ToAddr16 4 , APU_Scroll0 , APU_Scroll0 + 1
	+MAddU8ToAddr16 3 , APU_Scroll1 , APU_Scroll1 + 1
	+MAddU8ToAddr16 2 , APU_Scroll2 , APU_Scroll2 + 1
	+MAddU8ToAddr16 1 , APU_Scroll3 , APU_Scroll3 + 1
.alternate2 lda #1
	inc .alternate2+1
	and #1
	bne .o2
	; Produces a better speed for APU_Scroll3 as it is different to the trees layer
	+MAddU8ToAddr16 1 , APU_Scroll3 , APU_Scroll3 + 1
	+MAddU8ToAddr16 1 , APU_Scroll4 , APU_Scroll4 + 1
	+MAddU8ToAddr16 1 , APU_Scroll6 , APU_Scroll6 + 1
.o2
.alternate1 lda #1
	inc .alternate1+1
	and #3
	bne .o1
	+MAddU8ToAddr16 1 , APU_Scroll5 , APU_Scroll5 + 1
.o1

	+MAddU8ToAddr16 1 , APU_Scroll7 , APU_Scroll7 + 1
	+MAddU8ToAddr16 2 , APU_Scroll8 , APU_Scroll8 + 1
	+MAddU8ToAddr16 3 , APU_Scroll9 , APU_Scroll9 + 1
	+MAddU8ToAddr16 4 , APU_Scroll10 , APU_Scroll10 + 1
	+MAddU8ToAddr16 5 , APU_Scroll11 , APU_Scroll11 + 1


	lda #1
	sta PlayerFlip
	jmp .doneMove
.notRight
	lda #1
	sta .isStationary
	+MAniToSlot SpriteAnimation_PlayerStandLeft0 , 0
	+MAniToSlot SpriteAnimation_PlayerStandLeft1 , 1
	+MAniToSlot SpriteAnimation_PlayerStandLeft2 , 2
	+MAniToSlot SpriteAnimation_PlayerStandLeft3 , 3
	+MAniToSlot SpriteAnimation_PlayerStandLeft4 , 4
	+MAniToSlot SpriteAnimation_PlayerStandLeft5 , 5
	+MAniToSlot SpriteAnimation_PlayerStandLeft6 , 6
	+MAniToSlot SpriteAnimation_PlayerStandLeft7 , 7

.doneMove
	lda #JoystickBits_Up
	bit CIA1KeyboardColumnJoystickA
	bne .notUp
	lda PlayerIsJumping
	beq .newJump
	jmp .notUp2
.newJump
	lda #1
	sta PlayerIsJumping
	lda #-6
	sta PlayerVelocityY
	jmp .notUp2
.notUp
	lda PlayerVelocityY
	bpl .isPosVel2
	lda PlayerFrameToggle
	and #3
	bne .isPosVel2
	inc PlayerVelocityY
.isPosVel2
	lda #0
	sta PlayerIsJumping
.notUp2

	inc PlayerFrameToggle
	+MAdd8STo16S PlayerVelocityY , PlayerPositionY , PlayerPositionY+1

kPlayerGroundPos = 178
	; Ground check
	lda PlayerPositionY
	cmp #<kPlayerGroundPos
	bcs .onGround
	lda PlayerVelocityY
	cmp #8
	bpl .overGround
	lda PlayerFrameToggle
	and #3
	bne .overGround
	inc PlayerVelocityY
	jmp .overGround
.onGround
	lda #0
	sta PlayerVelocityY
	lda #<kPlayerGroundPos
	sta PlayerPositionY
	lda #0
	sta PlayerPositionY+1
.overGround

	lda PlayerPositionX
	sta zeroPage_Temp0
	lda PlayerPositionX+1
	sta zeroPage_Temp1
	lda PlayerPositionY
	sta zeroPage_Temp2
	lda PlayerPositionY+1
	sta zeroPage_Temp3

	; The player object screen position update is a special case as it's comprised of so many sprites
	; Calculate the sprite offset to the screen coordinates

	lda PlayerFlip
	+lbne .flipRight
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #0
	jsr AnimTestSpriteScreenEdge
	+MAddU8ToAddr16 16 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #1
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #2
	jsr AnimTestSpriteScreenEdge
	+MAddU8ToAddr16 16 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #3
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #4
	jsr AnimTestSpriteScreenEdge
	+MAddU8ToAddr16 16 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #5
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #6
	jsr AnimTestSpriteScreenEdge
	+MAddU8ToAddr16 16 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #7
	jsr AnimTestSpriteScreenEdge

	rts

.flipRight
!for .i , 8 {
	lda SpriteFrameDataColour + .i-1
	eor #kBus24Bit_Video_FlipH
	sta SpriteFrameDataColour + .i-1
}

	+MAddU8From16ToAddr16 16 , zeroPage_Temp0 , zeroPage_Temp1 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #0
	jsr AnimTestSpriteScreenEdge
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #1
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddU8From16ToAddr16 16 , zeroPage_Temp0 , zeroPage_Temp1 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #2
	jsr AnimTestSpriteScreenEdge
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #3
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddU8From16ToAddr16 16 , zeroPage_Temp0 , zeroPage_Temp1 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #4
	jsr AnimTestSpriteScreenEdge
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #5
	jsr AnimTestSpriteScreenEdge

	+MAddU8ToAddr16 16 , zeroPage_Temp2 , zeroPage_Temp3
	+MAddU8From16ToAddr16 16 , zeroPage_Temp0 , zeroPage_Temp1 , zeroPage_Temp4 , zeroPage_Temp5
	ldx #6
	jsr AnimTestSpriteScreenEdge
	+MAddr16ToAddr16_A zeroPage_Temp0 , zeroPage_Temp4
	ldx #7
	jsr AnimTestSpriteScreenEdge

	rts

.testForRunAnim
	lda .isStationary
	bne .wantRun
	rts
.wantRun
	lda #0
	sta .isStationary
	+MAniToSlot SpriteAnimation_PlayerRunLeft0 , 0
	+MAniToSlot SpriteAnimation_PlayerRunLeft1 , 1
	+MAniToSlot SpriteAnimation_PlayerRunLeft2 , 2
	+MAniToSlot SpriteAnimation_PlayerRunLeft3 , 3
	+MAniToSlot SpriteAnimation_PlayerRunLeft4 , 4
	+MAniToSlot SpriteAnimation_PlayerRunLeft5 , 5
	+MAniToSlot SpriteAnimation_PlayerRunLeft6 , 6
	+MAniToSlot SpriteAnimation_PlayerRunLeft7 , 7
	rts

.isStationary	!by 0
PlayerFlip		!by 0
PlayerIsRunning	!by 0
PlayerIsJumping	!by 0
PlayerPositionX	+MLittleEndian16Bit 112
PlayerPositionY	+MLittleEndian16Bit 128
PlayerVelocityY !by 0
PlayerFrameToggle !by 0

!source "asm/Anim_ScreenEdge.a"


