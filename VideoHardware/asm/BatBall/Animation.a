!zn
AnimationFramesOriginalLo
	!by <SpriteAnimation_PlayerLeft
	!by <SpriteAnimation_PlayerRight
	!by <SpriteAnimation_Enemy1
	!by <SpriteAnimation_Enemy1
	!by <SpriteAnimation_Enemy2
	!by <SpriteAnimation_Enemy3
	!by <SpriteAnimation_Enemy4
	!by <SpriteAnimation_Ball1
	!by <SpriteAnimation_Ball1
	!by <SpriteAnimation_Ball1

	!fill kMaxSprites , 0

AnimationFramesOriginalHi
	!by >SpriteAnimation_PlayerLeft
	!by >SpriteAnimation_PlayerRight
	!by >SpriteAnimation_Enemy1
	!by >SpriteAnimation_Enemy1
	!by >SpriteAnimation_Enemy2
	!by >SpriteAnimation_Enemy3
	!by >SpriteAnimation_Enemy4
	!by >SpriteAnimation_Ball1
	!by >SpriteAnimation_Ball1
	!by >SpriteAnimation_Ball1

	!fill kMaxSprites , 0

AnimationFramesLo
	!by <SpriteAnimation_PlayerLeft
	!by <SpriteAnimation_PlayerRight
	!by <SpriteAnimation_Enemy1
	!by <SpriteAnimation_Enemy1
	!by <SpriteAnimation_Enemy2
	!by <SpriteAnimation_Enemy3
	!by <SpriteAnimation_Enemy4
	!by <SpriteAnimation_Ball1
	!by <SpriteAnimation_Ball1
	!by <SpriteAnimation_Ball1

	!fill kMaxSprites , 0

AnimationFramesHi
	!by >SpriteAnimation_PlayerLeft
	!by >SpriteAnimation_PlayerRight
	!by >SpriteAnimation_Enemy1
	!by >SpriteAnimation_Enemy1
	!by >SpriteAnimation_Enemy2
	!by >SpriteAnimation_Enemy3
	!by >SpriteAnimation_Enemy4
	!by >SpriteAnimation_Ball1
	!by >SpriteAnimation_Ball1
	!by >SpriteAnimation_Ball1

	!fill kMaxSprites , 0


; This handles either the X or Y velocity and the corresponding positions.
; Doing it like this means the same code can be used to detect collisions, it also makes the block edge reactions easier to code.
!macro MHandleVelocity .SpriteFrameDataLo , .SpriteFrameData , .SpriteFrameDataDeltaLo , .SpriteFrameDataDeltaHi , .minPos , .maxPos {
	lda .SpriteFrameDataLo,x
	sta .smLo+1
	clc
	adc .SpriteFrameDataDeltaLo,x
	sta .SpriteFrameDataLo,x
	lda .SpriteFrameData,x
	sta .smHi+1
	adc .SpriteFrameDataDeltaHi,x
	sta .SpriteFrameData,x
	cmp #.minPos
	bcc .swapSign
	cmp #.maxPos
	bcs .swapSign
	jmp .over
.swapSign
	; If there is a bounce, i.e. if a velocity sign swap is needed
	; Then restore the original position before the bounce
.smLo lda #0
	sta .SpriteFrameDataLo,x
.smHi lda #0
	sta .SpriteFrameData,x
	; Then swap the sign
	lda #0
	sec
	sbc .SpriteFrameDataDeltaLo,x
	sta .SpriteFrameDataDeltaLo,x
	lda #0
	sbc .SpriteFrameDataDeltaHi,x
	sta .SpriteFrameDataDeltaHi,x
	jmp .end
.over
	; Handle ball to block collision
	lda SpriteFrameDataIsBall,x
	+lbeq .notBall

!if .SpriteFrameData = SpriteFrameDataY {
	; Bat hit ball test

	; If the ball is already travelling upwardsm, then ignore the bat to ball test
	lda .SpriteFrameDataDeltaHi,x
	bpl .noBat

	; Hit the top of the bat yet?
	lda SpriteFrameDataY,x
	cmp #16
	bcs .noBat

	; Bat width test
	lda SpriteFrameDataX,x
	clc
	adc #2
	sec
	sbc SpriteFrameDataX
	cmp #32
	bcs .noBat

	; Use the horizontal hit position to alter the X velocity for the bounce
	sec
	sbc #16
	; Shift it down a little
	ldy #0
	sty zeroPage_Temp2
	+M_ASR
	ror zeroPage_Temp2
	+M_ASR
	ror zeroPage_Temp2
	+M_ASR
	ror zeroPage_Temp2

	clc
	adc SpriteFrameDataXDeltaHi,x
	sta SpriteFrameDataXDeltaHi,x
	lda SpriteFrameDataXDeltaLo,x
	adc zeroPage_Temp2
	sta SpriteFrameDataXDeltaLo,x

	; Bounce!
	jmp .swapSign

.noBat
}


	; TODO: Currently a point test. Edge test is quite expensive.
	ldy SpriteFrameDataY,x
	sty .smy+1
	lda SpritePosYToBlockScreenLo,y
	sta zeroPage_Temp2

	lda SpritePosYToBlockScreenHi,y
	sta zeroPage_Temp3
	ldy SpriteFrameDataX,x
	lda SpritePosXToBlockScreenLo,y
	tay
	lda (zeroPage_Temp2),y
	beq .noBlock

	; Trigger a block removal in the vblank
	sty BlockRemove1Y

	lda zeroPage_Temp2
	sta BlockRemove1
	lda zeroPage_Temp3
	sta BlockRemove1 + 1

.smy	ldy #0
	lda SpritePosYToMainVideoScreenLo,y
	sta BlockRemove1MainVideo
	lda SpritePosYToMainVideoScreenHi,y
	sta BlockRemove1MainVideo+1
	lda SpritePosYToOriginalMainScreenHi,y
	sta BlockRemove1OriginalMain

	jmp .swapSign

.noBlock
.notBall
.end
}

!align 255,0
SpritePosYToBlockScreenLo
!for .ii , 256 {
!set .i = (256 - .ii) - 10
!if .i < 0 {
	!set .i = 0
}
	!by <(BlockScreen + ((.i / 8) * $20))
}
SpritePosYToBlockScreenHi
!for .ii , 256 {
!set .i = (256 - .ii) - 10
!if .i < 0 {
	!set .i = 0
}
	!by >(BlockScreen + ((.i / 8) * $20))
}

; The address in the video hardware
SpritePosYToMainVideoScreenLo
!for .ii , 256 {
!set .i = (256 - .ii) - 10
!if .i < 0 {
	!set .i = 0
}
	!by <(kBus24Bit_CharScreenMap + ((.i / 8) * $40))
}
SpritePosYToMainVideoScreenHi
!for .ii , 256 {
!set .i = (256 - .ii) - 10
!if .i < 0 {
	!set .i = 0
}
	!by >(kBus24Bit_CharScreenMap + ((.i / 8) * $40))
}
SpritePosYToOriginalMainScreenHi
!for .ii , 256 {
!set .i = (256 - .ii) - 10
!if .i < 0 {
	!set .i = 0
}
	!by >(OriginalMainScreen + ((.i / 8) * $20))
}

SpritePosXToBlockScreenLo
!for .ii , 256 {
!set .i = .ii - 1 + 2
	!by .i / 8
}

!zn
AnimationFrames_Process
	ldx #kMaxSprites-1
.l1
	+MAnimation_Pre .noAnim

	+MHandleVelocity SpriteFrameDataXLo , SpriteFrameDataX , SpriteFrameDataXDeltaLo , SpriteFrameDataXDeltaHi , 10 , 232
	+MHandleVelocity SpriteFrameDataYLo , SpriteFrameDataY , SpriteFrameDataYDeltaLo , SpriteFrameDataYDeltaHi , 6 , 218

	+MAnimation_Post

.noAnim
	dex
	+lbpl .l1
	rts
