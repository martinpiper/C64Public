!zn
DisplayScreen
	jsr Bus24Bit_Init

	jsr Video_DisableDisplay
	jsr Video_InitDisplaySpritesScrollsBackground
	lda #kVideo_EnableDisplay_Enable | kVideo_EnableDisplay_Tiles_Enable
	jsr Video_EnableDisplay
	inc VIC2BorderColour

	jsr TileScrollUpdates

	lda #1
	+MWordValueTo_XY $9c00
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX .palette
	ldy #0
	jsr Bus24Bit_CopySmallData
	jsr Bus24Bit_CopySmallDataAgain
	inc VIC2BorderColour

	lda #$40
	+MWordValueTo_XY $2000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .plane0
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kTilesSizeHi
	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$40
	+MWordValueTo_XY $4000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .plane1
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kTilesSizeHi
	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$40
	+MWordValueTo_XY $8000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .plane2
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kTilesSizeHi
	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$40
	+MWordValueTo_XY $0000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .plane3
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kTilesSizeHi
	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$80
	+MWordValueTo_XY $2000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX TilesScreen
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #$1f
	jsr Bus24Bit_CopySmallDataRepeatForX

	; Chars
	lda #$20
	+MWordValueTo_XY $2000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .charsPlane0
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kCharsSizeHi
;	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$20
	+MWordValueTo_XY $4000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .charsPlane1
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kCharsSizeHi
;	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$20
	+MWordValueTo_XY $8000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .charsPlane2
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kCharsSizeHi
;	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	lda #$20
	+MWordValueTo_XY $0000
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX .charsPlane3
	ldy #0
	jsr Bus24Bit_CopySmallData
	ldx #kCharsSizeHi
;	jsr Bus24Bit_CopySmallDataRepeatForX
	inc VIC2BorderColour

	jsr Bus24Bit_Reset
	inc VIC2BorderColour
	rts


SetMaskingCharScreen
!for .yy , 32 {
!set .y = .yy -1
	lda #kBus24Bit_CharScreenMap_EBBS
	+MWordValueTo_XY kBus24Bit_CharScreenMap + (.y * 64)
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX CharScreen + (.y * 32)
	ldy #32
	jsr Bus24Bit_CopySmallData

	; Luckily palette 15 colour 15 is black :)

	lda #kBus24Bit_CharScreenMap_EBBS
	+MWordValueTo_XY kBus24Bit_CharColourMap + (.y * 64)
	jsr Bus24Bit_SetAddressBus
	ldy #32
	lda #$0f
	jsr Bus24Bit_WriteAForY
}
	rts

.palette
	!bin "tmp/BatBallAnim_palette.bin"
	; Set any remaining palette data to black
	!fill $200 , 0

.plane0
	!bin "tmp/BatBallAnim_plane0.bin"
.plane1
	!bin "tmp/BatBallAnim_plane1.bin"
.plane2
	!bin "tmp/BatBallAnim_plane2.bin"
kTilesSizeHi = >(* - .plane2)
.plane3
	!bin "tmp/BatBallAnim_plane3.bin"

.charsPlane0
.charsPlane1
.charsPlane2
.charsPlane3
	!fill 8 , 0
	!fill 8 , $ff
kCharsSizeHi = >(* - .charsPlane2)

TilesScreen
	!bin "tmp/BatBallAnim_map.bin"


TileScreenScrollX
	+MLittleEndian16Bit -32

TileScreenScrollY
	+MLittleEndian16Bit -128

!zn
.bounceTab
!for .i , 256 {
	!by <(8.5 + (7 * sin( (float(.i) / 128) * 3.14159265 )))
}
.bounceTab2
!for .i , 256 {
	!by <(8.5 + (7 * cos( (float(.i) / 64) * 3.14159265 )))
}

TileScrollUpdates
	jsr Video_SetAddressTileScrollRegisters
.l1
.sm0	ldy #0
.sm1	lda ShipScrollsToUse
	clc
	adc .bounceTab2,y
	sta CIA2PortBRS232
.sm2	lda ShipScrollsToUse
	adc #0
	sta CIA2PortBRS232
.sm3	lda ShipScrollsToUse
	clc
	adc .bounceTab,y
	sta CIA2PortBRS232
.sm4	lda ShipScrollsToUse
	adc #0
	sta CIA2PortBRS232

	dec .delayTime
	bne .l3

	lda #5
	sta .delayTime

	lda .sm1+1
	clc
	adc #4
	sta .sm1+1
	bcc .l2
	inc .sm1+2
.l2
	lda .sm1+1
	cmp #<ShipScrollsToUse_End
	bne .l3
	lda .sm1+2
	cmp #>ShipScrollsToUse_End
	bne .l3
	+MWordValueToAddress_A ShipScrollsToUse , .sm1+1
.l3
	; Avoiding indirect access, due to the above Y additions
	+MAddr16toAddr_A .sm1+1 , .sm2+1
	+MAddr16toAddr_A .sm1+1 , .sm3+1
	+MAddr16toAddr_A .sm1+1 , .sm4+1
	+MAddU8ToAddr16 1 , .sm2+1,.sm2+2
	+MAddU8ToAddr16 2 , .sm3+1,.sm3+2
	+MAddU8ToAddr16 3 , .sm4+1,.sm4+2

	inc .sm0+1

	rts
.delayTime !by 5

!macro MDoShipFrame .x , .y {
	+MLittleEndian16Bit -40 + (208 * .x)
	+MLittleEndian16Bit -136 + (112 * .y)
}

ShipScrollsToUse
!for .shipY , 5 {
!for .shipX , 4 {
	+MDoShipFrame .shipX-1 , .shipY-1
}
}
ShipScrollsToUse_End


!macro CharLine .v {
!for .i , 32 {
	!by (.v>>(32-.i))&1
}
}

; Rememebr the first two char screen lines are not visible, but do alter the character screen palette bank control register
CharScreen
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................
	+CharLine %................................


	+CharLine %################################
	+CharLine %################################
	+CharLine %################################
	+CharLine %################################
	+CharLine %################################
	+CharLine %################################
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###

	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %###..........................###
	+CharLine %################################
	+CharLine %################################
	+CharLine %################################
	+CharLine %################################

	+CharLine %################################
	+CharLine %################################
