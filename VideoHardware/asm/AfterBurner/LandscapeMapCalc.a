!zn
UpdateLandscapeFrameInternal
	lda landscapeFrame
	clc
	adc landscapeFrameSpeed
	sta landscapeFrame
	cmp #8
	+lbcc .noNewRow
	and #7
	sta landscapeFrame

	+MAddr16ToAddr16_A LandscapeMapRowsDataAddress , zeroPage_Temp18

	; Calculate new map data into the row we are just about to move over
	jsr Rand
	eor #%10110101
	sta .sme1+1
	; This adjusts the row that gets updated to the new map row type is introduced right at the far visible edge of the horizon
	lda LandscapeMapRowOffset
	sec
	sbc #16*7
	tax
	lda #17	; Add one to remove any previous data due to banking or moving right in the level map
	sta zeroPage_Temp0
.umd1
	jsr Rand
.sme1	eor #%10110101
	and #7
	clc
	adc #kLandscapeMapRowsData_offset_LandscapeObjectTypes
	tay
	lda (zeroPage_Temp18),y
	sta LandscapeMap,x
	inx
	inc .sme1+1
	ror .sme1+1
	dec zeroPage_Temp0
	bne .umd1

	lda LandscapeMapRowOffset
	clc
	ldy landscapeRotationsFrame
	adc landscapeRotationsFrameToOffset,y
	sta LandscapeMapRowOffset
	and #$f0
	+lbne .noAdvanceLandscapeMapRowsDataAddress

	lda LandscapeMapRowsFreezeUpdates
	+lbne .noAdvanceLandscapeMapRowsDataAddress

	; Check active entity types for exit criteria
	; First copy the data, so it can prepare for a failure where the landscape loops until successful exit criteria
	ldy #kLandscapeMapRowsData_offset_EntityObjectExitTypes
	ldx #7
.chk1
	lda (zeroPage_Temp18),y
	sta SpawnList_enemyTypesIndex,x
	iny
	dex
	bpl .chk1

	; Check for exit criteria
	ldx #SortHardMaxEntries-1
.chk2
	lda EntityTypeHi,x
	beq .noActiveEntity
	lda EntityTypeIndex,x
	bmi .noActiveEntity
	sta .compareIndex+1
	ldy #7
.chk3
	lda SpawnList_enemyTypesIndex,y
	bmi .skip1
.compareIndex	cmp #0
	beq .noActiveEntity
.skip1
	dey
	bpl .chk3
	; The active entity type does not match the spawn (exit) list, so fail this exit criteria check and skip the map advance
	jmp .noAdvanceLandscapeMapRowsDataAddress
.noActiveEntity
	dex
	bpl .chk2


	; Advance through the map data row types with each whole landscape pass
	+MAddU8ToAddr16 kLandscapeMapRowsData_size , LandscapeMapRowsDataAddress , LandscapeMapRowsDataAddress + 1

	lda LandscapeMapRowsDataAddress
	cmp #<LandscapeMapRowsDataEnd
	bne .over1
	lda LandscapeMapRowsDataAddress+1
	cmp #>LandscapeMapRowsDataEnd
	bne .over1
	+MWordValueToAddress_A LandscapeMapRowsData , LandscapeMapRowsDataAddress
	jmp .startProcessingAtPaletteOffset

.over1
	; Processs any formation data, variable length block, slightly complicated :)
	+MAddr16ToAddr16_A LandscapeMapRowsDataAddress , zeroPage_Temp18
	ldx #0
	stx SpawnEnemy_CurrentIndex
.checkFormationLoop
	; Process LandscapeMapRowsData_Formation_WhenTypePos data
	ldy #0
	lda (zeroPage_Temp18),y
	bmi .endFormationList
	sta SpawnEnemy_Type,x

	iny
	lda (zeroPage_Temp18),y
	sta SpawnEnemy_When,x

	iny
	lda (zeroPage_Temp18),y
	sta SpawnEnemy_X,x

	iny
	lda (zeroPage_Temp18),y
	sta SpawnEnemy_Y,x

	iny
	lda (zeroPage_Temp18),y
	sta SpawnEnemy_Z,x

	inx
	+MAddU8ToAddr16 kLandscapeMapRowsData_offset_Formation_Size , zeroPage_Temp18 , zeroPage_Temp18 + 1	; TODO: Magic numbers
	jmp .checkFormationLoop

.endFormationList
	+MIncAddr16 zeroPage_Temp18 , zeroPage_Temp19
	+MAddr16ToAddr16_A zeroPage_Temp18 , LandscapeMapRowsDataAddress

.startProcessingAtPaletteOffset
	; Update the palette bank for the current map row type
	ldy #kLandscapeMapRowsData_offset_Palette
	+MAddr16ToAddr16_A LandscapeMapRowsDataAddress , zeroPage_Temp18
	lda (zeroPage_Temp18),y
	sta GamePaletteBank
	; And other map row type information
	ldy #kLandscapeMapRowsData_offset_Ground
	lda (zeroPage_Temp18),y
	sta GroundColours
	ldy #kLandscapeMapRowsData_offset_Flags
	lda (zeroPage_Temp18),y
	sta LandscapeFlags
	; Enemy spawn types update
	ldy #kLandscapeMapRowsData_offset_EntityObjectTypes
	ldx #7
.cet1
	lda (zeroPage_Temp18),y
	sta SpawnList_enemyTypesIndex,x
	iny
	dex
	bpl .cet1

.noAdvanceLandscapeMapRowsDataAddress


.noNewRow
	rts


; Map row data...
; 1 Byte palette bank -> GamePaletteBank
; 1 byte -> GroundColours
; 1 byte -> LandscapeFlags
; 8 bytes of object types that can be randomly selected for every entire cycle through the whole range of the landscape with LandscapeMapRowOffset

kLandscapeMapRowsData_offset_Palette				= 0
kLandscapeMapRowsData_offset_Ground					= 1
kLandscapeMapRowsData_offset_Flags					= 2
kLandscapeMapRowsData_offset_EntityObjectTypes		= 3
kLandscapeMapRowsData_offset_EntityObjectExitTypes	= 11
kLandscapeMapRowsData_offset_LandscapeObjectTypes	= 19
kLandscapeMapRowsData_size							= 27
; Extra variable length data
kLandscapeMapRowsData_offset_Formation				= 28
kLandscapeMapRowsData_offset_Formation_Size			= 5

kLandscapeMapRowsData_flags_doLanding	= %00000001
kLandscapeMapRowsData_flags_doCanyon	= %00000010
kLandscapeMapRowsData_flags_doRefueling = %00000100

!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_Palette

!macro LandscapeMapRowsData_PalettesFlags .palette , .ground , .flags {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_Palette
	!by .palette , .ground , .flags
	!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_EntityObjectTypes
}

!macro LandscapeMapRowsData_EntityObjects .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7 {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_EntityObjectTypes
	!by .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7
	!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_EntityObjectExitTypes
}

!macro LandscapeMapRowsData_EntityObjectsExit .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7 {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_EntityObjectExitTypes
	!by .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7
	!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_LandscapeObjectTypes
}

!macro LandscapeMapRowsData_LandscapeObjects .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7 {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_LandscapeObjectTypes
	!by .o0 , .o1 , .o2 , .o3 , .o4 , .o5 , .o6 , .o7
	!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_Formation
}

!macro LandscapeMapRowsData_FormationEnd {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_Formation
	!by -1
	!set LandscapeMapRowsData_MustDoType = kLandscapeMapRowsData_offset_Palette
}

!macro LandscapeMapRowsData_Formation_WhenTypePos .when , .type , .x , .y , .z {
	+MAssertEquals LandscapeMapRowsData_MustDoType , kLandscapeMapRowsData_offset_Formation
	!by .type , .when , .x , .y , .z
}
