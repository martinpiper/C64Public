kAPUNumRunwayRows = 240-15

!zn
TotalAPU_Start

APUCode_Start
!pseudopc 0 {
frameStart0
	+MAPU
	+MAPU kAPU_Reset_ADDRB1

	; Get EBSEADDR values
	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1

	; Mode7 changes
	+MAPU_LoadDoWait
	+MAPU_LoadEADDRFromB1
!for .i , 6 * 3 {
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR
}

	; Get EBSEADDR values
	+MAPU kAPU_Load_EBS | kAPU_Load_EBS2
	+MAPU kAPU_Incr_ADDRB1

	; Load APULineScrolls
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_ADDRB2Load16

	; Top of screen
	+MAPU_LoadDoWait
	+MAPU_ProcessRasterWord

	; During the Runway update
	; ADDRB1 = APULineWaits
	; ADDRB2 = APULineScrolls

	; Runway
	; For <kBus24Bit_TileScreen_ScrollY16
	+MAPU kAPU_IDataRegLoad2
	+MAPU kAPU_Incr_ADDRB1
	; APURunwayLoop
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	; kAPUNumRunwayRows and 1
	+MAPU kAPU_IDataRegLoad3
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad4
	+MAPU kAPU_Incr_ADDRB1

	; APULineScrolls
	; Remaining lines
APURunwayLoop
	+MAPU_LoadDoWait

	; Restore EADDRLo
	+MAPU kAPU_Load_EADDRLo | kAPU_IDataSelectReg2
	+MAPU_ProcessWordB2

	+MAPU kAPU_IDataSelectReg3SubReg4 | kAPU_IDataRegLoad3
	+MAPU kAPU_IDataSelectReg3
	+MAPU kAPU_PCLoad16 | kAPU_SkipIfEQ | kAPU_IDataSelectReg3

	+MAPU kAPU_Reset_PC
	+MAPU
}

APUCode_Size = *-APUCode_Start

!if APUCode_Size > 8192 {
	!error "APUCode_Size too large"
}

APUData_Start
	!by kBus24Bit_Mode7Screen_EBBS

	; Next RHRV to wait for, the start of the VBlank
	+MAPU_EmitWait 0 , $f0
	+MLittleEndian16Bit kBus24Bit_Mode7Screen_Registers
APUData_Start_Mode7Registers
	; dx
	!by 0 , $1 , 0
	; dxy
	!by 0 , 0 , 0
	; dy
	!by 0 , $1 , 0
	; dyx
	!by 0 , 0 , 0
	; xpos
	!by 0 , 0 , 0
	; ypos
	!by 0 , 0 , 0

	; For line scrolls
	!by $01
	+MLittleEndian16Bit APULineScrolls - APUData_Start

	; Top of screen
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start - kMAPUEmitChangePaletteIndexHSyncAdjust , 12
	; And reset the low kBus24Bit_TileScreen_ScrollY16
	+MLittleEndian16Bit kBus24Bit_TileScreen_ScrollY16
	!word -1

	; Runway
	!by <kBus24Bit_TileScreen_ScrollY16
	!word APURunwayLoop / kAPU_InstructionSize
	!by kAPUNumRunwayRows
	!by 1

	; Remaining lines
APULineWaits
!for .i , kAPUNumRunwayRows {
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start , 14 + .i -1
}

APULineScrolls
!for .i , kAPUNumRunwayRows {
	!word -((.i-1)+15) + 0					; Selects row 0, the empty line
;	!word -((.i-1)+15) + 1					; Selects row 1, the one pixel line
;	!word -((.i-1)+15) + (.i & $f)			; Selects a pattern
;	!word -((.i-1)+15) + (.i & $f) + $40	; Selects a pattern
;	!word -((.i-1)+15) + (.i & $f) + $80	; Selects a pattern
}

APUData_End
APUData_Size = APUData_End - APUData_Start

!if APUData_Size > 8192 {
	!error "APUData_Size too large"
}

TotalAPU_Size = * - TotalAPU_Start


SetupAPU
	; Test for maths involved in processing the runway tables
	jsr APU_SetAddressAPUInstructions
	+MWordValueTo_AX APUCode_Start
	ldy #<APUCode_Size
	jsr Bus24Bit_CopySmallData
!if >APUCode_Size > 0 {
	ldx #>APUCode_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	jsr APU_SetAddressAPUData
	+MWordValueTo_AX APUData_Start
	ldy #<APUData_Size
	jsr Bus24Bit_CopySmallData
!if >APUData_Size > 0 {
	ldx #>APUData_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	rts
