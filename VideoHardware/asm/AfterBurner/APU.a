; It is *very* important this happens in the VBlank. The scaled sprite hardware is always a frame behind because it uses the entire frame to calulate data, but the mode7 layer is on the immediately displayed frame.
; The APU waits for the VBlank to start then updates the mode7 registers, effectively showing the mode7 update a frame after the sprite update is trigered.
VBlankUpdateHorizon
	+MAPU_SetDataUpdateBus APUData_Start_Mode7Registers

	ldx landscapeRotationsFrame
	; Send: dx , dxy , dy , dyx
!for .i , 12 {
	lda landscapeRotationHorizonDXDY+((.i-1)*ScreenLandscapeNumRollSteps),x
	+MBus24Bit_Send8BitValueFromA
}

!if 1 {
	ldx landscapeRotationsFrame
	lda landscapeRotationsFrameToHorizonSpeed,x
	sta .horizonXOffsetSpeed+1
	bmi .makeNeg
	lda #0
	sta .horizonXOffsetSpeed+2
	jmp .overCalcHorizonSpeed
.makeNeg
	lda #-1
	sta .horizonXOffsetSpeed+2
.overCalcHorizonSpeed
	+MAdd24To24ToOut .horizonXOffset , .horizonXOffsetSpeed, .horizonXOffset

	; Reset and set the 24 bit address in 32 bit mode
	jsr Bus20To32Bit1_ShortReset
	+MBus20To32Bit1_SetLatch7_A
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable | kBus20To32Bit1_latch7_InternalPA2
	+MBus20To32Bit1_SetLatch4_A
	+MAPU_SetDataUpdateBusNoReset APUData_Start_Mode7Registers + 12	; After rotations

	; Set the add value, rotation index multiplied by 6
	ldy landscapeRotationsFrame
	jsr Bus20To32Bit1_SetLatch8
	lda MultiplyByMul6,y
	+MBus24Bit_Send8BitValueFromA
	jsr Bus20To32Bit1_SetLatch9
	lda MultiplyByMul6 + ScreenLandscapeNumRollSteps , y
	+MBus24Bit_Send8BitValueFromA
	jsr Bus20To32Bit1_SetLatch10
	+MBus24Bit_Send8BitValue 0

	; Set the address
	ldx playerYPositionOffsetForHorizon
	+MBus20To32Bit1_SetLatch0_A
	lda landscapeRotationHorizonOffsetTab,x
	+MBus24Bit_Send8BitValueFromA
	+MBus20To32Bit1_SetLatch1_A
	lda landscapeRotationHorizonOffsetTab + 27,x
	+MBus24Bit_Send8BitValueFromA
	+MBus20To32Bit1_SetLatch2_A
	lda landscapeRotationHorizonOffsetTab + 27 + 27,x
	+MBus24Bit_Send8BitValueFromA

	; Add offset to address
	+MBus20To32Bit1_SetLatch3_A
	+MBus24Bit_Send8BitValueFromA

	+MBus20To32Bit1_ReadMode_A
	+MBus20To32Bit1_SetLatch5_A

	; xorg
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork+1
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork+2

	; Adjust for height
	lda #landscapeHeightsMax
	sec
	sbc landscapeHeightsFrame
	lsr
	lsr
	sta .smYPos1+1

	; yorg
	+MBus24Bit_Get8BitValueToA
	sta zeroPage_Temp0
	+MBus24Bit_Get8BitValueToA
	clc
.smYPos1	adc #0
	sta zeroPage_Temp1
	+MBus24Bit_Get8BitValueToA
	adc #0
	sta zeroPage_Temp2

	+MAdd24To24ToOut .horizonXOffset , .horizonXOffsetWork, .horizonXOffsetWork
	+MBus20To32Bit1_WriteMode_A
	+MBus20To32Bit1_SetLatch4_A
	+MBus24Bit_SendLE24BitValueFromAddress .horizonXOffsetWork

	; yorg
	+MBus24Bit_SendLE24BitValueFromAddress zeroPage_Temp0

	; 24 bit mode, preserving the external address
	+MBus20To32Bit1_WriteMode_A
	+MBus20To32Bit1_SetLatch7_A
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone
}

	rts


.horizonXOffset
	+MLittleEndian24Bit 0
.horizonXOffsetSpeed
	+MLittleEndian24Bit 0
.horizonXOffsetWork
	+MLittleEndian24Bit 0
