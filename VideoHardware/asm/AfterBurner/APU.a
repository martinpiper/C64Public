kAPUNumRunwayRows = 240-15
;kAPUNumRunwayRows = 8

; It is *very* important this happens in the VBlank. The scaled sprite hardware is always a frame behind because it uses the entire frame to calulate data, but the mode7 layer is on the immediately displayed frame.
; The APU waits for the VBlank to start then updates the mode7 registers, effectively showing the mode7 update a frame after the sprite update is trigered.
VBlankUpdateHorizon
	+MAPU_SetDataUpdateBus APUData_Start_Mode7Registers

	ldx landscapeRotationsFrame
	; Send: dx , dxy , dy , dyx
!for .i , 12 {
	lda landscapeRotationHorizonDXDY+((.i-1)*ScreenLandscapeNumRollSteps),x
	+MBus24Bit_Send8BitValueFromA
}

!if 1 {
	ldx landscapeRotationsFrame
	lda landscapeRotationsFrameToHorizonSpeed,x
	sta .horizonXOffsetSpeed+1
	bmi .makeNeg
	lda #0
	sta .horizonXOffsetSpeed+2
	jmp .overCalcHorizonSpeed
.makeNeg
	lda #-1
	sta .horizonXOffsetSpeed+2
.overCalcHorizonSpeed
	+MAdd24To24ToOut .horizonXOffset , .horizonXOffsetSpeed, .horizonXOffset

	; Reset and set the 24 bit address in 32 bit mode
	jsr Bus20To32Bit1_ShortReset
	+MBus20To32Bit1_SetLatch7_A
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable | kBus20To32Bit1_latch7_InternalPA2
	+MBus20To32Bit1_SetLatch4_A
	+MAPU_SetDataUpdateBusNoReset APUData_Start_Mode7Registers + 12	; After rotations

	; Set the add value, rotation index multiplied by 6
	ldy landscapeRotationsFrame
	jsr Bus20To32Bit1_SetLatch8
	lda MultiplyByMul6,y
	+MBus24Bit_Send8BitValueFromA
	jsr Bus20To32Bit1_SetLatch9
	lda MultiplyByMul6 + ScreenLandscapeNumRollSteps , y
	+MBus24Bit_Send8BitValueFromA
	jsr Bus20To32Bit1_SetLatch10
	+MBus24Bit_Send8BitValue 0

	; Set the address
	ldx playerYPositionOffsetForHorizon
	+MBus20To32Bit1_SetLatch0_A
	lda landscapeRotationHorizonOffsetTab,x
	+MBus24Bit_Send8BitValueFromA
	+MBus20To32Bit1_SetLatch1_A
	lda landscapeRotationHorizonOffsetTab + 27,x
	+MBus24Bit_Send8BitValueFromA
	+MBus20To32Bit1_SetLatch2_A
	lda landscapeRotationHorizonOffsetTab + 27 + 27,x
	+MBus24Bit_Send8BitValueFromA

	; Add offset to address
	+MBus20To32Bit1_SetLatch3_A
	+MBus24Bit_Send8BitValueFromA

	+MBus20To32Bit1_ReadMode_A
	+MBus20To32Bit1_SetLatch5_A

	; xorg
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork+1
	+MBus24Bit_Get8BitValueToA
	sta .horizonXOffsetWork+2

	; Adjust for height
	lda #landscapeHeightsMax
	sec
	sbc landscapeHeightsFrame
	lsr
	lsr
	sta .smYPos1+1

	; yorg
	+MBus24Bit_Get8BitValueToA
	sta zeroPage_Temp0
	+MBus24Bit_Get8BitValueToA
	clc
.smYPos1	adc #0
	sta zeroPage_Temp1
	+MBus24Bit_Get8BitValueToA
	adc #0
	sta zeroPage_Temp2

	+MAdd24To24ToOut .horizonXOffset , .horizonXOffsetWork, .horizonXOffsetWork
	+MBus20To32Bit1_WriteMode_A
	+MBus20To32Bit1_SetLatch4_A
	+MBus24Bit_SendLE24BitValueFromAddress .horizonXOffsetWork

	; yorg
	+MBus24Bit_SendLE24BitValueFromAddress zeroPage_Temp0

	; 24 bit mode, preserving the external address
	+MBus20To32Bit1_WriteMode_A
	+MBus20To32Bit1_SetLatch7_A
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone
}

	rts


.horizonXOffset
	+MLittleEndian24Bit 0
.horizonXOffsetSpeed
	+MLittleEndian24Bit 0
.horizonXOffsetWork
	+MLittleEndian24Bit 0


TotalAPU_Start

APUCode_Start
!pseudopc 0 {
frameStart0
	+MAPU
	+MAPU kAPU_Reset_ADDRB1

	; Get EBSEADDR values
	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1

	; Mode7 changes
	+MAPU_LoadDoWait
	+MAPU_LoadEADDRFromB1
!for .i , 6 * 3 {
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR
}

	; Get EBSEADDR values
	+MAPU kAPU_Load_EBS | kAPU_Load_EBS2
	+MAPU kAPU_Incr_ADDRB1

	; Load APULineScrolls
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_ADDRB2Load16

	; Top of screen
	+MAPU_LoadDoWait
	+MAPU_ProcessRasterWord

	; During the Runway update
	; ADDRB1 = APULineWaits
	; ADDRB2 = APULineScrolls

	; Runway
	; For <kBus24Bit_TileScreen_ScrollY16
	+MAPU kAPU_IDataRegLoad2
	+MAPU kAPU_Incr_ADDRB1
	; APURunwayLoop
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	; kAPUNumRunwayRows and 1
	+MAPU kAPU_IDataRegLoad3
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad4
	+MAPU kAPU_Incr_ADDRB1

	; APULineScrolls
	; Remaining lines
APURunwayLoop
	+MAPU_LoadDoWait

	; Restore EADDRLo
	+MAPU kAPU_Load_EADDRLo | kAPU_IDataSelectReg2
	+MAPU_ProcessWordB2

	+MAPU kAPU_IDataSelectReg3SubReg4 | kAPU_IDataRegLoad3
	+MAPU kAPU_IDataSelectReg3
	+MAPU kAPU_PCLoad16 | kAPU_SkipIfEQ | kAPU_IDataSelectReg3

	+MAPU kAPU_Reset_PC
	+MAPU
}

APUCode_Size = *-APUCode_Start

!if APUCode_Size > 8192 {
	!error "APUCode_Size too large"
}

APUData_Start
	!by kBus24Bit_Mode7Screen_EBBS

	; Next RHRV to wait for, the start of the VBlank
	+MAPU_EmitWait 0 , $f0
	+MLittleEndian16Bit kBus24Bit_Mode7Screen_Registers
APUData_Start_Mode7Registers
	; dx
	!by 0 , $1 , 0
	; dxy
	!by 0 , 0 , 0
	; dy
	!by 0 , $1 , 0
	; dyx
	!by 0 , 0 , 0
	; xpos
	!by 0 , 0 , 0
	; ypos
	!by 0 , 0 , 0

	; For line scrolls
	!by $01
	+MLittleEndian16Bit APULineScrolls - APUData_Start

	; Top of screen
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start - kMAPUEmitChangePaletteIndexHSyncAdjust , 12
	; And reset the low kBus24Bit_TileScreen_ScrollY16
	+MLittleEndian16Bit kBus24Bit_TileScreen_ScrollY16
	!word -1

	; Runway
	!by <kBus24Bit_TileScreen_ScrollY16
	!word APURunwayLoop / kAPU_InstructionSize
	!by kAPUNumRunwayRows
	!by 1

	; Remaining lines
APULineWaits
!for .i , kAPUNumRunwayRows {
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start , 14 + .i -1
}

APULineScrolls
!for .i , kAPUNumRunwayRows {
	!word -((.i-1)+15) + 0					; Selects row 0, the empty line
;	!word -((.i-1)+15) + 1					; Selects row 1, the one pixel line
;	!word -((.i-1)+15) + (.i & $f)			; Selects a pattern
;	!word -((.i-1)+15) + (.i & $f) + $40	; Selects a pattern
;	!word -((.i-1)+15) + (.i & $f) + $80	; Selects a pattern
}

APUData_End
APUData_Size = APUData_End - APUData_Start

!if APUData_Size > 8192 {
	!error "APUData_Size too large"
}

TotalAPU_Size = * - TotalAPU_Start

tempRunwayTab
; When high up
;!by $8e , $8e , $f , $f , $8f , $90 , $90 , $10 , $11 , $11 , $91 , $92 , $92 , $12 , $13 , $13 , $13 , $94 , $94 , $94 , $95 , $15 , $16 , $16 , $16 , $17 , $97 , $97 , $98 , $98 , $98 , $99 , $19 , $19 , $1a , $1a , $1a , $1b , $1b , $1b , $9c , $9c , $9d , $9d , $9d , $9e , $9e , $9e , $1f , $1f , $1f , $20 , $20 , $20 , $21 , $21 , $21 , $22 , $22 , $22 , $a3 , $a3 , $a4 , $a4 , $a4 , $a5 , $a5 , $a5 , $a6 , $a6 , $a6 , $a7 , $a7 , $a7 , $28 , $28 , $28 , $29 , $29 , $29 , $2a , $2a , $2b , $2b , $2b , $2c , $2c , $2c , $2d , $2d , $2d , $2e , $2e , $ae , $af , $af , $af , $b0 , $b0 , $b0 , $b1 , $b1 , $b2 , $b2 , $b2 , $b3 , $b3 , $b3 , $b4 , $b4 , $b4 , $b5 , $b5 , $b5 , $b6 , $b6 , $b6 , $b7 , $b7 , $b7 , $38 , $38 , $39 , $39 , $39 , $3a , $3a , $3a , $3b , $3b , $3b , $3c , $3c , $3c , $3d , $3d , $3d , $3e , $3e , $3e , $3f , $3f , $40 , $40 , $40 , $41 , $41 , $41 , $42 , $42 , $42 , $43 , $43 , $43 , $44 , $44 , $44 , $45 , $45 , $45 , $c6 , $c6 , $c7 , $c7 , $c7 , $c8 , $c8 , $c8 , $c9 , $c9 , $c9 , $ca , $ca , $ca , $cb , $cb , $cb , $cc , $cc , $cc , $cd , $cd , $ce , $ce , $ce , $cf , $cf , $cf , $d0 , $d0 , $d0 , $d1 , $d1 , $d1 , $d2 , $d2 , $d2 , $d3 , $d3 , $d3 , $d4 , $d4 , $d5 , $d5 , $d5 , $d6 , $d6 , $d6 , $d7 , $d7 , $d7 , $d8 , $d8 , $d8 , $d9 , $d9
; When low down
;!by $8e , $f , $90 , $10 , $11 , $92 , $12 , $13 , $94 , $94 , $15 , $16 , $17 , $97 , $98 , $99 , $19 , $1a , $1b , $1b , $9c , $9d , $9e , $9e , $1f , $20 , $20 , $21 , $22 , $22 , $a3 , $a4 , $a5 , $a5 , $a6 , $a7 , $a7 , $28 , $29 , $29 , $2a , $2b , $2c , $2c , $2d , $2e , $ae , $af , $b0 , $b0 , $b1 , $b2 , $b3 , $b3 , $b4 , $b5 , $b5 , $b6 , $b7 , $b7 , $38 , $39 , $3a , $3a , $3b , $3c , $3c , $3d , $3e , $3e , $3f , $40 , $41 , $41 , $42 , $43 , $43 , $44 , $45 , $45 , $c6 , $c7 , $c8 , $c8 , $c9 , $ca , $ca , $cb , $cc , $cc , $cd , $ce , $cf , $cf , $d0 , $d1 , $d1 , $d2 , $d3 , $d3 , $d4 , $d5 , $d6 , $d6 , $d7 , $d8 , $d8 , $d9 , $da , $da , $db , $dc , $dd , $5d , $5e , $5f , $5f , $60 , $61 , $61 , $62 , $63 , $64 , $64 , $65 , $66 , $66 , $67 , $68 , $68 , $69 , $6a , $6b , $6b , $6c , $6d , $6d , $6e , $6f , $6f , $70 , $71 , $72 , $72 , $73 , $74 , $74 , $75 , $76 , $76 , $77 , $78 , $79 , $79 , $7a , $7b , $7b , $7c , $7d , $7d , $7e , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f , $7f
tempRunwayTabNum = * - tempRunwayTab


SetupAPU
	; Test for maths involved in processing the runway tables
!if 0 {
	+MWordValueToAddress_A -(15) , zeroPage_Temp0
	+MWordValueToAddress_A APULineScrolls , zeroPage_Temp2
	ldx #0
.ccl1
	lda zeroPage_Temp0
	clc
	adc tempRunwayTab,x
	ldy #0
	sta (zeroPage_Temp2),y
	lda zeroPage_Temp1
	adc #0
	iny
	sta (zeroPage_Temp2),y
	+MSubU8FromAddr16 1 , zeroPage_Temp0 , zeroPage_Temp1
	+MAddU8ToAddr16 2 , zeroPage_Temp2 , zeroPage_Temp3
	inx
	cpx #tempRunwayTabNum
	beq .ccl1o
	cpx #kAPUNumRunwayRows
	bne .ccl1
.ccl1o
}

	jsr APU_SetAddressAPUInstructions
	+MWordValueTo_AX APUCode_Start
	ldy #<APUCode_Size
	jsr Bus24Bit_CopySmallData
!if >APUCode_Size > 0 {
	ldx #>APUCode_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	jsr APU_SetAddressAPUData
	+MWordValueTo_AX APUData_Start
	ldy #<APUData_Size
	jsr Bus24Bit_CopySmallData
!if >APUData_Size > 0 {
	ldx #>APUData_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	rts
