;main test code
kBus24Bit_VideoLayer_HasOverscan=1
; Enable this to send graphics data from code, however this only works if the data is small :)
;IncludeGraphicsData = 1
;IncludeGraphicsData_L1 = 1
;IncludeGraphicsData_L2 = 1
;IncludeGraphicsData_L3 = 1
;IncludeGraphicsData_L4 = 1

kMaxGameSprites = 46
EnableMultiplexing = 1
;EnableMultiplexingDebug = 1

!source "stdlib/stdlib.a"
!source "stdlib/PETSCII.a"
!source "stdlib/Comparisons.a"
!source "BombJack/stdlib/Bus24Bit_Macros.a"
!source "BombJack/stdlib/Video_Macros.a"
!source "BombJack/stdlib/APU_Macros.a"

!to "bin/main.prg", cbm
!sal
!sl "tmp/main.map"
!svl "tmp/main.lbl"
!pdb "tmp/main.pdb"
!cpu 6510
!ct pet

zeroPage_Temp0	= $2
zeroPage_Temp1	= $3
zeroPage_Temp2	= $4
zeroPage_Temp3	= $5
zeroPage_Temp4	= $6
zeroPage_Temp5	= $7
!ifdef EnableMultiplexing {
GameSpriteRow = $8
}



!zn
*=$200
start
	sei
	jmp mainLoop
	
!source "tmp/FingerPrint.a"
!source "stdlib/LongBranches.a"
!source "BombJack/stdlib/Bus24Bit.a"
!source "BombJack/stdlib/Video.a"
!source "BombJack/stdlib/HardwareTest.a"

Initialise_NoPreserveStack = 1
Initialise_NoIRQServiceRoutine = 1
Initialise_NoMACROWaitForTheLastScan = 1
!source "stdlib/Initialise.a"

!macro MAllocateAnimPos .type , .x , .y {
	ldy #.type
	jsr AnimationEngine_Allocate
	lda #<.x
	sta AnimationEngine_posX,x
	lda #>.x
	sta AnimationEngine_posXHi,x
	lda #255-.y
	sta AnimationEngine_posY,x
}

!zn
mainLoop
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine

!ifdef IncludeGraphicsData {
;	jsr HardwareTest_VideoPattern0
;	+WaitForFire_A
}

	jsr Bus24Bit_Init

	jsr APU_ResetDisable
	jsr Video_DisableDisplay
;	jsr DisplayData
	jsr Video_InitDisplaySpritesScrollsBackground

	jsr Video_SetAddressVideoOverscanExtentRegisters
	lda #kBus24Bit_VideoLayer_OverscanExtent_Wide
;	lda #$0f
	sta CIA2PortBRS232


	lda #kVideo_EnableDisplay_Enable
	jsr Video_EnableDisplay
	jsr Video_SetAddressVideoPriorityRegister
	+MBus24Bit_VideoLayer_EmitPriority_NearToFar_A kBus24Bit_VideoLayer_Priority_Background , kBus24Bit_VideoLayer_Priority_Sprites , kBus24Bit_VideoLayer_Priority_Tiles , kBus24Bit_VideoLayer_Priority_Chars
	jsr Video_SetAddressTileBackgroundRegister
	lda #255
	sta CIA2PortBRS232

!ifdef EnableMultiplexing {
	jsr SetupAPU
	jsr APU_Enable
}
	jsr DisplayData

	jsr AnimationEngine_Init

	+MAllocateAnimPos kAnimationType_red1 , 160 , 120
	+MAllocateAnimPos kAnimationType_walker1 , 90 , 90
	+MAllocateAnimPos kAnimationType_rotate1 , 200 , 70
!ifdef EnableMultiplexing {
	+MAllocateAnimPos kAnimationType_boss1 , 130 , 243
	+MAllocateAnimPos kAnimationType_bullet1 , 60 , 60
	+MAllocateAnimPos kAnimationType_red1 , 230 , 120
;	+MAllocateAnimPos kAnimationType_walker1 , 260 , 60
} else {
	+MAllocateAnimPos kAnimationType_boss1 , 130 , 253
}

;	+MAllocateAnimPos kAnimationType_cammy_idle1 , 160 , 120

	jsr Video_WaitVBlank

.l1
	; Simple scroll demo with RType data
	jsr Video_WaitVBlank
	jsr Video_StartRasterTimers
	inc VIC2BorderColour

!ifdef EnableMultiplexing {
	jsr MultiplexSwapBanks
}

	jsr Video_SetAddressCharScrollRegisters
	lda .chars
	sta CIA2PortBRS232
	lda .chars+1
	sta CIA2PortBRS232
	jsr Video_SetAddressTileScrollRegisters
	lda .tiles
	sta CIA2PortBRS232
	lda .tiles+1
	sta CIA2PortBRS232

!if 1 {
	lda .paletteUpdated
	+lbeq .skipPaletteUpdate
	lda #0
	sta .paletteUpdated
	; Optimal data copy of new faded palette data
	lda #kBus24Bit_VideoLayer_EBBS
	+MWordValueTo_XY kBus24Bit_VideoLayer_Palette
	jsr Bus24Bit_SetAddressBus
	; Just the tiles palettes
!for .dc , 5*16*2 {
	lda PaletteNew + .dc -1
	sta CIA2PortBRS232
}
.skipPaletteUpdate
}

	; When not using multiplexing the CPU copies the sprites. When multiplexing the APU copies the sprite data at various points down the screen.
!ifndef EnableMultiplexing {
	jsr copySprites
}

!ifdef EnableMultiplexingDebug {
	lda GameSpriteSplitPosRaster
	beq .noSplitPos2
	+MBus24Bit_SetAddress_AXY kBus24Bit_Sprites_EBBS , kBus24Bit_Sprites + (23 * 4)
	+MBus24Bit_Send8BitValue 0
	+MBus24Bit_Send8BitValue 7
	lda GameSpriteSplitPosRaster
	+MBus24Bit_Send8BitValueFromA
	+MBus24Bit_Send8BitValue 255
.noSplitPos2
}

	jsr MoveGameObjects
	jsr AnimationEngine_Update
	jsr AnimationEngine_RenderSprites

!ifdef EnableMultiplexing {
	jsr GapFind_Init
	jsr MultiplexCalculation
}

	inc .smc1+1
.smc1	lda #0
	and #1
	bne .oc1
	inc .chars
	bne .oc1
	inc .chars+1
.oc1
	inc .tiles
	bne .oc2
	inc .tiles+1
.oc2

!if 1 {
	; Calculate faded palette data
	ldx #5*16*2 ; For this many entries

	inc .paletteShift
	lda .paletteShift
	lsr
	lsr
	and #$3f
	tay
	lda .fadeBounceTab,y
	cmp .lastFadeUsed
	beq .palEnd	; Cache check
	sta .lastFadeUsed
	inc .paletteUpdated
	cmp #0
	bne .someValue

	lda #0
.spl2
	sta PaletteNew - 1,x
	dex
	bne .spl2
	jmp .palEnd

.someValue
	cmp #15
	bne .doFade

.spl3
	lda GamePalette - 1,x
	sta PaletteNew - 1,x
	dex
	bne .spl3
	jmp .palEnd

.doFade
	clc
	adc #(>.shiftedPalettes) - 1	; -1 since the table doesn't have a zero entry
	sta .smpl1+2

.spl1
	ldy GamePalette - 1,x
.smpl1 lda .shiftedPalettes,y
	sta PaletteNew - 1,x
	dex
	bne .spl1
.palEnd
}

	jmp .l1

.yposIndex !by 0
.bestMultiplexPos !by 0
.chars !by 0,0
.tiles !by 0,0
!if 1 {
.paletteUpdated !by 0
.lastFadeUsed !by -1
.fadeBounceTab
	!by 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15
	!fill 32 , 15
	!by 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0
.paletteShift	!by 0
!align 255 , 0
.shiftedPalettes
!for .shift , 14 {
!for .palette , 256 {
!set .rpalette = .palette - 1
	!set .r = .rpalette & 0x0f
	!set .g = (.rpalette >> 4) & 0x0f
	!set .r = (.shift * .r) / 15;
	!set .g = (.shift * .g) / 15;
	!by .r | (.g << 4)
}
}
}

.waitVBlankSetPalAddress
	jsr Video_WaitVBlank
	jsr Video_StartRasterTimers
	inc VIC2BorderColour
.setPalAddress
	lda #kBus24Bit_VideoLayer_EBBS
	+MWordValueTo_XY kBus24Bit_VideoLayer_Palette + (255*2)
	jmp Bus24Bit_SetAddressBus


!zn
MoveGameObjects
	; Later on in the frame, which is effectively *next* frame now
	inc AnimationEngine_posY + kAnimationEngine_maxSlots-1
	inc AnimationEngine_posX + kAnimationEngine_maxSlots-1
	bne .ol1
	inc AnimationEngine_posXHi + kAnimationEngine_maxSlots-1
.ol1

	inc AnimationEngine_posX + kAnimationEngine_maxSlots-4
	bne .ol2
	inc AnimationEngine_posXHi + kAnimationEngine_maxSlots-4
.ol2
	inc AnimationEngine_posX + kAnimationEngine_maxSlots-4
	bne .ol3
	inc AnimationEngine_posXHi + kAnimationEngine_maxSlots-4
.ol3
	rts


!zn
FillMemory
	ldx #8*4
	ldy #0
.fl1
	sta CIA2PortBRS232
	dey
	bne .fl1
	dex
	bne .fl1
	rts

!if 0 {
GamePalette
!for .i , 256 {
!set .ii = .i - 1
	+MBus24Bit_MakePaletteRGB .ii * 16 , (255 - .ii) * 16 , .ii / 4
}
}

RNXPCompressionDecompress_WriteBytesmAddr = zeroPage_Temp0
!source "asm/DecompressRLECommon.a"

!macro SpriteOutput .x , .y , .s0 {
	ldx #.x
	ldy #<(-.y)
	jsr .s0
}


DisplayData
	lda #kBus24Bit_VideoLayer_EBBS
	+MWordValueTo_XY kBus24Bit_VideoLayer_Palette
	jsr Bus24Bit_SetAddressBus
	+MWordValueTo_AX GamePalette
	ldy #0
	jsr Bus24Bit_FastCopySmallData
	jsr Bus24Bit_FastCopySmallDataAgain
	inc VIC2BorderColour


	+MBus24Bit_SetAddress_AXY 1 , $a000
	jsr Video_clearByte
	; Scrolls
	jsr Video_clearFourBytes

!ifdef IncludeGraphicsData {
!ifdef IncludeGraphicsData_L1 {
	+MRLEScreenDataToDefaultCharScreen .Chars_map , .Chars_map2
	+MRLEPlanesDataToDefaultCharScreen .Chars_plane0 , .Chars_plane1 , .Chars_plane2 , .Chars_plane3
}

!ifdef IncludeGraphicsData_L2 {
	+MDecompressRLEToEBBSAddr .Chars2_map , $04 , $4000
	+MDecompressRLEToEBBSAddr .Chars2_map2 , $04 , $8000
	+MDecompressRLEToEBBSAddr .Chars2_plane0 , $08 , kBus24Bit_CharScreenPlanes_0
	+MDecompressRLEToEBBSAddr .Chars2_plane1 , $08 , kBus24Bit_CharScreenPlanes_1
	+MDecompressRLEToEBBSAddr .Chars2_plane2 , $08 , kBus24Bit_CharScreenPlanes_2
	+MDecompressRLEToEBBSAddr .Chars2_plane3 , $08 , kBus24Bit_CharScreenPlanes_3
}

!ifdef IncludeGraphicsData_L3 {
	+MRLEScreenDataToDefaultTileScreen .Tiles_map
	+MRLEPlanesDataToDefaultTileScreen .Tiles_plane0 , .Tiles_plane1 , .Tiles_plane2 , .Tiles_plane3
}

!ifdef IncludeGraphicsData_L4 {
	+MRLEPlanesDataToDefaultSprite .Sprites_plane0 , .Sprites_plane1 , .Sprites_plane2 , .Sprites_plane3
}
}

	rts

GamePalette
	!bin "tmp/Demo7PaletteData.bin"
	!fill 512 , 0

PaletteNew
	!fill 512 , 0

!ifdef IncludeGraphicsData {
!ifdef IncludeGraphicsData_L1 {
.Chars_map
	!bin "tmp/Demo7Chars_map.cmp"
.Chars_map2
	!bin "tmp/Demo7Chars_map.cmp2"
.Chars_plane0
	!bin "tmp/Demo7Chars_plane0.cmp"
.Chars_plane1
	!bin "tmp/Demo7Chars_plane1.cmp"
.Chars_plane2
	!bin "tmp/Demo7Chars_plane2.cmp"
.Chars_plane3
	!bin "tmp/Demo7Chars_plane3.cmp"
}

!ifdef IncludeGraphicsData_L2 {
.Chars2_map
	!bin "tmp/Demo7Chars2_map.cmp"
.Chars2_map2
	!bin "tmp/Demo7Chars2_map.cmp2"
.Chars2_plane0
	!bin "tmp/Demo7Chars2_plane0.cmp"
.Chars2_plane1
	!bin "tmp/Demo7Chars2_plane1.cmp"
.Chars2_plane2
	!bin "tmp/Demo7Chars2_plane2.cmp"
.Chars2_plane3
	!bin "tmp/Demo7Chars2_plane3.cmp"
}

!ifdef IncludeGraphicsData_L3 {
.Tiles_map
	!bin "tmp/Demo7Tiles_map.cmp"
.Tiles_plane0
	!bin "tmp/Demo7Tiles_plane0.cmp"
.Tiles_plane1
	!bin "tmp/Demo7Tiles_plane1.cmp"
.Tiles_plane2
	!bin "tmp/Demo7Tiles_plane2.cmp"
.Tiles_plane3
	!bin "tmp/Demo7Tiles_plane3.cmp"
}

!ifdef IncludeGraphicsData_L4 {
.Sprites_plane0
	!bin "tmp/Demo7Sprites_plane0.cmp"
.Sprites_plane1
	!bin "tmp/Demo7Sprites_plane1.cmp"
.Sprites_plane2
	!bin "tmp/Demo7Sprites_plane2.cmp"
.Sprites_plane3
	!bin "tmp/Demo7Sprites_plane3.cmp"
}
}


!source "asm/StackedSprites.a"

!source "tmp/Demo7SpritesSheet.txt.a"

!source "asm\AnimationEngine.a"


!zn
AnimationType_tableLoHi
	+MAnimationType_Create ~kAnimationType_red1			, AnimationFrames_red1
	+MAnimationType_Create ~kAnimationType_bullet1		, AnimationFrames_bullet1
	+MAnimationType_Create ~kAnimationType_walker1		, AnimationFrames_walker1
	+MAnimationType_Create ~kAnimationType_rotate1		, AnimationFrames_rotate1
	+MAnimationType_Create ~kAnimationType_boss1		, AnimationFrames_boss1
;	+MAnimationType_Create ~kAnimationType_cammy_idle1			, AnimationFrames_cammy_idle1

AnimationFrames_red1
	+MAnimationFrame_DisplaySpeed		EmitSpriteFrameredframe1 , 4
	+MAnimationFrame_DisplaySpeed		EmitSpriteFrameredframe2 , 4
	+MAnimationFrame_DisplaySpeed		EmitSpriteFrameredframe3 , 4
	+MAnimationFrame_DisplaySpeed		EmitSpriteFrameredframe4 , 4
	+MAnimationFrame_DisplaySpeed		EmitSpriteFrameredframe5 , 4
	+MAnimationFrame_DisplaySpeedGoto	EmitSpriteFrameredframe6 , 4 , AnimationFrames_red1

AnimationFrames_bullet1
	+MAnimationFrame_DisplayStop	EmitSpriteFramebullet1

AnimationFrames_walker1
	+MAnimationFrame_DisplaySpeed		EmitSpriteFramewalker1 , 6
	+MAnimationFrame_DisplaySpeed		EmitSpriteFramewalker2 , 6
	+MAnimationFrame_DisplaySpeedGoto	EmitSpriteFramewalker3 , 6 , AnimationFrames_walker1

AnimationFrames_rotate1
	+MAnimationFrame_DisplaySpeed		EmitSpriteFramerotate1 , 10
	+MAnimationFrame_DisplaySpeed		EmitSpriteFramerotate2 , 10
	+MAnimationFrame_DisplaySpeedGoto	EmitSpriteFramerotate3 , 10 , AnimationFrames_rotate1

AnimationFrames_boss1
	+MAnimationFrame_DisplaySpeed	EmitSpriteFrameboss1 , 10
	+MAnimationFrame_DisplaySpeed	EmitSpriteFrameboss2 , 10
	+MAnimationFrame_DisplaySpeed	EmitSpriteFrameboss3 , 10
	+MAnimationFrame_DisplaySpeed	EmitSpriteFrameboss4 , 10
	+MAnimationFrame_DisplaySpeed	EmitSpriteFrameboss3 , 10
	+MAnimationFrame_DisplaySpeedGoto	EmitSpriteFrameboss2 , 10 , AnimationFrames_boss1

;AnimationFrames_cammy_idle1
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle1 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle2 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle3 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle4 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle5 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle6 , 5
;	+MAnimationFrame_DisplaySpeed	EmitSpriteFramecammy_idle7 , 5
;	+MAnimationFrame_DisplaySpeedGoto	EmitSpriteFramecammy_idle8 , 5,AnimationFrames_cammy_idle1

!source "BombJack/stdlib/APU.a"

!ifdef EnableMultiplexing {

!source "asm/GapFind.a"


TotalAPU_Start

!macro MAPUCopySprite {
	!for .i , 4 {
		+MAPU kAPU_ExternalMEWR
		+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR
	}
}

!macro MAPUTopAndBottomSplits {
	; Top and bottom splits
!for .i , 2 {
	; MPi: TODO: Add double buffered sprite data
	+MAPU_LoadDoWait

	; Disable sprites
	+MAPU_LoadEBSFromB1
	+MAPU_ProcessRasterByte

	; Get EBSEADDR values
	+MAPU_LoadEBSFromB1
	+MAPU_LoadEADDRFromB1

	; Only 23 sprites while multiplexing
!for .i , 23 {
	+MAPUCopySprite
}

	; Enable sprites
	+MAPU_LoadEBSFromB1
	+MAPU_ProcessRasterByte

} ;< !for .i , 2 { ; NOTE: Top and bottom parts

	+MAPU_LoadDoWait
}


APUCode_Start
!pseudopc 0 {
frameStart0
	+MAPU
	; Skip other frame ADDRB1
	+MAPU kAPU_Reset_ADDRB1
	+MAPU
	+MAPU kAPU_Incr_ADDRB1
	+MAPU
	+MAPU kAPU_Incr_ADDRB1
	+MAPU


	+MAPUTopAndBottomSplits
	+MAPU_TestAndJump

frameStart1
	+MAPU
	; Load other frame ADDRB1
	+MAPU kAPU_Reset_ADDRB1
	+MAPU
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU
	+MAPU kAPU_ADDRB1Load16
	+MAPU

	+MAPUTopAndBottomSplits
	+MAPU_TestAndJump

	+MAPU kAPU_Reset_PC
	+MAPU
}

APUCode_Size = *-APUCode_Start

!if APUCode_Size > 8192 {
	!error "APUCode_Size too large"
}



APUData_Start

	; First frame
!macro MAPUTopAndBottomSplitsData ~.topData , ~.bottomData , ~.bottomSplitPos {
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start , $08

	!by kBus24Bit_VideoLayer_EBBS
	+MLittleEndian16Bit kBus24Bit_VideoLayer_LayersEnable
!ifndef EnableMultiplexingDebug {
	!by kBus24Bit_VideoLayer_LayersEnable_234
} else {
	!by kBus24Bit_VideoLayer_LayersEnable_1
}

	!by kBus24Bit_Sprites_EBBS
	+MLittleEndian16Bit kBus24Bit_Sprites

.topData
	!fill 23 * 4 , 0

	!by kBus24Bit_VideoLayer_EBBS
	+MLittleEndian16Bit kBus24Bit_VideoLayer_LayersEnable
	!by kBus24Bit_VideoLayer_LayersEnable_Default

.bottomSplitPos = *+2
	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start , 128

	!by kBus24Bit_VideoLayer_EBBS
	+MLittleEndian16Bit kBus24Bit_VideoLayer_LayersEnable
!ifndef EnableMultiplexingDebug {
	!by kBus24Bit_VideoLayer_LayersEnable_234
} else {
	!by kBus24Bit_VideoLayer_LayersEnable_1
}

	!by kBus24Bit_Sprites_EBBS
	+MLittleEndian16Bit kBus24Bit_Sprites

.bottomData
	!fill 23 * 4 , 0
	
	!by kBus24Bit_VideoLayer_EBBS
	+MLittleEndian16Bit kBus24Bit_VideoLayer_LayersEnable
	!by kBus24Bit_VideoLayer_LayersEnable_Default

	+MAPU_EmitWait kBus24Bit_VideoLayer_XPos_HSYNC_start , $00
}

	; Other frame data pointer
	+MLittleEndian16Bit apuOtherFrameData - APUData_Start


	+MAPUTopAndBottomSplitsData ~StackedSpriteDataGEReal , ~StackedSpriteDataLTReal , ~StackedSpriteDataLTYPos

	+MAPU_EmitPC frameStart0
	; Frame ready when == 0
apuFrameReady1
	!by 1


apuOtherFrameData
	+MAPUTopAndBottomSplitsData ~StackedSpriteDataGEReal2 , ~StackedSpriteDataLTReal2 , ~StackedSpriteDataLTYPos2

	+MAPU_EmitPC frameStart1
	; Frame ready when == 0
apuFrameReady0
	!by 1

APUData_Size = * -APUData_Start

!if APUData_Size > 8192 {
	!error "APUData_Size too large"
}

TotalAPU_Size = * - TotalAPU_Start

SetupAPU
	jsr APU_SetAddressAPUInstructions
	+MWordValueTo_AX APUCode_Start
	ldy #<APUCode_Size
	jsr Bus24Bit_CopySmallData
!if >APUCode_Size > 0 {
	ldx #>APUCode_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	jsr APU_SetAddressAPUData
	+MWordValueTo_AX APUData_Start
	ldy #<APUData_Size
	jsr Bus24Bit_CopySmallData
!if >APUData_Size > 0 {
	ldx #>APUData_Size
	jsr Bus24Bit_CopySmallDataRepeatForX
}
	rts


!macro MSplitSpritesToAPU .direction {
	ldy #0
	ldx #0
.csl1
	lda StackedSpriteData+2,y
	cmp GameSpriteSplitPosRaster
!if .direction <= 0 {
	+IfURegLessThanVal .csl1o
} else {
	+IfURegGreaterThanOrEqualToVal .csl1o
}

	lda StackedSpriteData,y
	+MBus24Bit_Send8BitValueFromA
	lda StackedSpriteData+1,y
	+MBus24Bit_Send8BitValueFromA
	lda StackedSpriteData+2,y
	+MBus24Bit_Send8BitValueFromA
	lda StackedSpriteData+3,y
	+MBus24Bit_Send8BitValueFromA

	; Count sprites
	inx
	cpx #23
	+IfURegGreaterThanOrEqualToVal .csl2o

.csl1o
	iny
	iny
	iny
	iny
	cpy EmitSpriteFrame_count
	+IfURegLessThanVal .csl1
.csl2o
}


!zn
MultiplexCalculation
	; Check if we need to do any work at all
	lda EmitSpriteFrame_count
	cmp #23*4
	+IfURegLessThanVal .simpleUpdate
	jmp BeforePopulate

.simpleUpdate
	; Copy top sprites to APU
	+MAPU_SetDataUpdateBus StackedSpriteDataGEReal
	lda MultiplexBank
	bne .il1
	+MAPU_SetDataUpdateBus StackedSpriteDataGEReal2
.il1
	+MBus24Bit_FastSpeedCopy StackedSpriteData , 23 * 4

	; Just move the split off the bottom of the screen, don't bother updating anything else
	+MAPU_SetDataUpdateBus StackedSpriteDataLTYPos
	lda MultiplexBank
	bne .il2
	+MAPU_SetDataUpdateBus StackedSpriteDataLTYPos2
.il2
	+MBus24Bit_Send8BitValue $f0

	rts
	
BeforePopulate

	jsr PopulateSpriteRowTable

AfterPopulate

	jsr GapFind_Scan

	lda GameSpriteSplitPos
	+lbeq .simpleUpdate

	jsr CalculateMultiplexRasterPosition

	; Update tables to the APU based on split position

	; Top sprites update
	+MAPU_SetDataUpdateBus StackedSpriteDataGEReal
	lda MultiplexBank
	bne .il3
	+MAPU_SetDataUpdateBus StackedSpriteDataGEReal2
.il3
	+MSplitSpritesToAPU -1
	jsr SplitSpritesClearRemaining


	; Bottom sprites update
	+MAPU_SetDataUpdateBus StackedSpriteDataLTReal
	lda MultiplexBank
	bne .il4
	+MAPU_SetDataUpdateBus StackedSpriteDataLTReal2
.il4
	+MSplitSpritesToAPU 1
	jsr SplitSpritesClearRemaining


	jsr MultiplexSplitToAPU

AfterMultiplexCalc
	rts

!zn
PopulateSpriteRowTable
	; Populate sprite table for no sort multiplexing
	lda #0
	ldy #15
.cyl1
	sta GameSpriteRow,y
	dey
	bpl .cyl1

	; Update table with positions
	ldy #0
.cyl2
	; Top of the sprite
	lda StackedSpriteData+2,y
	beq .noSpriteHere1
	lsr
	lsr
	lsr
	lsr
	tax
	inc GameSpriteRow,x

	; And the bottom of the sprite
	lda StackedSpriteData+2,y
	sec
	sbc #15
	bcc .noSpriteHere1
	lsr
	lsr
	lsr
	lsr
	tax
	inc GameSpriteRow,x

.noSpriteHere1
	; Next
	iny
	iny
	iny
	iny

	cpy EmitSpriteFrame_count
	+IfURegLessThanVal .cyl2

	rts

!zn
CalculateMultiplexRasterPosition
	; Convert into screen position
	sta GameSpriteSplitPosRaster
	asl GameSpriteSplitPosRaster
	asl GameSpriteSplitPosRaster
	asl GameSpriteSplitPosRaster
	asl GameSpriteSplitPosRaster
	lda GameSpriteSplitPosRaster
	clc
	adc #15
	sta GameSpriteSplitPosRaster
	rts

!zn
SplitSpritesClearRemaining
	; Clear any remaining
	lda #0
.csl2
	cpx #23
	+IfURegGreaterThanOrEqualToVal .csl2o
	+MBus24Bit_Send8BitValueFromA
	+MBus24Bit_Send8BitValueFromA
	+MBus24Bit_Send8BitValueFromA
	+MBus24Bit_Send8BitValueFromA
	inx
	jmp .csl2
.csl2o
	rts

!zn
MultiplexSplitToAPU
	; Update APU split pos
	lda #255
	sec
	sbc GameSpriteSplitPosRaster
	; Don't triger the bottom wait too early...
	cmp #32
	bcs .ok1
	lda #32
.ok1
	; Adjust upwards a few lines to give mroe than enough time to switch to the new sprites
	sec
	sbc #12
	sta StackedSpriteDataLTYPos

	+MAPU_SetDataUpdateBus StackedSpriteDataLTYPos
	lda MultiplexBank
	bne .il1
	+MAPU_SetDataUpdateBus StackedSpriteDataLTYPos2
.il1
	+MBus24Bit_FastSpeedCopy StackedSpriteDataLTYPos , 1
	rts

!zn
; Exit:
; If MultiplexBank = 0 then display frame 0 and store data into frame 1
; If MultiplexBank = 1 then display frame 1 and store data into frame 0
MultiplexBank	!by 0
MultiplexSwapBanks
	inc MultiplexBank
	lda MultiplexBank
	and #1
	sta MultiplexBank
	bne .il1

	+MAPU_SetDataUpdateBus apuFrameReady1
	+MBus24Bit_Send8BitValue 1
	+MAPU_SetDataUpdateBus apuFrameReady0
	+MBus24Bit_Send8BitValue 0
	rts

.il1
	+MAPU_SetDataUpdateBus apuFrameReady0
	+MBus24Bit_Send8BitValue 1
	+MAPU_SetDataUpdateBus apuFrameReady1
	+MBus24Bit_Send8BitValue 0
	rts
}

+MCheckNotInIOKernal
