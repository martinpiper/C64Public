!zn
; Sprite emit macros, customised for this application allow the ImageToBitplane tool to output optimised sprite drawing
; Y = Preserved
EmitSpriteFrame_count	!by 0

!macro MEmitSpriteFrameOffsetXY .frame , .colour , .x , .y {
	lda AnimationEngine_posY,y
!if .y != 0 {
!if .y < 0 {
	clc
	adc #-.y
} else {
	sec
	sbc #.y
}
}
	sta StackedSpriteData+2,x

	lda AnimationEngine_flips,y
	sta .msbX+1

!if .x = 0 {
	lda AnimationEngine_posX,y
	sta StackedSpriteData+3,x
	lda AnimationEngine_posXHi,y
} else {
!if .x < 0 {
!ifdef kStackedSprites_supportFlipX {
	lda .msbX+1
	and #kAnimationEngine_flipX
	beq .noFlipX

	lda AnimationEngine_posX,y
	clc
	adc #-.x
	sta StackedSpriteData+3,x
	lda AnimationEngine_posXHi,y
	adc #0
	jmp .endXCalcMSB
}

.noFlipX
	lda AnimationEngine_posX,y
	sec
	sbc #-.x
	sta StackedSpriteData+3,x
	lda AnimationEngine_posXHi,y
	sbc #0
} else {
!ifdef kStackedSprites_supportFlipX {
	lda .msbX+1
	and #kAnimationEngine_flipX
	beq .noFlipX2

	lda AnimationEngine_posX,y
	sec
	sbc #.x
	sta StackedSpriteData+3,x
	lda AnimationEngine_posXHi,y
	sbc #0
	jmp .endXCalcMSB
}

.noFlipX2
	lda AnimationEngine_posX,y
	clc
	adc #.x
	sta StackedSpriteData+3,x
	lda AnimationEngine_posXHi,y
	adc #0
}
}
.endXCalcMSB
	and #1
	beq .noMSB
	lda .msbX+1
	ora #kBus24Bit_Sprites_MSBX
	sta .msbX+1
.noMSB
	lda #.frame
	sta StackedSpriteData,x
	lda #.colour
.msbX	ora #0
	sta StackedSpriteData+1,x
	inx
	inx
	inx
	inx
}

!macro MEmitSpriteFrameOffsetX .frame , .colour , .x {
	+MEmitSpriteFrameOffsetXY .frame , .colour , .x , 0
}

!macro MEmitSpriteFrameOffsetY .frame , .colour , .y {
	+MEmitSpriteFrameOffsetXY .frame , .colour , 0 , .y
}

!macro MEmitSpriteFrame .frame, .colour {
	+MEmitSpriteFrameOffsetXY .frame , .colour , 0 , 0
}

!macro MEmitSpriteFrame_Preserve {
}
!macro MEmitSpriteFrame_RestoreExit {
	rts
}

!macro MAnimationType_Create ~.kAnimationTypeEnum , .address {
	.kAnimationTypeEnum = * - AnimationType_tableLoHi
	!by <.address , >.address
}

!macro MAnimationType_End {
	!by 0
}

!ifndef copySprites_defined {
!zn
copySprites
	jsr Video_SetAddressSprites
!for .i , kBus24Bit_SpritesMaxNum * 4 {
	lda StackedSpriteData + .i - 1
	sta CIA2PortBRS232
}
	rts

StackedSpriteData
	; To handle more than kBus24Bit_SpritesMaxNum
	!fill 256 , 0
}
