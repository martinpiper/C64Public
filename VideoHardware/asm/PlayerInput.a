!ifdef Mode7LayersEnable {
	Mode7Layer0Speed = $280
} else {
	Mode7Layer0Speed = $200
}
!ifdef Mode7LayersEnable {
PlayerLayerXPos !by 0,0,0
PlayerLayerYPos !by 0,0,0

PlayerBaseScale !by $20
}

!zn

AllocatePlayer
	; Allocate and remember the player index
	ldy #kAnimationType_playerRunLeft
	jsr AnimationEngine_Allocate
	lda #160
	sta AnimationEngine_posX,x
	lda #0
	sta AnimationEngine_posXHi,x
	lda #120
	sta AnimationEngine_posY,x
	lda #kAnimationEngine_flipX
	sta AnimationEngine_flips,x
	stx playerAnimationIndex
	rts

; For wrap around screen position testing, these numbers may look a bit odd, but they are the result of a wide sprite scan line
kScreenSpriteOffScreen_right	= $148
kScreenSpriteOffScreen_left		= $1f8

!macro MoveAnimationsForBy .animationPos , .animationPosHi , .by {
	; Update position for all other sprites except the player
	ldx #kAnimationEngine_maxSlots-1
.l1
	cpx playerAnimationIndex
	beq .nl1
	lda AnimationEngine_frameHi,x
	beq .nl1

	lda .animationPos,x
!if .by < 0 {
	sec
	sbc #1

	!if .animationPos = AnimationEngine_posY {
		bcc .deleteIt
	}

} else {
	clc
	adc #1

	!if .animationPos = AnimationEngine_posY {
		bcs .deleteIt
	}
}
.il1
	sta .animationPos,x
!if .animationPosHi != 0 {
!if .by < 0 {
	bcs .noHi
	dec .animationPosHi,x
.noHi
} else {
	bcc .noHi
	inc .animationPosHi,x
.noHi
}
}

!if .by < 0 {
	!if .animationPos = AnimationEngine_posX {
		lda .animationPosHi,x
		and #1
		cmp #>kScreenSpriteOffScreen_left
		bne .nl1
		lda .animationPos,x
		cmp #<kScreenSpriteOffScreen_left
		bne .nl1
	} else {
		jmp .nl1
	}
} else {
	!if .animationPos = AnimationEngine_posX {
		lda .animationPosHi,x
		and #1
		cmp #>kScreenSpriteOffScreen_right
		bne .nl1
		lda .animationPos,x
		cmp #<kScreenSpriteOffScreen_right
		bne .nl1
	} else {
		jmp .nl1
	}
}

.deleteIt
	lda #0
	sta AnimationEngine_frameHi,x
	sta AnimationEngine_framesPositionHi,x

.nl1
	dex
	bpl .l1
}

!macro TilesCloudsDec .val , .mode7 , .tiles {
	lda .mode7+0
	sec
	sbc #<.val
	sta .mode7+0
	lda .mode7+1
	sbc #>.val
	sta .mode7+1
	lda .mode7+2
	sbc #0
	sta .mode7+2

	dec .tiles
	lda .tiles
	cmp #$ff
	bne .o1
	dec .tiles+1
.o1
}

!macro TilesCloudsInc .val , .mode7 , .tiles {
	lda .mode7
	clc
	adc #<.val
	sta .mode7
	lda .mode7+1
	adc #>.val
	sta .mode7+1
	lda .mode7+2
	adc #0
	sta .mode7+2

	inc .tiles
	bne .o1
	inc .tiles+1
.o1
}

!macro CloudsDec .val , .mode7 {
	lda .mode7+0
	sec
	sbc #<.val
	sta .mode7+0
	lda .mode7+1
	sbc #>.val
	sta .mode7+1
	lda .mode7+2
	sbc #0
	sta .mode7+2
}

!macro CloudsInc .val , .mode7 {
	lda .mode7
	clc
	adc #<.val
	sta .mode7
	lda .mode7+1
	adc #>.val
	sta .mode7+1
	lda .mode7+2
	adc #0
	sta .mode7+2
}

!zn
playerAnimationIndex !by 0
HandleJoystick

!ifdef Mode7LayersEnable {
	lda #JoystickBits_Fire
	bit CIA1KeyboardColumnJoystickA
	beq .isFire
	jmp .notFire
.isFire

	lda #JoystickBits_Up
	bit CIA1KeyboardColumnJoystickA
	beq .isUpFire
	jmp .notUpFire
.isUpFire
	dec PlayerBaseScale
	jmp .notDown

.notUpFire
	lda #JoystickBits_Down
	bit CIA1KeyboardColumnJoystickA
	beq .isDownFire
	jmp .notDownFire
.isDownFire
	inc PlayerBaseScale

	; Skip the up/down movement
	jmp .notDown
.notDownFire
.notFire
}

	lda #JoystickBits_Up
	bit CIA1KeyboardColumnJoystickA
	beq .isUp
	jmp .notUp
.isUp

	+MoveAnimationsForBy AnimationEngine_posY , 0 , -1

	ldx playerAnimationIndex
	ldy #kAnimationType_playerRunUp
	jsr AnimationEngine_MutateToTypeIfDifferent

!ifdef Mode7LayersEnable {
	+CloudsDec Mode7Layer0Speed , PlayerLayerYPos
} else {
	+TilesCloudsDec Mode7Layer0Speed , Mode7Regs0_ypos , TileScreen_ypos
}

.notUp

	lda #JoystickBits_Down
	bit CIA1KeyboardColumnJoystickA
	beq .isDown
	jmp .notDown
.isDown

	+MoveAnimationsForBy AnimationEngine_posY , 0 , 1

	ldx playerAnimationIndex
	ldy #kAnimationType_playerRunDown
	jsr AnimationEngine_MutateToTypeIfDifferent

!ifdef Mode7LayersEnable {
	+CloudsInc Mode7Layer0Speed , PlayerLayerYPos
} else {
	+TilesCloudsInc Mode7Layer0Speed , Mode7Regs0_ypos , TileScreen_ypos
}

.notDown

	lda #JoystickBits_Left
	bit CIA1KeyboardColumnJoystickA
	beq .isLeft
	jmp .notLeft
.isLeft

	+MoveAnimationsForBy AnimationEngine_posX , AnimationEngine_posXHi , 1

	ldx playerAnimationIndex
	ldy #kAnimationType_playerRunLeft
	jsr AnimationEngine_MutateToTypeIfDifferent
	lda #0
	sta AnimationEngine_flips,x

!ifdef Mode7LayersEnable {
	+CloudsDec Mode7Layer0Speed , PlayerLayerXPos
} else {
	+TilesCloudsDec Mode7Layer0Speed , Mode7Regs0_xpos , TileScreen_xpos
}

.notLeft

	lda #JoystickBits_Right
	bit CIA1KeyboardColumnJoystickA
	beq .isRight
	jmp .notRight
.isRight

	+MoveAnimationsForBy AnimationEngine_posX , AnimationEngine_posXHi , -1

	ldx playerAnimationIndex
	ldy #kAnimationType_playerRunLeft
	jsr AnimationEngine_MutateToTypeIfDifferent
	lda #kAnimationEngine_flipX
	sta AnimationEngine_flips,x

!ifdef Mode7LayersEnable {
	+CloudsInc Mode7Layer0Speed , PlayerLayerXPos
} else {
	+TilesCloudsInc Mode7Layer0Speed , Mode7Regs0_xpos , TileScreen_xpos
}
.notRight

!macro ScaleInYPrepare .regs {
	lda LayerScaleLo,y
	sta .regs + 0
	lda LayerScaleHi,y
	sta .regs + 1

	lda LayerScaleLo,y
	sta .regs + 6
	lda LayerScaleHi,y
	sta .regs + 7

	lda LayerScaleOffsetX0,y
	sta .regs + 12
	lda LayerScaleOffsetX1,y
	sta .regs + 13
	lda LayerScaleOffsetX2,y
	sta .regs + 14

	lda LayerScaleOffsetY0,y
	sta .regs + 15
	lda LayerScaleOffsetY1,y
	sta .regs + 16
	lda LayerScaleOffsetY2,y
	sta .regs + 17
}
!ifdef Mode7LayersEnable {
	ldy PlayerBaseScale
	+ScaleInYPrepare Mode7Regs1
	+MAdd24To24ToOut PlayerLayerXPos , Mode7Regs1 + 12 , Mode7Regs1 + 12
	+MAdd24To24ToOut PlayerLayerYPos , Mode7Regs1 + 15 , Mode7Regs1 + 15

	lda PlayerBaseScale
	clc
	adc #$20
	tay
	+ScaleInYPrepare Mode7Regs0
	+MAdd24To24ToOut PlayerLayerXPos , Mode7Regs0 + 12 , Mode7Regs0 + 12
	+MAdd24To24ToOut PlayerLayerYPos , Mode7Regs0 + 15 , Mode7Regs0 + 15

	lda PlayerBaseScale
	clc
	adc #$40
	tay
	+ScaleInYPrepare Mode7Regs2
	+MAdd24To24ToOut PlayerLayerXPos , Mode7Regs2 + 12 , Mode7Regs2 + 12
	+MAdd24To24ToOut PlayerLayerYPos , Mode7Regs2 + 15 , Mode7Regs2 + 15
}

	rts
