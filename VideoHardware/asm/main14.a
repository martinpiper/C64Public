!source "main14Options.a"

!to "bin/main.prg", cbm
!sal
!sl "tmp/main.map"
!svl "tmp/main.lbl"
!pdb "tmp/main.pdb"
!cpu 6510
!ct pet

!source "stdlib/stdlib.a"
!source "stdlib/Comparisons.a"
!source "stdlib/PETSCII.a"
!source "stdlib/LongBranches.a"

!source "BombJack/stdlib/Bus24Bit_Macros.a"
!source "BombJack/stdlib/Bus20To32Bit1_Macros.a"
!source "BombJack/stdlib/Video_Macros.a"
!source "BombJack/stdlib/APU_Macros.a"

!source "tmp\Demo14AddFile_Title.a"
!source "tmp\Demo14AddFile_Game.a"
!source "tmp\Demo14AddFile_MissionComplete.a"

!source "AfterBurner/LandscapeDefs.a"
!source "AfterBurner/SpriteMacros.a"
!source "AfterBurner/SampleMacros.a"


!zn
*=$200
start
	+MStopInitStack_X
	jmp mainLoop

!source "tmp/FingerPrint.a"
!source "BombJack/stdlib/APU.a"

Initialise_NoPreserveStack = 1
Initialise_NoIRQServiceRoutine = 1
Initialise_NoMACROWaitForTheLastScan = 1
!source "stdlib/Initialise.a"

* = SCREENRAM
messageMW
!scr "MegaWang 2000 Turbo Edition             After Burner : Checking for external RAM..."
messageMWEnd
messageMWGameData
!scr "Game data..."
messageMWGameDataEnd
messageMWRAMOK
!scr "RAM OK "
debugDMA
!scr "----------------              "
messageMWRAMOKEnd
messageMWRAMError
!scr "RAM BLOCK ERROR: "
messageMWRAMErrorBlock
!scr "------"
messageMWRAMErrorEnd

!source "BombJack/stdlib/Audio.a"
!source "BombJack/stdlib/Video.a"
!source "BombJack/stdlib/HardwareTest.a"
!source "asm/ExternalMemory.a"

!source "tmp\Demo14FileResources_ForHW1_Checksums.a"
!source "tmp\Demo14FinalData_Checksums.a"
checksumsSize = ForHW1_checksumsSize
checksumsBlockSize = ForHW1_checksumsBlockSize


GameExpectedIdentifier
	; ASCII: MW2000-AfterBurner
	!by $4D , $57 , $32 , $30 , $30 , $30 , $2D , $41 , $66 , $74 , $65 , $72 , $42 , $75 , $72 , $6E , $65 , $72
GameExpectedIdentifierLen = * - GameExpectedIdentifier

!zn
mainLoop
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	jsr ExternalMemory_C64DisplayStartupMessage

	jsr Bus24Bit_Init
	jsr Bus20To32Bit1_Init
	jsr APU_ResetDisableClear
	jsr Video_DisableDisplay

	jsr Audio_Init
!ifdef SendResourceData {
	jsr HardwareTest_VideoPattern0
}


!if 0 {
	; Test disabling some parts of the display
	; Note this only attempts to disable the output of the layers, it does not affect layer combination tests. So if a layer is disconnected it will be detected as outputing $fff and this is not transparent.
	jsr Video_DisableDisplay
	jsr HardwareTest_VideoPattern0
	+WaitForFire_A
	+MBus24Bit_SetAddress_A kBus24Bit_Sprites4_EBBS , kBus24Bit_Sprites4_Controls
	+MBus24Bit_Send8BitValue %00
	+WaitForFire_A
	jsr Video_SetAddressVideoLayersEnable
	+MBus24Bit_Send8BitValue %0001
	+WaitForFire_A
	jsr Video_SetAddressVideoLayersEnable
	+MBus24Bit_Send8BitValue %0010
	+WaitForFire_A
	jsr Video_SetAddressVideoLayersEnable
	+MBus24Bit_Send8BitValue %0100
	+WaitForFire_A
	jsr Video_SetAddressVideoLayersEnable
	+MBus24Bit_Send8BitValue %1000
	+WaitForFire_A
}

!if 0 {
	; Test layer priority combination
	jsr Video_DisableDisplay
	jsr HardwareTest_VideoPattern0
	+WaitForFire_A
	jsr Video_SetAddressVideoPriorityRegister
	+MBus24Bit_Send8BitValue %00000000
	+WaitForFire_A
	jsr Video_SetAddressVideoPriorityRegister
	+MBus24Bit_Send8BitValue %01010101
	+WaitForFire_A
	jsr Video_SetAddressVideoPriorityRegister
	+MBus24Bit_Send8BitValue %10101010
	+WaitForFire_A
	jsr Video_SetAddressVideoPriorityRegister
	+MBus24Bit_Send8BitValue %11111111
	+WaitForFire_A
}

CheckForHWData
;+MBPH
	; ForHW chunks: Demo14FileResources_ForHW1.bin
	lda #ForHW1_checksumsCount
	ldx #<ForHW1_checksumsNumBytes
	jsr ExternalMemory_C64CheckMemorySetChecksumParams
	+MLongValueTo_AXY ForHW1_checksumsStart
	jsr ExternalMemory_C64CheckMemorySetChecksumAddress
!ifdef SendResourceData {
	jsr ExternalMemory_C64CheckMemory_JustChecksum ; All ForHW data there is no game ID
}

	; Disable the whole display and DMA
	; In simulation this stops destination RAM corruption
	jsr Bus20To32Bit1_Init
	jsr Video_DisableDisplay
	; These other "disable" options do not reliably stop corruption in simulation
;	+MBus24Bit_SetAddress_A kBus24Bit_Sprites4_EBBS , kBus24Bit_Sprites4_Controls
	; Flag not ready and disable logic
;	+MBus24Bit_Send8BitValue 0
	jsr Bus20To32Bit1_Init
;	jsr Video_SetAddressVideoLayersEnable
;	+MBus24Bit_Send8BitValue 0


!ifdef SendResourceData {
	+MLongValueTo_AXY EndDataMarker
	+MLongValueTo_AXY 0	; ForHW data chunks all begin at the start of memory
	jsr ExternalMemory_C64SendResourceData

;	+WaitForFire_A
}
	; Complete all chunks
	jsr Bus20To32Bit1_ShortReset

	lda #kVideo_EnableDisplay_Enable
	jsr Video_EnableDisplay

	lda #VIC2Colour_White
	ldx #(messageMWGameDataEnd - messageMWGameData)-1
.cl1
	sta COLOURRAM + (messageMWGameData & 0x3ff),x
	dex
	bpl .cl1

CheckForGameData
;	+WaitForFire_A

	lda #ForGame_checksumsCount
	ldx #<ForGame_checksumsNumBytes
	jsr ExternalMemory_C64CheckMemorySetChecksumParams
	+MLongValueTo_AXY ForGame_checksumsStart
	jsr ExternalMemory_C64CheckMemorySetChecksumAddress
	+MLongValueTo_AXY gameDataIdentifier
	jsr ExternalMemory_C64CheckMemory

	; Disable the C64 screen for speed
	lda #0
	sta VIC2ScreenControlV

	; Also clear zeropage and the stack before starting the game proper
	; The title screen checks GameScore_Value for hiscore entry...
	+M_RAMTAS_LOW_STACK

!ifdef Debug_FakeHiscore {
	+MByteValueToAddress_A 9 , GameScore_Value+1
	+MByteValueToAddress_A 9 , GameScore_Value+2
	+MByteValueToAddress_A 8 , GameScore_Value+3
	+MByteValueToAddress_A 1 , GameScore_Value+4
!for .i , GameTotalHits_size {
	+MByteValueToAddress_A 9-.i , GameTotalHits + .i-1
}
}

	jmp LoadRunTitleScreen


!zn
.hexTab !scr "0123456789abcdef"
DisplayHexFromAAtX
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .hexTab,y
	sta SCREENRAM,x

	pla
	and #$f
	tay
	lda .hexTab,y
	inx
	sta SCREENRAM,x
	inx
	rts

+MCheckNotInIOKernal


!source "AfterBurner/CommonBootDefinesPre.a"
*=CommonBootCode_JumpTable_Start
	jmp LoadRunTitleScreen
	jmp LoadRunGame
	jmp LoadRunMissionComplete

*=CommonBootCode_JumpTable_End
!bin "bin/maincommon.prg",,2
!source "tmp\CommonBootDefines.a"
*=EndCommonBootCode

kExternalMemoryFiles_OnlyCheckHighAddress = 1
!source "asm/ExternalMemoryFiles.a"

LoadRunTitleScreen
	+MExternalMemoryFiles_CopyRunFileFromExternalMemory resourceFileOffset_Title , $200 , resourceFileSize_Title , $200


LoadRunGame
	+MExternalMemoryFiles_CopyRunFileFromExternalMemory resourceFileOffset_Game , $200 , resourceFileSize_Game , $200

LoadRunMissionComplete
	+MExternalMemoryFiles_CopyRunFileFromExternalMemory resourceFileOffset_MissionComplete , $200 , resourceFileSize_MissionComplete , $200

+MCheckNotInKERNALServiceVectors
