; Enable this to send resource data from external RAM to the hardware
;SendResourceData = 1

;Debug_JustRunGame = 1
;Debug_NoTitleScreen = 1
;Debug_RunGameLanding = 1
;Debug_RunGameCanyon = 1
;Debug_GameStartZeroSpeed = 1
;Debug_SimpleLandscapeRotation = 1
;Debug_NoSpawnEnemy=1

kHardwareTest_UsingSprites4 = 1

kBus24Bit_VideoLayer_HasOverscan=1
kBus24Bit_VideoLayer_ExpandedPalettes = 1
kBus24Bit_VideoLayer_VBlankUseNMI = 1
kBus24Bit_SpritesMaxNum = 32

!to "bin/main.prg", cbm
!sal
!sl "tmp/main.map"
!svl "tmp/main.lbl"
!pdb "tmp/main.pdb"
!cpu 6510
!ct pet

zeroPage_Temp0	= $2
zeroPage_Temp1	= $3
zeroPage_Temp2	= $4
zeroPage_Temp3	= $5
zeroPage_Temp4	= $6
zeroPage_Temp5	= $7
zeroPage_Temp6	= $8
zeroPage_Temp7	= $9
zeroPage_Temp8	= $a
zeroPage_Temp9	= $b
zeroPage_Temp9	= $b
zeroPage_Temp10	= $c
zeroPage_Temp11	= $d
zeroPage_Temp12	= $e
zeroPage_Temp13	= $f
zeroPage_Temp14	= $10
zeroPage_Temp15	= $11
zeroPage_Temp16	= $12
zeroPage_Temp17	= $13
zeroPage_Temp18	= $14
zeroPage_Temp19	= $15
SortTemp0 = zeroPage_Temp0
SortTemp1 = SortTemp0 + 1

SortHardMaxEntries = 16	; The hard maximum for entries for the sort

; Enable this to send graphics data from code, however this only works if the data is small :)
;IncludeGraphicsData = 1
;IncludeGraphicsData_L1=1

!source "stdlib/stdlib.a"
!source "stdlib/Comparisons.a"
!source "stdlib/PETSCII.a"
!source "BombJack/stdlib/Bus24Bit_Macros.a"
!source "BombJack/stdlib/Bus20To32Bit1_Macros.a"
!source "BombJack/stdlib/Video_Macros.a"
!source "BombJack/stdlib/APU_Macros.a"

ScreenLandscapeOriginYPos = 88
ScreenLandscapeNumRollSteps = 72
ScreenLandscapeNumStepsDelta = 360 / ScreenLandscapeNumRollSteps
ScreenLandscapeNumRollAnimationSpeed = 2

!source "AfterBurner/SpriteMacros.a"
!source "AfterBurner/SampleMacros.a"

!source "tmp/Demo14LargeTablesIncludeFrames.a"
;!set UsingMaxHardwareScaleTabValue = maxHardwareScaleTabValue
!set UsingMaxHardwareScaleTabValue = 255	; Override, more sprite frames into the distance, but more memory


!zn
*=$200
start
	sei
	jmp mainLoop

!source "tmp/FingerPrint.a"
!source "stdlib/LongBranches.a"
!source "BombJack/stdlib/APU.a"

Initialise_NoPreserveStack = 1
Initialise_NoIRQServiceRoutine = 1
Initialise_NoMACROWaitForTheLastScan = 1
!source "stdlib/Initialise.a"

!source "BombJack/stdlib/Bus24Bit.a"
* = SCREENRAM
messageMW
!scr "MegaWang 2000 Turbo Edition             After Burner : Checking for external RAM..."
messageMWEnd
messageMWRAMOK
!scr "RAM OK "
debugDMA
!scr "----------------              "
messageMWRAMOKEnd
messageMWRAMError
!scr "RAM BLOCK ERROR: "
messageMWRAMErrorBlock
!scr "------"
messageMWRAMErrorEnd


!source "BombJack/stdlib/Bus20To32Bit1.a"
!source "BombJack/stdlib/Audio.a"
!source "BombJack/stdlib/Video.a"
RNXPCompressionDecompress_WriteBytesmAddr = zeroPage_Temp0
!source "asm/DecompressRLECommon.a"
!source "BombJack/stdlib/HardwareTest.a"
!source "BerzerkRedux/Rand.a"
!source "asm/ExternalMemory.a"

!source "tmp\Demo14ScaledSprites4Sheet.txtVars.a"
!source "tmp\target\exportedSoundEffectsAfterBurnerDefines.a"
!source "tmp\Demo14FinalData_Checksums.a"

GameExpectedIdentifier
	; ASCII: MW2000-AfterBurner
	!by $4D , $57 , $32 , $30 , $30 , $30 , $2D , $41 , $66 , $74 , $65 , $72 , $42 , $75 , $72 , $6E , $65 , $72
GameExpectedIdentifierLen = * - GameExpectedIdentifier

!zn
mainLoop
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	jsr ExternalMemory_C64DisplayStartupMessage

	jsr Bus24Bit_Init
	jsr Bus20To32Bit1_Init
	jsr APU_ResetDisable
	jsr Audio_Init
!ifdef SendResourceData {
	jsr HardwareTest_VideoPattern0
}

	; Test NMI Generated by video hardware
!if 0 {
	; If the display is disabled there shouldn't be any VBLANK NMI
	jsr Bus20To32Bit1_Init
	jsr Video_DisableDisplay

	+MWordValueToAddress_A .nmi , KERNALNMIServiceRoutineLo
	lda #%10010000
	sta CIA2InterruptControl

	+WaitForFire_A
	; Turn off the NMI, since it acks the signal any wait vblank won't work as it won't read the bit as set
	lda #$7f
	sta CIA2InterruptControl

	jsr HardwareTest_VideoPattern0

	; Enable the NMI again
	lda #%10010000
	sta CIA2InterruptControl

	; Demonstrate the code reaches this point and does not get stuck on a wait vsync
.endless
	inc VIC2ScreenColour
	jmp .endless

.nmi
	pha
	inc VIC2BorderColour
	+DelayFor 200
	dec VIC2BorderColour
	lda CIA2InterruptControl
	pla
	rti
}

	jsr ExternalMemory_C64CheckMemory

	; Disable the whole display and DMA
	; In simulation this stops destination RAM corruption
	jsr Bus20To32Bit1_Init
	jsr Video_DisableDisplay
	; These other "disable" options do not reliably stop corruption in simulation
;	+MBus24Bit_SetAddress_A kBus24Bit_Sprites4_EBBS , kBus24Bit_Sprites4_Controls
	; Flag not ready and disable logic
;	+MBus24Bit_Send8BitValue 0
	jsr Bus20To32Bit1_Init
;	jsr Video_SetAddressVideoLayersEnable
;	+MBus24Bit_Send8BitValue 0


!ifdef SendResourceData {
	jsr ExternalMemory_C64SendResourceData

;	+WaitForFire_A
}
	; Complete all chunks
	jsr Bus20To32Bit1_ShortReset

	; Disable the C64 screen for speed
	lda #0
	sta VIC2ScreenControlV

	jsr OneTimeInit

;	+WaitForFire_A

.fullGameLoop
	; Debug, skip title and intro
!ifndef Debug_JustRunGame {
!ifndef Debug_NoTitleScreen {
	jsr InitTitleScreen
	jsr RunTitleScreen
}
	inc VIC2BorderColour

	jsr InitGameIntro
	jsr RunGameIntro

	inc VIC2BorderColour
}

!ifdef Debug_RunGameLanding {
	jsr InitGame
	jsr InitGameLanding
	jsr RunGameLanding
}

!ifdef Debug_RunGameCanyon {
	jsr InitGame
	jsr InitGameCanyon
	jsr RunGameCanyon
}

	jsr InitGame
	jsr RunGame

	jmp .fullGameLoop

AudioActiveFlags !by 0

.hexTab !scr "0123456789abcdef"
DisplayHexFromAAtX
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda .hexTab,y
	sta SCREENRAM,x

	pla
	and #$f
	tay
	lda .hexTab,y
	inx
	sta SCREENRAM,x
	inx
	rts

!source "AfterBurner/Init.a"
!source "AfterBurner/APU.a"
!source "AfterBurner/EntitySystem.a"
!source "AfterBurner/EntitySystemSpriteDraw.a"
!source "AfterBurner/ScaledSpriteCommon.a"
!source "AfterBurner/Landscape.a"
!source "AfterBurner/LandscapeObjectDraw.a"
!source "AfterBurner/PlayerControl.a"
!source "AfterBurner/Maths.a"
!source "AfterBurner/TitleScreen.a"

+MCheckNotInIOKernal

*=CHARROM
!source "AfterBurner/LandscapeMapCalc.a"


*=KERNALROM
!source "AfterBurner/Game.a"
!source "AfterBurner/GameCanyon.a"
!source "AfterBurner/GameIntro.a"
!source "AfterBurner/GameLanding.a"

!source "AfterBurner/LandscapeAnimate.a"
