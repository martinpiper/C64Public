!zn {
; Initialises everything we can think of to give us a good known state.
; Leaves interrupts and the screen switched off.
; a = Processor port flags e.g. lda #ProcessorPortAllRAMWithIO
; x,y are not preserved
InitialiseMachine
	; Stop interrupts, clear decimal mode and backup the previous stack entries
	sei
	tay	; Save
	cld
!ifdef Initialise_NoPreserveStack {} else {
	pla
	sta .smpreviousStack2+1
	pla
	sta .smpreviousStack1+1
	; Grab everything on the stack
	ldx #$ff
	txs
}
	; Init the processor port
	lda #ProcessorPortAllRAMWithIO
	sta ZPProcessorPort
	lda #ProcessorPortDDRDefault
	sta ZPProcessorPortDDR
	; Clear all CIA to known state, interrupts off.
	+MACROCIAIRQControlDisable_A
	+MACROVICIRQCIATimerControlDisable_A
	+MACROAckAllIRQs_A

	; Setup kernal and user mode IRQ vectors to point to a blank routine
	lda #<.initIRQ
!ifdef Initialise_NoIRQServiceRoutine {} else {
	sta IRQServiceRoutineLo
}
	sta KERNALIRQServiceRoutineLo
	lda #>.initIRQ
!ifdef Initialise_NoIRQServiceRoutine {} else {
	sta IRQServiceRoutineHi
}
	sta KERNALIRQServiceRoutineHi

	lda #<.initNMI
!ifdef Initialise_NoIRQServiceRoutine {} else {
	sta NMIServiceRoutineLo
}
	sta KERNALNMIServiceRoutineLo
	lda #>.initNMI
!ifdef Initialise_NoIRQServiceRoutine {} else {
	sta NMIServiceRoutineHi
}
	sta KERNALNMIServiceRoutineHi

!ifndef Initialise_NoMACROWaitForTheLastScan {
	+MACROWaitForTheLastScan_A
}
	+BlankScreenBorderSpriteSound_A

	; Set the user requested ROM state
	sty ZPProcessorPort

	; Restore what was on our stack so we can return
!ifdef Initialise_NoPreserveStack {} else {
.smpreviousStack1	lda #$00
	pha
.smpreviousStack2	lda #$00
	pha
}

	rts

.initIRQ
	pha
	+MACROAckRasterIRQ_A
	pla
.initNMI
	rti
}
