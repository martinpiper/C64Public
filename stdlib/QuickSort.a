; Quick sort macros
; For usage example: features\CheckSortQuick.a
; For unit test: features\CheckSorts.feature


!macro QuickSort_Init .SortMaxEntries , .SortIndexTable {
	ldx .SortMaxEntries
.l1
	dex
	txa
	sta .SortIndexTable,x
	bne .l1
}



!macro QuickSort_SortRTS .comparison , .SortMaxEntries , .SortIndexTable , .SortValueTable , .SortTemp0 , .SortTemp1 {
	ldx #0
	ldy .SortMaxEntries
	dey
	jmp .QuickSortUtil
	
.ret
	rts

; Entry: X and Y = low and high inclusive
.QuickSortUtil
	stx .SortTemp0
	sty .SortTemp1
	;if (low >= high) {return;}
	cpx .SortTemp1
	bcs .ret

	jsr .QuickSortPartition
	
	; Setup the entry parameters for the next recursive layer
	; quickSortUtil(arr, low, pivot - 1);
	lda .SortTemp0
	pha
	dey
	tya
	pha
	; quickSortUtil(arr, pivot + 1, high);
	iny	; Restore Y back to normal
	iny
	tya
	pha
	lda .SortTemp1
	pha
	
	; Now call
	pla
	tay
	pla
	tax
	jsr .QuickSortUtil
	pla
	tay
	pla
	tax
	jsr .QuickSortUtil
	
	rts


; Entry: X and Y = low and high inclusive
; Also duplicated into .SortTemp0/.SortTemp1
; Exit: Y = pivot
.QuickSortPartition
	; int pivot = arr[high];
	ldx .SortIndexTable,y
	lda .SortValueTable,x
	sta .smpivot+1

	; int i = low - 1;
	ldy .SortTemp0
	dey
	sty .smi+1

	; for (int j = low; j  < high; j++) {
	ldy .SortTemp0
.fl1
	; if (arr[j] < pivot) {
	ldx .SortIndexTable,y
	lda .SortValueTable,x
.smpivot	cmp #0

!if .comparison = 0 {
	!error .comparison must be 1 (for >) or -1 (for <)
}
!if .comparison < 0 {
	+IfURegLessThanOrEqualToVal .sl3
}
!if .comparison > 0 {
	+IfURegGreaterThanOrEqualToVal .sl3
}
	; i++;
	inc .smi+1

	; swap(&arr[i], &arr[j]);
	; Swap index values only
	lda .SortIndexTable,y
	pha
.smi	ldx #0
	lda .SortIndexTable,x
	sta .SortIndexTable,y
	pla
	sta .SortIndexTable,x

.sl3
	iny
	cpy .SortTemp1
	bcc .fl1

	; swap(&arr[i + 1], &arr[high]);
	ldy .smi+1
	iny
	lda .SortIndexTable,y
	pha
	ldx .SortTemp1
	lda .SortIndexTable,x
	sta .SortIndexTable,y
	pla
	sta .SortIndexTable,x
	
	; return i + 1;
	; From Y above
	rts
}
