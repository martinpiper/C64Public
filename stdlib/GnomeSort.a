; Gnome sort macros
; For usage example: features\CheckSortGnome.a
; For unit test: features\CheckSorts.feature


!macro GnomeSort_TableInit .SortHardMaxEntries , .SortTemp0 , .SortTemp1 , .SortBlockByteLength , .GnomeSort_Sortlo , .GnomeSort_Sorthi , .GnomeSort_GnomeSort_sortstart {
!if .SortTemp0 + 1 != .SortTemp1 {
!error ".SortTemp0 and .SortTemp1 must be sequential lo/hi addresses"
}
	+MWordValueToAddress_A .GnomeSort_GnomeSort_sortstart , .SortTemp0

	ldy #0
.l2
	lda .SortTemp0
	sta .GnomeSort_Sortlo,y
	lda .SortTemp1
	sta .GnomeSort_Sorthi,y

	lda .SortTemp0
	clc
	adc #.SortBlockByteLength
	sta .SortTemp0
	bcc .over
	inc .SortTemp1
.over
	iny
	cpy #.SortHardMaxEntries
	bne .l2
}

!macro GnomeSort_Init .SortMaxEntries , .SortIndexTable {
	ldx .SortMaxEntries
.l1
	dex
	txa
	sta .SortIndexTable,x
	bne .l1
}

!macro GnomeSort_SortBlock .comparison , .index , .backPos , ~.forward , .SortIndexTable , .SortValueTable {
.over1	ldy .SortIndexTable+.index+1
.back1	ldx .SortIndexTable+.index
.forward = .back1

		lda+2 .SortValueTable,y
	cmp .SortValueTable,x

;	bcs .over2
!if .comparison = 0 {
	!error .comparison must be 1 (for >) or -1 (for <)
}
!if .comparison < 0 {
	+IfURegLessThanOrEqualToVal .over2
}
!if .comparison > 0 {
	+IfURegGreaterThanOrEqualToVal .over2
}


	stx .SortIndexTable+.index+1
	sty .SortIndexTable+.index

;	bcc .backPos
!if .comparison = 0 {
	!error .comparison must be 1 (for >) or -1 (for <)
}
!if .comparison < 0 {
	+IfURegGreaterThanVal .backPos
}
!if .comparison > 0 {
	+IfURegLessThanVal .backPos
}

.over2
}


!macro GnomeSort_SortRTS .comparison , .SortHardMaxEntries , .SortMaxEntries , .SortIndexTable , .SortValueTable , .SortTemp0 , .SortTemp1 , .GnomeSort_Sortlo , .GnomeSort_Sorthi , ~.SortBlockByteLength , ~.GnomeSort_sortstart {
	lda .SortMaxEntries
	cmp #$02
	bcs .someEntries

	rts

.someEntries

	sbc #$02
	tax

	lda .GnomeSort_Sortlo,x
	sta .SortTemp0
	lda .GnomeSort_Sorthi,x
	sta .SortTemp1

	; Self modifying code that puts an RTS ($60) into the sort routine below depending on how many entries it wants to process in the index table.
	ldy #$00
	lda (.SortTemp0),y
	sta .smbackup+1
	lda #$60	; (rts)
	sta (.SortTemp0),y
	jsr .over0
	ldy #$00
.smbackup	lda #$ff
	sta (.SortTemp0),y

	rts

.over0	ldy .SortIndexTable+1
.back0	ldx .SortIndexTable
	lda+2 .SortValueTable,y
	cmp .SortValueTable,x

;	bcs .over1
!if .comparison = 0 {
	!error .comparison must be 1 (for >) or -1 (for <)
}
!if .comparison < 0 {
	+IfURegLessThanOrEqualToVal .over1
}
!if .comparison > 0 {
	+IfURegGreaterThanOrEqualToVal .over1
}

	stx .SortIndexTable+1
	sty .SortIndexTable

.GnomeSort_sortstart
.over1
	+GnomeSort_SortBlock   .comparison , 1 , .back0	, ~.back1		 , .SortIndexTable , .SortValueTable
.over2
.SortBlockByteLength = .over2 - .over1
	+GnomeSort_SortBlock  .comparison ,  2 , .back1	, ~.back2		 , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  3 , .back2	, ~.back3        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  4 , .back3	, ~.back4        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  5 , .back4	, ~.back5        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  6 , .back5	, ~.back6        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  7 , .back6	, ~.back7        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison ,  8 , .back7	, ~.back8        , .SortIndexTable , .SortValueTable
!if .SortHardMaxEntries >= 8 {
	+GnomeSort_SortBlock  .comparison ,  9 , .back8	, ~.back9        , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 10 , .back9	, ~.back10       , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 11 , .back10 , ~.back11      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 12 , .back11 , ~.back12      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 13 , .back12 , ~.back13      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 14 , .back13 , ~.back14      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 15 , .back14 , ~.back15      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 16 , .back15 , ~.back16      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 16 {
	+GnomeSort_SortBlock  .comparison , 17 , .back16 , ~.back17      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 18 , .back17 , ~.back18      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 19 , .back18 , ~.back19      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 20 , .back19 , ~.back20      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 21 , .back20 , ~.back21      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 22 , .back21 , ~.back22      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 23 , .back22 , ~.back23      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 24 , .back23 , ~.back24      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 24 {
	+GnomeSort_SortBlock  .comparison , 25 , .back24 , ~.back25      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 26 , .back25 , ~.back26      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 27 , .back26 , ~.back27      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 28 , .back27 , ~.back28      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 29 , .back28 , ~.back29      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 30 , .back29 , ~.back30      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 31 , .back30 , ~.back31      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 32 , .back31 , ~.back32      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 32 {
	+GnomeSort_SortBlock  .comparison , 33 , .back32 , ~.back33      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 34 , .back33 , ~.back34      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 35 , .back34 , ~.back35      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 36 , .back35 , ~.back36      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 37 , .back36 , ~.back37      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 38 , .back37 , ~.back38      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 39 , .back38 , ~.back39      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 40 , .back39 , ~.back40      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 40 {
	+GnomeSort_SortBlock  .comparison , 41 , .back40 , ~.back41      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 42 , .back41 , ~.back42      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 43 , .back42 , ~.back43      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 44 , .back43 , ~.back44      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 45 , .back44 , ~.back45      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 46 , .back45 , ~.back46      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 47 , .back46 , ~.back47      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 48 , .back47 , ~.back48      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 48 {
	+GnomeSort_SortBlock  .comparison , 49 , .back48 , ~.back49      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 50 , .back49 , ~.back50      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 51 , .back50 , ~.back51      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 52 , .back51 , ~.back52      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 53 , .back52 , ~.back53      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 54 , .back53 , ~.back54      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 55 , .back54 , ~.back55      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 56 , .back55 , ~.back56      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 56 {
	+GnomeSort_SortBlock  .comparison , 57 , .back56 , ~.back57      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 58 , .back57 , ~.back58      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 59 , .back58 , ~.back59      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 60 , .back59 , ~.back60      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 61 , .back60 , ~.back61      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 62 , .back61 , ~.back62      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 63 , .back62 , ~.back63      , .SortIndexTable , .SortValueTable
	+GnomeSort_SortBlock  .comparison , 64 , .back63 , ~.back64      , .SortIndexTable , .SortValueTable
; One more
	+GnomeSort_SortBlock  .comparison , 65 , .back64 , ~.back65      , .SortIndexTable , .SortValueTable
}
!if .SortHardMaxEntries >= 64 {
!error "Expand the above unrolled code to support more entries"
}

	rts
}
