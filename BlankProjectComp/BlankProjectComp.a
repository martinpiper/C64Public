;BlankProjectComp test code

!source "stdlib/stdlib.a"
!to "BlankProjectComp.prg", cbm
!sl "BlankProjectComp.map"
!sal
!svl "BlankProjectComp.lbl"
!pdb "BlankProjectComp.pdb"
!cpu 6510
!ct pet

!macro Crunch .pos {
	+MACROWaitForRaster .pos
;	+MACRODelay_X 1
	and #7
;	ora #%111000
	ora #%11000
	sta VIC2ScreenControlV
}

*=$400
	jmp $800
	
!source "FingerPrint.a"

*=$800
	sei
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV

	ldx #0
.cl1
	txa
	sta COLOURRAM,x
	sta COLOURRAM+$100,x
	sta COLOURRAM+$200,x
	sta COLOURRAM+$300,x
	dex
	bne .cl1

!if 0 {
	inc $d020
	jmp *-3
}

!if 0 {
	lda #1
	sta VIC2SpriteEnable
	sta VIC2SpriteMulticolour
	lda #VIC2Colour_DarkGrey
	sta VIC2ExtraSpriteColour1
	lda #VIC2Colour_LightGrey
	sta VIC2ExtraSpriteColour2
	lda #VIC2Colour_LightBlue
	sta VIC2Sprite0Colour

	lda #$80
	sta VIC2Sprite0X
	sta VIC2Sprite0Y
	lda #$ff
	sta SPRITEFRAME

	; Setup zeropage
	ldx #DecompCodeSize
.czl1
	lda+2 DecompCodeStart-1,x
	sta+2 DecompCodeRealStart-1,x
	dex
	bne .czl1

.l1
	+MACROWaitForRaster $42
	inc VIC2BorderColour

	+MWordValueTo_XY $3fc0
	jsr RNXPCompressionDecompress_InitStore
	+MWordValueTo_XY Frame0
	jsr RNXPCompressionDecompress

	dec VIC2BorderColour
	jmp .l1


!macro RNXPCompressionIncBorder_A {}

Decompression_OptimiseForOneEscapeBit = 1
Decompression_OptimiseNoChangingEscape = 1
Decompress_RNZip = 1

DecompCodeStart
!pseudopc $10 {
DecompCodeRealStart
!source "../Decompression/DecompressionVars.a"
CompressionStartOfHistoryBufferTables

}
DecompCodeSize=*-DecompCodeStart

!source "../Decompression/Decompression.a"
!source "../Decompression/DecompressionP2.a"

}

!if 1 {
	; Example bitmap screen display
	+MWordValueTo_XY BitmapLogoColours
	jsr MemoryCopy_SetSource
	+MWordValueTo_XY COLOURRAM
	jsr MemoryCopy_SetDestination
	+MWordValueTo_XY VIC2ScreenCharsWidth * VIC2ScreenCharsHeight
	jsr MemoryCopy_ForSize

	lda #kVIC2ScreenControlHBits_40Columns | kVIC2ScreenControlHBits_Multicolour
	sta VIC2ScreenControlH
	+MVIC2MemorySetup_ScreenBitmap_A BitmapLogoScreen , BitmapLogo
	sta VIC2MemorySetup
	lda #CIA2PortASerialBusVICBank_Bank2
	sta CIA2PortASerialBusVICBank
	lda #VIC2ScreenControlVDefault | kVIC2ScreenControlVBits_Bitmap
	sta VIC2ScreenControlV

	inc $d020
	jmp *-3
}

!if 0 {
.l1

.r1
	lda VIC2ScreenControlV
	bpl .r1

.r0
	lda VIC2ScreenControlV
	bmi .r0

	lda #0
	sta VIC2BorderColour

	lda #30
.l2
	cmp VIC2Raster
	bcs .l2

	inc VIC2BorderColour

	lda #90
.l3
	cmp VIC2Raster
	bcs .l3

	inc VIC2BorderColour

	lda #150
.l4
	cmp VIC2Raster
	bcs .l4

	inc VIC2BorderColour

	jmp .l1
}

!if 0 {
	; RLE Sample playing
	lda #$7f
	sta CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl

	+MACROWaitForTheLastScan_A
	lda #0
	sta VIC2ScreenControlV

	ldx #NMIEntryEnd-NMIEntryStart
.cl2
	lda NMIEntryStart-1,x
	sta+2 NMIEntry-1,x
	dex
	bne .cl2

	lda #<NMIEntry
	sta KERNALNMIServiceRoutineLo
	lda #>NMIEntry
	sta KERNALNMIServiceRoutineHi

	; Start after some small amount of time
	lda #1
	sta CIA2TimerALo
	sta CIA2TimerAHi
	; Start the timer, load the start value and automatically restart
	lda #%00010001
	sta CIA2TimerAControl
	lda #$81
	sta CIA2InterruptControl

	; ACK Any NMI IRQs due to the timer
	lda CIA2InterruptControl
	cli

.l1
	jmp .l1

NMIEntryStart
!pseudopc $10 {
	; NMI Entry
NMIEntry
!if 0 {
	; 68 Cycles
	inc VIC2BorderColour
	sta+1 .sma

.nextSample = *+1
	lda #0
	and #$0f
	sta SIDVolumeFilter

.smAddr = *+1
	lda SampleStart
	sta .nextSample
	sta .smai1
	sta .smai2

.smai1 = *+1
	lda SampleTimerLo
	sta CIA2TimerALo
.smai2 = *+1
	lda SampleTimerHi
	sta CIA2TimerAHi

	inc .smAddr
	bne .o1
	inc .smAddr+1

	lda .smAddr
	cmp #<SampleEnd
	bne .o1
	lda .smAddr+1
	cmp #>SampleEnd
	bne .o1

	+MWordValueToAddress_A SampleStart , .smAddr
.o1
	; Exit the NMI
	dec VIC2BorderColour
	lda CIA2InterruptControl

.sma = *+1
	lda #0
	rti
}

!if 0 {
	; 67 Cycles
	inc VIC2BorderColour
	sta+1 .sma
	sty+1 .smy

.nextSample = *+1
	lda #0
	and #$0f
	sta SIDVolumeFilter

.smAddr = *+1
	lda SampleStart
	sta .nextSample
	tay
	lda SampleTimerLo,y
	sta CIA2TimerALo

	lda SampleTimerHi,y
	sta CIA2TimerAHi

	inc .smAddr
	bne .o1
	inc .smAddr+1

	lda .smAddr
	cmp #<SampleEnd
	bne .o1
	lda .smAddr+1
	cmp #>SampleEnd
	bne .o1

	+MWordValueToAddress_A SampleStart , .smAddr
.o1
	; Exit the NMI
	lda CIA2InterruptControl

.sma = *+1
	lda #0
.smy = *+1
	ldy #0
	dec VIC2BorderColour
	rti
}


}
NMIEntryEnd

!align 255,0
SampleRateHz = 5000
SampleTimerLo
!for .i , 256 {
	!by <(CyclesPerSecondPALC64/(SampleRateHz/     (((.i-1)/16)+1)     ))
}
SampleTimerHi
!for .i , 256 {
	!by >(CyclesPerSecondPALC64/(SampleRateHz/     (((.i-1)/16)+1)     ))
}

SampleStart
	!bin "..\AnimationBitmap\Data\smp_61.raw", $c000
SampleEnd
}

!if 0 {
	; Plots the SID waveform output into sprite X postion, which renders a nice line graph
	lda #0
	sta VIC2SpriteXMSB
	lda #128
	sta VIC2Sprite0X
	lda #VIC2SpriteYBorderTop
	sta VIC2Sprite0Y
	lda #%1
	sta VIC2SpriteEnable
	lda #VIC2Colour_White
	sta VIC2Sprite0Colour
	lda #VIC2Colour_LightBlue
	sta VIC2Sprite1Colour
	lda #.theSprite / 64
	sta SPRITEFRAME

	+ClearScreenAt_AX COLOURRAM , 0
	lda #15
	sta SIDVolumeFilter
	lda #$ff
	lda #0
	sta SIDVoice3FreqLo
	lda #10
	sta SIDVoice3FreqHi
	lda #0
	sta SIDVoice3AttackDecay
	lda #$f0
	sta SIDVoice3SustainRelease
	lda #0
	sta SIDVoice3PulseWidthLo
	lda #10
	sta SIDVoice3PulseWidthHi
	lda #%10000001
	lda #%01000001
	lda #%00100001
	lda #%00010001
	sta SIDVoice3Control

.l1
	lda SIDVoice3WaveformOutput
	lsr
	ora #128
	sta VIC2Sprite0X
	lda VIC2ScreenControlV
	bpl .l1

.l2
	lda VIC2ScreenControlV
	bmi .l2

	lda #0
	sta VIC2BorderColour
	lda #VIC2SpriteYBorderTop
	sta VIC2Sprite0Y
	lda #VIC2SpriteYBorderTop + VIC2SpriteSizeY
	sta VIC2Sprite1Y

;	+MACROWaitForRaster VIC2SpriteYBorderTop

!for .j , 9 {
!set .jj = .j-1

!set .pos = VIC2SpriteYBorderTop + (.jj * VIC2SpriteSizeY) + VIC2SpriteSizeY
	ldx #.pos-8
-
	lda SIDVoice3WaveformOutput
	lsr
	ora #128
	sta VIC2Sprite0X
	cpx VIC2Raster
	bcs -

	inc VIC2BorderColour
	lda #.pos
	sta VIC2Sprite0Y
}

	jmp .l1

* = $2000
.theSprite
!for .i , 21 {
	+SpriteLine 1
}

}

!if 0 {
.l1
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV
.l2
	lda #JoystickBits_Fire
	bit CIA1KeyboardColumnJoystickA
	bne .l2

	+MACROWaitForRaster VIC2SpriteYBorderTop+7
	inc VIC2BorderColour

	+Crunch VIC2SpriteYBorderTop+8
	+Crunch VIC2SpriteYBorderTop+9
	+Crunch VIC2SpriteYBorderTop+10
	+Crunch VIC2SpriteYBorderTop+11
	+Crunch VIC2SpriteYBorderTop+12
	+Crunch VIC2SpriteYBorderTop+13
	+Crunch VIC2SpriteYBorderTop+14
	+Crunch VIC2SpriteYBorderTop+15
	+Crunch VIC2SpriteYBorderTop+16
	+Crunch VIC2SpriteYBorderTop+17
	+Crunch VIC2SpriteYBorderTop+18
	+Crunch VIC2SpriteYBorderTop+19
	+Crunch VIC2SpriteYBorderTop+20
	+Crunch VIC2SpriteYBorderTop+21
	+Crunch VIC2SpriteYBorderTop+22
	+Crunch VIC2SpriteYBorderTop+23
	+Crunch VIC2SpriteYBorderTop+24
	+Crunch VIC2SpriteYBorderTop+25
	+Crunch VIC2SpriteYBorderTop+26
	+Crunch VIC2SpriteYBorderTop+27
	+Crunch VIC2SpriteYBorderTop+28
	+Crunch VIC2SpriteYBorderTop+29
	+Crunch VIC2SpriteYBorderTop+30


	dec VIC2BorderColour
	jmp .l1
}

!if 0 {
	; Keyboard scan tester
.l1
	+MACROWaitForRaster VIC2SpriteYBorderTop

	inc VIC2BorderColour

	; Read joystick
	lda #%01111111
	sta CIA1KeyboardColumnJoystickA

	lda CIA1KeyboardColumnJoystickA
	sta SCREENRAM+$300

	; Read keyboard
!if 0 {
	lda #%00000000
	sta CIA1KeyboardColumnJoystickA
	lda CIA1KeyboardRowsJoystickB
	sta SCREENRAM+$300+1

	lda CIA1KeyboardRowsJoystickB
	cmp #$ff
	beq .noKey
}

	ldx #%01111111
	ldy #0
	txa
.columnScan
	sta SCREENRAM+$300+8,y
	sta CIA1KeyboardColumnJoystickA
.again
	lda CIA1KeyboardRowsJoystickB
	cmp CIA1KeyboardRowsJoystickB
	bne .again
	sta SCREENRAM+$328+8,y
	iny
	txa
	sec
	ror
	tax
	bcs .columnScan

.noKey
	dec VIC2BorderColour
	jmp .l1
}


!if 0 {
	ldx #0
.l1
	lda #100
.l2
	cmp $d012
	bne .l2
	inx
	txa
	and #7
	sta $d016

	lda #150
.l3
	cmp $d012
	bne .l3
	lda #0
	sta $d016
	jmp .l1
}

!if 0 {
	lda #(VIC2ScreenControlHDefault | %10000)
	sta VIC2ScreenControlH

	lda #VIC2Colour_Grey
	sta VIC2ExtraBackgroundColour1
	lda #VIC2Colour_LightGrey
	sta VIC2ExtraBackgroundColour2

	; Visual update
	inc .stuff
	; Trigger any watches
	inc $c000

.l1 jmp .l1

.stuff !by 0

}

!if 0 {
	ldx #7
.f0
	lda # ($700 / 64)
	sta SCREENRAM+SPRITEFRAMESCROFF,x
	txa
	sta VIC2Sprite0Colour,x
	asl
	tay
	lda #128
	sta VIC2Sprite0Y,y
.sm0	lda #VIC2SpriteXBorderLeft
	sta VIC2Sprite0X,y
	lda .sm0+1
	clc
	adc #VIC2SpriteSizeX
	sta .sm0+1
	dex
	bpl .f0

	lda #%11111111
	sta VIC2SpriteEnable
	lda #0
	sta VIC2SpriteMulticolour
	sta VIC2SpriteDoubleWidth

.l1
	inc VIC2BorderColour
	dec VIC2BorderColour
	jmp .l1

*=$700
!fill 63, 255
}

!source "stdlib/Initialise.a"

!if 1 {
!source "stdlib/MemoryCopy.a"
BitmapLogoColours
!bin "Tusari.col",,2
* = $8c00
BitmapLogoScreen
!bin "Tusari.scr",,2
* = $a000
BitmapLogo
!bin "Tusari.bmp",,2
}

!if 0 {
Frame0
	!bin "c:\temp\tc0.bin",,2
Frame1
	!bin "c:\temp\tc1.bin",,2
Frame2
	!bin "c:\temp\tc2.bin",,2
Frame3
	!bin "c:\temp\tc3.bin",,2
Frame4
	!bin "c:\temp\tc4.bin",,2
Frame5
	!bin "c:\temp\tc5.bin",,2
Frame6
	!bin "c:\temp\tc6.bin",,2
Frame7
	!bin "c:\temp\tc7.bin",,2
Frame8
	!bin "c:\temp\tc8.bin",,2
Frame9
	!bin "c:\temp\tc9.bin",,2
Frame10
	!bin "c:\temp\tc10.bin",,2
}
