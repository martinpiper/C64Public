;BlankProjectComp test code

!source "stdlib/stdlib.a"
!to "BlankProjectComp.prg", cbm
!sl "BlankProjectComp.map"
!sal
!svl "BlankProjectComp.lbl"
!pdb "BlankProjectComp.pdb"
!cpu 6510
!ct pet
!initmem $aa

!macro Crunch .pos {
	+MACROWaitForRaster .pos
;	+MACRODelay_X 1
	and #7
;	ora #%111000
	ora #%11000
	sta VIC2ScreenControlV
}

*=$400
	jmp $800
	
!source "FingerPrint.a"

*=$800
	sei
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV

	ldx #0
.cl1
	txa
	sta COLOURRAM,x
	sta COLOURRAM+$100,x
	sta COLOURRAM+$200,x
	sta COLOURRAM+$300,x
	dex
	bne .cl1

!if 0 {
	inc $d020
	jmp *-3
}

; TODO: Side border with sprites

!if 1 {
	; Open top/bottom borders
	; Ten "hires" sprites in the top border
	+ClearScreenAt_AX SCREENRAM , ' '
	sei
	+MByteValueToAddress_A VIC2Colour_Black , VIC2BorderColour
	+MByteValueToAddress_A VIC2Colour_Blue , VIC2ScreenColour
	+MByteValueToAddress_A 0 , VIC2_Bank0_GhostByte
	+MVIC2SpriteIndex_A SpriteFrame0
	sta SCREENRAM + SPRITEFRAMESCROFF + 0
	sta SCREENRAM + SPRITEFRAMESCROFF + 1
	sta SCREENRAM + SPRITEFRAMESCROFF + 2
	sta SCREENRAM + SPRITEFRAMESCROFF + 3
	sta SCREENRAM + SPRITEFRAMESCROFF + 4
	sta SCREENRAM + SPRITEFRAMESCROFF + 5
	+MVIC2SpriteIndex_A SpriteFrame1
	sta SCREENRAM + SPRITEFRAMESCROFF + 6
	sta SCREENRAM + SPRITEFRAMESCROFF + 7

	+MByteValueToAddress_A $20 , VIC2Sprite0X
	+MByteValueToAddress_A $40 , VIC2Sprite1X
	+MByteValueToAddress_A $60 , VIC2Sprite2X
	+MByteValueToAddress_A $80 , VIC2Sprite3X
	+MByteValueToAddress_A $38 , VIC2Sprite4X
	+MByteValueToAddress_A $10 , VIC2Sprite5X
	+MByteValueToAddress_A %110000 , VIC2SpriteXMSB
	+MByteValueToAddress_A VIC2SpriteXBorderLeft + (16*8) , VIC2Sprite6X
	+MByteValueToAddress_A VIC2SpriteXBorderLeft + (16*8) + 48 , VIC2Sprite7X
	+MByteValueToAddress_A VIC2SpriteYBorderTop - VIC2SpriteSizeY - 12 , VIC2Sprite0Y
	; Just enable all the sprites on this line for now
	sta VIC2Sprite0Y
	sta VIC2Sprite1Y
	sta VIC2Sprite2Y
	sta VIC2Sprite3Y
	sta VIC2Sprite4Y
	sta VIC2Sprite5Y
	sta VIC2Sprite6Y
	sta VIC2Sprite7Y

	+MByteValueToAddress_A VIC2Colour_White , VIC2Sprite0Colour
	+MByteValueToAddress_A VIC2Colour_Cyan , VIC2Sprite1Colour
	+MByteValueToAddress_A VIC2Colour_Green , VIC2Sprite2Colour
	+MByteValueToAddress_A VIC2Colour_Purple , VIC2Sprite3Colour
	+MByteValueToAddress_A VIC2Colour_Red , VIC2Sprite4Colour
	+MByteValueToAddress_A VIC2Colour_Orange , VIC2Sprite5Colour
	+MByteValueToAddress_A VIC2Colour_Grey , VIC2Sprite6Colour
	+MByteValueToAddress_A VIC2Colour_LightRed , VIC2Sprite7Colour

	+MByteValueToAddress_A %11000000 , VIC2SpriteMulticolour
	sta VIC2SpriteDoubleWidth
	+MByteValueToAddress_A VIC2Colour_LightGreen , VIC2ExtraSpriteColour1
	+MByteValueToAddress_A VIC2Colour_Black , VIC2ExtraSpriteColour2
	+MVIC2SpriteEnableAll_A
.l1
	; Here turn off 25 row mode
	lda #kVIC2ScreenControlVBits_ScreenOn | %011
	+MACROWaitForRaster_X $f8
	sta VIC2ScreenControlV

.smt1	lda #$ff
	bne .doCount

	inc VIC2Sprite0X
	dec VIC2Sprite1X
	inc VIC2Sprite2X
	inc VIC2Sprite2X
	dec VIC2Sprite3X
	dec VIC2Sprite3X
	dec VIC2Sprite3X
	inc VIC2Sprite4X
	lda VIC2Sprite4X
	and #31
	sta VIC2Sprite4X
	dec VIC2Sprite5X
	lda VIC2Sprite5X
	and #31
	sta VIC2Sprite5X

	jmp .overCount
.doCount
	dec .smt1 + 1
.overCount

	; Here turn on 25 row mode
	lda #kVIC2ScreenControlVBits_ScreenOn | kVIC2ScreenControlVBits_25Rows | %011
	+MACROWaitForRaster_X $fc
	sta VIC2ScreenControlV

	; Skip the hi raster positions
.rh1
	lda VIC2ScreenControlV
	bpl .rh1
.rh2
	lda VIC2ScreenControlV
	bmi .rh2
	
	; Now use a raster IRQ to get cycle accurate timing
	+MWordValueToAddress_A StableIRQ , KERNALIRQServiceRoutineLo
	+MByteValueToAddress_A %1 , VIC2InteruptControl
	+MACROWaitForRaster_X VIC2SpriteYBorderTop - VIC2SpriteSizeY - 12 - 4
	inc VIC2Raster
	+MACROAckRasterIRQ_A
	tsx
	cli
	; Fill remaining code with
!for .i , 100 {
	nop
}
	; Should never reach this jam, but if it does then we will hit the debugger
	jam

!align 255,0
StableIRQ
	txs

	; Delay for a while
	ldx #8
.wl1
	dex
	bne .wl1
	bit $ea

	; Final cycle wobble check.
	lda VIC2Raster
	cmp VIC2Raster
	beq .start
.start

	; The raster is now stable

	; Now play around with the sprite effects
	lda #%11111111	; No background pixels exposed
	sta VIC2_Bank0_GhostByte
	+MByteValueToAddress_A VIC2Colour_Yellow , VIC2ScreenColour

	; Just some obvious SCREENRAM instructions to use while debugging, these all will start on the same raster line cycle
	; Next line
	inc SCREENRAM
	+DelayFor CyclesPerRasterPALC64 - 6

	; Next line
	inc SCREENRAM+1
	+DelayFor CyclesPerRasterPALC64 - 6

	; Next line
	inc SCREENRAM+2
	; Extra cycles for sprite memory access
	+DelayFor CyclesPerRasterPALC64 - 6 - 19

	; Next line
	inc SCREENRAM+3
	; Extra cycles for sprite memory access
	+DelayFor CyclesPerRasterPALC64 - 6 - 19

	; Next line
	inc SCREENRAM+4
	+DelayFor 2
	lda #%11100111	; 2 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8

	; Next line
	inc SCREENRAM+5
	+DelayFor 2
	lda #%11000011	; 4 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8


	; Next line
	inc SCREENRAM+6
	+DelayFor 2
	lda #%10000001	; 6 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8

	; Next line
	inc SCREENRAM+7
	+DelayFor CyclesPerRasterPALC64 - 6 - 19

	; Next line
	inc SCREENRAM+8
	+DelayFor CyclesPerRasterPALC64 - 6 - 19

	; Next line
	inc SCREENRAM+9
	+DelayFor CyclesPerRasterPALC64 - 6 - 19

	; Next line
	inc SCREENRAM+10
	+DelayFor 2
	lda #%10000001	; 6 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8

	; Next line
	inc SCREENRAM+11
	+DelayFor 2
	lda #%11000011	; 4 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8

	; Next line
	inc SCREENRAM+12
	+DelayFor 2
	lda #%11100111	; 2 hires background pixels exposed
	ldx #%11111111
	sta VIC2_Bank0_GhostByte
	+DelayFor 8
	stx VIC2_Bank0_GhostByte
	+DelayFor CyclesPerRasterPALC64 - 6 - 19 - 2 - 2 - 2 - 4 - 4 - 8

	+MByteValueToAddress_A VIC2Colour_Blue , VIC2ScreenColour

	lda #0
	+MACROWaitForRaster_X VIC2SpriteYBorderTop - 12 + 4
	sta VIC2_Bank0_GhostByte

	jmp .l1

*=$200
SpriteFrame0
+SpriteLine %....################....
+SpriteLine %...##################...
+SpriteLine %..####################..
+SpriteLine %.######################.
+SpriteLine %########################
+SpriteLine %########################
+SpriteLine %########################
+SpriteLine %.######################.
+SpriteLine %..####################..
+SpriteLine %...##################...
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
+SpriteLine %....################....
*=$240
SpriteFrame1
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %#.#..#.##.#.#.#..#.##.#.
+SpriteLine %#.#..#.##.#.#.#..#.##.#.
+SpriteLine %#.#..#.##.#.#.#..#.##.#.
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %..#.#.#.#.....#.#.#.#...
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##
+SpriteLine %###.#.#.#.#####.#.#.#.##

}

!if 0 {
	; Setup PA2 and SERIALATN for writing
	; Bit 2: RS232 TXD line, output bit.
	; Bit 3: Serial bus ATN OUT; 0 = High; 1 = Low.
	lda #%00001111
	sta CIA2PortADDR

	; Setup input of 8 bits for reading, _PC is also pulsed just like when writing
	lda #0
	sta CIA2PortBDDR

	; Strobe PA2 low then high
	; NOTE: PA2 is not inverted. SERIALATN is inverted.
	lda #%0000
	sta CIA2PortASerialBusVICBank
	; One read since PA2 is only read when there is _PC activity... TODO: Remove this by using edge on PA2 or not incrementing when PA2 is low...
	lda CIA2PortBRS232
	lda #%0111
	sta CIA2PortASerialBusVICBank

	; Consume one extra????!!
	lda CIA2PortBRS232

!if 0 {
	; Select audio stream
;	lda #%1111
;	sta CIA2PortASerialBusVICBank

	lda #%01000000
	sta CIA1TimerAControl

	+ClearScreenAt_AX COLOURRAM , 1
	; Debug data draw to screen
	+MByteValueToAddress_A VIC2MemorySetupDefault+%10 , VIC2MemorySetup
	ldx #0
.tl1
	lda CIA2PortBRS232
	sta $0400,x
	inx
	bne .tl1
	+WaitForFire_A
	jmp .tl1
}

	; Bitmap refresh speed test. Uses SIDVoice3WaveformOutput as a source of data (instead of CIA2PortBRS232) to speed test bitmap drawing.
kBitmapDrawX = 9
kBitmapDrawWidth = 22
kBitmapDrawY = 6
kBitmapDrawHeight = 16

;	+MByteValueToAddress_A $ff , VIC2SpriteEnable
	+ClearScreenAt_AX COLOURRAM , 0
!if 0 {
	lda #1
	sta SIDVolumeFilter
	lda #$ff
	lda #0
	sta SIDVoice3FreqLo
	lda #210
	sta SIDVoice3FreqHi
	lda #0
	sta SIDVoice3AttackDecay
	lda #$f0
	sta SIDVoice3SustainRelease
	lda #0
	sta SIDVoice3PulseWidthLo
	lda #10
	sta SIDVoice3PulseWidthHi
	lda #%10000001
	sta SIDVoice3Control
}

	+MVIC2MemorySetup_ScreenBitmap_A $400 , $2000
	sta VIC2MemorySetup
	+MByteValueToAddress_A VIC2ScreenControlHDefault | kVIC2ScreenControlHBits_Multicolour , VIC2ScreenControlH
	+MByteValueToAddress_A VIC2ScreenControlVDefault | kVIC2ScreenControlVBits_Bitmap , VIC2ScreenControlV
	lda #CIA2PortASerialBusVICBank_Bank0 | %100
	sta CIA2PortASerialBusVICBank

	; Configure sample playback NMI
	lda #0
	sta CIA2InterruptControl

	+MWordValueToAddress_A NMIEntry , KERNALNMIServiceRoutineLo

	; Start the timer, load the start value and automatically restart
	+MWordValueToAddress_A 610 , CIA2TimerALo	; Calculated rate: CyclesPerSecondPALC64 / 610 = 1615.160655737705 Hz
	lda #%00010001
	sta CIA2TimerAControl
	lda #$81
;	sta CIA2InterruptControl

	; ACK Any NMI IRQs due to the timer
	lda CIA2InterruptControl

	jmp .l1

	; NOTE: Y register is not preserved, since the Y register is not used in the mainline
NMIEntry
;	inc VIC2BorderColour
;	sta $02

	; Simulate tell the interface to switch to sample data
;	ldy #%1111
;	sty CIA2PortASerialBusVICBank
;	ldy #%01000000
;	sty CIA1TimerAControl

;	ldy CIA2PortBRS232
;	sty SIDVolumeFilter

;	ldy #%0111
;	sty CIA2PortASerialBusVICBank
;	ldy #%00000000
;	sty CIA1TimerAControl

	; Exit the NMI
;	dec VIC2BorderColour
	ldy CIA2InterruptControl

;	lda $02
	rti

	; TODO: Two options here, one unroll the loop entirely, but this approach fills RAM quickly.
	; This doesn't leave room for two bitmaps to be updated. Which limits the bitmap size.
	; The solution is to use cartridge banks for speed code. But this makes the sample IRQ slightly slower.
	; Two, use an indexed copy, which saves RAM and removes the need to use cartridge banks. This means the sample IRQ can be fast.

	; One: Unrolled speed code
!if 0 {
!macro MBitmapSpeedCopy .source , .bitmapAddr , .bitmapColourAddr , .setBank {
	; Bitmap data
!for .xx , kBitmapDrawWidth {
!set .x = .xx - 1 + kBitmapDrawX
!for .yy , kBitmapDrawHeight {
!set .y = .yy - 1 + kBitmapDrawY
!set .char = .bitmapAddr + (.x * 8) + (.y * 8 * VIC2ScreenCharsWidth)
!for .bb , 8 {
!set .b = .bb - 1
	lda .source
	sta .char + .b
}
}
}

	lda #.setBank | %100
	sta CIA2PortASerialBusVICBank
	+MVIC2MemorySetup_ScreenBitmap_A .bitmapColourAddr , .bitmapAddr
	sta VIC2MemorySetup

	; Colour data followed by colour RAM data, chasing the raster down the currently displayed screen
!for .yy , kBitmapDrawHeight {
!set .y = .yy - 1 + kBitmapDrawY
!for .xx , kBitmapDrawWidth {
!set .x = .xx - 1 + kBitmapDrawX
!set .char = .bitmapColourAddr + .x + (.y * VIC2ScreenCharsWidth)
	lda .source
	sta .char
!set .char = COLOURRAM + .x + (.y * VIC2ScreenCharsWidth)
	lda .source
	sta .char
}
}
}
}



!set MInsertVolumeEveryCount = 0

!macro MInsertVolumeEvery {
!set MInsertVolumeEveryCount = MInsertVolumeEveryCount + 1
!if MInsertVolumeEveryCount >= 24 {
!set MInsertVolumeEveryCount = 0
	; NOTE: Take the same time as reading the sample data, for testing
;	lda VIC2Raster
;	sta VIC2BorderColour
	lda CIA2PortBRS232
	sta SIDVolumeFilter
}
}
!macro MInsertVolumeEveryForce {
	; NOTE: Take the same time as reading the sample data, for testing
;	lda VIC2Raster
;	sta VIC2BorderColour
	lda CIA2PortBRS232
	sta SIDVolumeFilter
}

InsertVolumeEveryDelay
	ldy #24
.dl2
	; NOTE: Take the same time as reading the sample data, for testing
;	lda VIC2Raster
;	sta VIC2BorderColour
	lda CIA2PortBRS232
	sta SIDVolumeFilter

	ldx #24
.dl1
	dex
	bne .dl1

	dey
	bne .dl2

	rts


	; Two: Indexed copy
!if 1 {
!macro MBitmapSpeedCopy .source , .bitmapAddr , .bitmapColourAddr , .setBank {
	; Bitmap data
!for .xx , kBitmapDrawWidth {
!set .x = .xx - 1 + kBitmapDrawX
	ldx #7
!set .cl1 = *
!for .yy , kBitmapDrawHeight {
!set .y = .yy - 1 + kBitmapDrawY
!set .char = .bitmapAddr + (.x * 8) + (.y * 8 * VIC2ScreenCharsWidth)
	lda .source
	sta .char , x
}
	+MInsertVolumeEveryForce
	dex
	bpl .cl1
}
}

!macro MBitmapSpeedCopy2 .source , .bitmapAddr , .bitmapColourAddr , .setBank {
	lda #.setBank | %100
	sta CIA2PortASerialBusVICBank
	+MVIC2MemorySetup_ScreenBitmap_A .bitmapColourAddr , .bitmapAddr
	sta VIC2MemorySetup

	; Colour data followed by colour RAM data, chasing the raster down the currently displayed screen
!for .yy , kBitmapDrawHeight {
!set .y = .yy - 1 + kBitmapDrawY
!for .xx , kBitmapDrawWidth {
!set .x = .xx - 1 + kBitmapDrawX
!set .char = .bitmapColourAddr + .x + (.y * VIC2ScreenCharsWidth)
	lda .source
	sta .char
	+MInsertVolumeEvery
!set .char = COLOURRAM + .x + (.y * VIC2ScreenCharsWidth)
	lda .source
	sta .char
	+MInsertVolumeEvery
}
}
}
}

;kSource = SIDVoice3WaveformOutput
kSource = CIA2PortBRS232

!set MInsertVolumeEveryCount = 0

.frame0Colours
	+MBitmapSpeedCopy2 kSource , $2000 , $2400 , CIA2PortASerialBusVICBank_Bank0
	rts

* = $2000
	!fill $2000 , 0
* = $4000
	!fill $2000 , 0

* = $6000
.l1
	+MACROWaitForRaster 220
;	inc VIC2BorderColour
	; This memory layout means the top ~4 lines must be black because the colour (screen) is in the bitmap data
	+MBitmapSpeedCopy kSource , $2000 , $2400 , CIA2PortASerialBusVICBank_Bank0
;	inc VIC2BorderColour
	jsr .frame0Colours
	jsr InsertVolumeEveryDelay
;	dec VIC2BorderColour
;	dec VIC2BorderColour

;	+WaitForFire_A

!set MInsertVolumeEveryCount = 0

	+MACROWaitForRaster 220
;	inc VIC2BorderColour
	+MBitmapSpeedCopy kSource , $4000 , $4400 , CIA2PortASerialBusVICBank_Bank1
;	inc VIC2BorderColour
	+MBitmapSpeedCopy2 kSource , $4000 , $4400 , CIA2PortASerialBusVICBank_Bank1
	jsr InsertVolumeEveryDelay
;	dec VIC2BorderColour
;	dec VIC2BorderColour

;	+WaitForFire_A

	jmp .l1
}


!if 0 {
	lda #1
	sta VIC2SpriteEnable
	sta VIC2SpriteMulticolour
	lda #VIC2Colour_DarkGrey
	sta VIC2ExtraSpriteColour1
	lda #VIC2Colour_LightGrey
	sta VIC2ExtraSpriteColour2
	lda #VIC2Colour_LightBlue
	sta VIC2Sprite0Colour

	lda #$80
	sta VIC2Sprite0X
	sta VIC2Sprite0Y
	lda #$ff
	sta SPRITEFRAME

	; Setup zeropage
	ldx #DecompCodeSize
.czl1
	lda+2 DecompCodeStart-1,x
	sta+2 DecompCodeRealStart-1,x
	dex
	bne .czl1

.l1
	+MACROWaitForRaster $42
	inc VIC2BorderColour

	+MWordValueTo_XY $3fc0
	jsr RNXPCompressionDecompress_InitStore
	+MWordValueTo_XY Frame0
	jsr RNXPCompressionDecompress

	dec VIC2BorderColour
	jmp .l1


!macro RNXPCompressionIncBorder_A {}
!macro RNXPCompressionDecompress_WriteByteAddrHi {}

Decompression_OptimiseForOneEscapeBit = 1
Decompression_OptimiseNoChangingEscape = 1
Decompress_RNZip = 1

DecompCodeStart
!pseudopc $10 {
DecompCodeRealStart
!source "../Decompression/DecompressionVars.a"
CompressionStartOfHistoryBufferTables

}
DecompCodeSize=*-DecompCodeStart

!source "../Decompression/Decompression.a"
!source "../Decompression/DecompressionP2.a"

}

!if 0 {
	; Example bitmap screen display
	+MWordValueTo_XY BitmapLogoColours
	jsr MemoryCopy_SetSource
	+MWordValueTo_XY COLOURRAM
	jsr MemoryCopy_SetDestination
	+MWordValueTo_XY VIC2ScreenCharsWidth * VIC2ScreenCharsHeight
	jsr MemoryCopy_ForSize

	lda #kVIC2ScreenControlHBits_40Columns | kVIC2ScreenControlHBits_Multicolour
	sta VIC2ScreenControlH
	+MVIC2MemorySetup_ScreenBitmap_A BitmapLogoScreen , BitmapLogo
	sta VIC2MemorySetup
	lda #CIA2PortASerialBusVICBank_Bank2
	sta CIA2PortASerialBusVICBank
	lda #VIC2ScreenControlVDefault | kVIC2ScreenControlVBits_Bitmap
	sta VIC2ScreenControlV

	inc $d020
	jmp *-3
}

!if 0 {
.l1

.r1
	lda VIC2ScreenControlV
	bpl .r1

.r0
	lda VIC2ScreenControlV
	bmi .r0

	lda #0
	sta VIC2BorderColour

	lda #30
.l2
	cmp VIC2Raster
	bcs .l2

	inc VIC2BorderColour

	lda #90
.l3
	cmp VIC2Raster
	bcs .l3

	inc VIC2BorderColour

	lda #150
.l4
	cmp VIC2Raster
	bcs .l4

	inc VIC2BorderColour

	jmp .l1
}

!if 0 {
	; RLE Sample playing
	lda #$7f
	sta CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl

	+MACROWaitForTheLastScan_A
	lda #0
	sta VIC2ScreenControlV

	ldx #NMIEntryEnd-NMIEntryStart
.cl2
	lda NMIEntryStart-1,x
	sta+2 NMIEntry-1,x
	dex
	bne .cl2

	lda #<NMIEntry
	sta KERNALNMIServiceRoutineLo
	lda #>NMIEntry
	sta KERNALNMIServiceRoutineHi

	; Start after some small amount of time
	lda #1
	sta CIA2TimerALo
	sta CIA2TimerAHi
	; Start the timer, load the start value and automatically restart
	lda #%00010001
	sta CIA2TimerAControl
	lda #$81
	sta CIA2InterruptControl

	; ACK Any NMI IRQs due to the timer
	lda CIA2InterruptControl
	cli

.l1
	jmp .l1

NMIEntryStart
!pseudopc $10 {
	; NMI Entry
NMIEntry
!if 0 {
	; 68 Cycles
	inc VIC2BorderColour
	sta+1 .sma

.nextSample = *+1
	lda #0
	and #$0f
	sta SIDVolumeFilter

.smAddr = *+1
	lda SampleStart
	sta .nextSample
	sta .smai1
	sta .smai2

.smai1 = *+1
	lda SampleTimerLo
	sta CIA2TimerALo
.smai2 = *+1
	lda SampleTimerHi
	sta CIA2TimerAHi

	inc .smAddr
	bne .o1
	inc .smAddr+1

	lda .smAddr
	cmp #<SampleEnd
	bne .o1
	lda .smAddr+1
	cmp #>SampleEnd
	bne .o1

	+MWordValueToAddress_A SampleStart , .smAddr
.o1
	; Exit the NMI
	dec VIC2BorderColour
	lda CIA2InterruptControl

.sma = *+1
	lda #0
	rti
}

!if 0 {
	; 67 Cycles
	inc VIC2BorderColour
	sta+1 .sma
	sty+1 .smy

.nextSample = *+1
	lda #0
	and #$0f
	sta SIDVolumeFilter

.smAddr = *+1
	lda SampleStart
	sta .nextSample
	tay
	lda SampleTimerLo,y
	sta CIA2TimerALo

	lda SampleTimerHi,y
	sta CIA2TimerAHi

	inc .smAddr
	bne .o1
	inc .smAddr+1

	lda .smAddr
	cmp #<SampleEnd
	bne .o1
	lda .smAddr+1
	cmp #>SampleEnd
	bne .o1

	+MWordValueToAddress_A SampleStart , .smAddr
.o1
	; Exit the NMI
	lda CIA2InterruptControl

.sma = *+1
	lda #0
.smy = *+1
	ldy #0
	dec VIC2BorderColour
	rti
}


}
NMIEntryEnd

!align 255,0
SampleRateHz = 5000
SampleTimerLo
!for .i , 256 {
	!by <(CyclesPerSecondPALC64/(SampleRateHz/     (((.i-1)/16)+1)     ))
}
SampleTimerHi
!for .i , 256 {
	!by >(CyclesPerSecondPALC64/(SampleRateHz/     (((.i-1)/16)+1)     ))
}

SampleStart
	!bin "..\AnimationBitmap\Data\smp_61.raw", $c000
SampleEnd
}

!if 0 {
	; Init the music routine
	lda #0
	jsr $8000

	; Plots the SID waveform output into sprite X postion, which renders a nice line graph
	lda #0
	sta VIC2SpriteXMSB
	lda #128
	sta VIC2Sprite0X
	lda #VIC2SpriteYBorderTop
	sta VIC2Sprite0Y
	lda #%1
	sta VIC2SpriteEnable
	lda #VIC2Colour_White
	sta VIC2Sprite0Colour
	lda #VIC2Colour_LightBlue
	sta VIC2Sprite1Colour
	lda #.theSprite / 64
	sta SPRITEFRAME

	+ClearScreenAt_AX COLOURRAM , 0
	lda #15
	sta SIDVolumeFilter
	lda #$ff
	lda #0
	sta SIDVoice3FreqLo
	lda #10
	sta SIDVoice3FreqHi
	lda #0
	sta SIDVoice3AttackDecay
	lda #$f0
	sta SIDVoice3SustainRelease
	lda #0
	sta SIDVoice3PulseWidthLo
	lda #10
	sta SIDVoice3PulseWidthHi
;	lda #%10000001
;	lda #%01000001
;	lda #%00100001
	lda #%00010001
	sta SIDVoice3Control

	; Display the sprite "oscilloscope"
.l1
	; Moves the sprite down to follow the raster beam of the display, this causes the VIC to render the same sprite as a vertical strip
	lda VIC2Raster
	beq .frameUpdate
	sta VIC2Sprite0Y
	; Reads SID voice 3 waveform output
	lda SIDVoice3WaveformOutput
	lsr
	ora #128
	; Stores into the sprite X coordinate
	sta VIC2Sprite0X
	jmp .l1

.state !by -1
.frameUpdate
	; We don't want the $000 raster, we want the $100 raster, so loop on the 0 high bit...
	lda VIC2ScreenControlV
	bpl .l1
	; $100 raster position
	lda .state
	cmp #4
	bne .o4
	inc VIC2BorderColour
	jsr $8003
	dec VIC2BorderColour
.o4
	+WaitForFireALoop_A .l1

	inc .state

	lda .state
	cmp #5
	bcc .ok
	lda #0
	sta .state
.ok
	cmp #0
	bne .o0
	lda #%10000001
	sta SIDVoice3Control
.o0
	cmp #1
	bne .o1
	lda #%01000001
	sta SIDVoice3Control
.o1
	cmp #2
	bne .o2
	lda #%00100001
	sta SIDVoice3Control
.o2
	cmp #3
	bne .o3
	lda #%00010001
	sta SIDVoice3Control
.o3

	inc VIC2BorderColour
	jmp .l1

* = $8000
!bin "..\Tusari2\bin\Level1.prg",,2

* = $2000
.theSprite
!for .i , 21 {
;	+SpriteLine %########################
;	+SpriteLine %......................##
	+SpriteLine %.......................#
}

}

!if 0 {
.l1
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV
.l2
	lda #JoystickBits_Fire
	bit CIA1KeyboardColumnJoystickA
	bne .l2

	+MACROWaitForRaster VIC2SpriteYBorderTop+7
	inc VIC2BorderColour

	+Crunch VIC2SpriteYBorderTop+8
	+Crunch VIC2SpriteYBorderTop+9
	+Crunch VIC2SpriteYBorderTop+10
	+Crunch VIC2SpriteYBorderTop+11
	+Crunch VIC2SpriteYBorderTop+12
	+Crunch VIC2SpriteYBorderTop+13
	+Crunch VIC2SpriteYBorderTop+14
	+Crunch VIC2SpriteYBorderTop+15
	+Crunch VIC2SpriteYBorderTop+16
	+Crunch VIC2SpriteYBorderTop+17
	+Crunch VIC2SpriteYBorderTop+18
	+Crunch VIC2SpriteYBorderTop+19
	+Crunch VIC2SpriteYBorderTop+20
	+Crunch VIC2SpriteYBorderTop+21
	+Crunch VIC2SpriteYBorderTop+22
	+Crunch VIC2SpriteYBorderTop+23
	+Crunch VIC2SpriteYBorderTop+24
	+Crunch VIC2SpriteYBorderTop+25
	+Crunch VIC2SpriteYBorderTop+26
	+Crunch VIC2SpriteYBorderTop+27
	+Crunch VIC2SpriteYBorderTop+28
	+Crunch VIC2SpriteYBorderTop+29
	+Crunch VIC2SpriteYBorderTop+30


	dec VIC2BorderColour
	jmp .l1
}

!if 0 {
	; Keyboard scan tester
.l1
	+MACROWaitForRaster VIC2SpriteYBorderTop

	inc VIC2BorderColour

	; Read joystick
	lda #%01111111
	sta CIA1KeyboardColumnJoystickA

	lda CIA1KeyboardColumnJoystickA
	sta SCREENRAM+$300

	; Read keyboard
!if 0 {
	lda #%00000000
	sta CIA1KeyboardColumnJoystickA
	lda CIA1KeyboardRowsJoystickB
	sta SCREENRAM+$300+1

	lda CIA1KeyboardRowsJoystickB
	cmp #$ff
	beq .noKey
}

	ldx #%01111111
	ldy #0
	txa
.columnScan
	sta SCREENRAM+$300+8,y
	sta CIA1KeyboardColumnJoystickA
.again
	lda CIA1KeyboardRowsJoystickB
	cmp CIA1KeyboardRowsJoystickB
	bne .again
	sta SCREENRAM+$328+8,y
	iny
	txa
	sec
	ror
	tax
	bcs .columnScan

.noKey
	dec VIC2BorderColour
	jmp .l1
}


!if 0 {
	ldx #0
.l1
	lda #100
.l2
	cmp $d012
	bne .l2
	inx
	txa
	and #7
	sta $d016

	lda #150
.l3
	cmp $d012
	bne .l3
	lda #0
	sta $d016
	jmp .l1
}

!if 0 {
	lda #(VIC2ScreenControlHDefault | %10000)
	sta VIC2ScreenControlH

	lda #VIC2Colour_Grey
	sta VIC2ExtraBackgroundColour1
	lda #VIC2Colour_LightGrey
	sta VIC2ExtraBackgroundColour2

	; Visual update
	inc .stuff
	; Trigger any watches
	inc $c000

.l1 jmp .l1

.stuff !by 0

}

!if 0 {
	ldx #7
.f0
	lda # ($700 / 64)
	sta SCREENRAM+SPRITEFRAMESCROFF,x
	txa
	sta VIC2Sprite0Colour,x
	asl
	tay
	lda #128
	sta VIC2Sprite0Y,y
.sm0	lda #VIC2SpriteXBorderLeft
	sta VIC2Sprite0X,y
	lda .sm0+1
	clc
	adc #VIC2SpriteSizeX
	sta .sm0+1
	dex
	bpl .f0

	lda #%11111111
	sta VIC2SpriteEnable
	lda #0
	sta VIC2SpriteMulticolour
	sta VIC2SpriteDoubleWidth

.l1
	inc VIC2BorderColour
	dec VIC2BorderColour
	jmp .l1

*=$700
!fill 63, 255
}

!source "stdlib/Initialise.a"

!if 0 {
!source "stdlib/MemoryCopy.a"
BitmapLogoColours
!bin "Tusari.col",,2
* = $8c00
BitmapLogoScreen
!bin "Tusari.scr",,2
* = $a000
BitmapLogo
!bin "Tusari.bmp",,2
}

!if 0 {
Frame0
	!bin "c:\temp\tc0.bin",,2
Frame1
	!bin "c:\temp\tc1.bin",,2
Frame2
	!bin "c:\temp\tc2.bin",,2
Frame3
	!bin "c:\temp\tc3.bin",,2
Frame4
	!bin "c:\temp\tc4.bin",,2
Frame5
	!bin "c:\temp\tc5.bin",,2
Frame6
	!bin "c:\temp\tc6.bin",,2
Frame7
	!bin "c:\temp\tc7.bin",,2
Frame8
	!bin "c:\temp\tc8.bin",,2
Frame9
	!bin "c:\temp\tc9.bin",,2
Frame10
	!bin "c:\temp\tc10.bin",,2
}
